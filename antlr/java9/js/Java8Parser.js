// Generated from ../Java8Parser.g4 by ANTLR 4.9.1
// jshint ignore: start
import antlr4 from 'antlr4';
import Java8ParserListener from './Java8ParserListener.js';
import Java8ParserVisitor from './Java8ParserVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003m\u0b1e\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004",
    "x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004",
    "\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t",
    "\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004",
    "\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t",
    "\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0004",
    "\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004\u0090\t",
    "\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t\u0093\u0004",
    "\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0004\u0097\t",
    "\u0097\u0004\u0098\t\u0098\u0004\u0099\t\u0099\u0004\u009a\t\u009a\u0004",
    "\u009b\t\u009b\u0004\u009c\t\u009c\u0004\u009d\t\u009d\u0004\u009e\t",
    "\u009e\u0004\u009f\t\u009f\u0004\u00a0\t\u00a0\u0004\u00a1\t\u00a1\u0004",
    "\u00a2\t\u00a2\u0004\u00a3\t\u00a3\u0004\u00a4\t\u00a4\u0004\u00a5\t",
    "\u00a5\u0004\u00a6\t\u00a6\u0004\u00a7\t\u00a7\u0004\u00a8\t\u00a8\u0004",
    "\u00a9\t\u00a9\u0004\u00aa\t\u00aa\u0004\u00ab\t\u00ab\u0004\u00ac\t",
    "\u00ac\u0004\u00ad\t\u00ad\u0004\u00ae\t\u00ae\u0004\u00af\t\u00af\u0004",
    "\u00b0\t\u00b0\u0004\u00b1\t\u00b1\u0004\u00b2\t\u00b2\u0004\u00b3\t",
    "\u00b3\u0004\u00b4\t\u00b4\u0004\u00b5\t\u00b5\u0004\u00b6\t\u00b6\u0004",
    "\u00b7\t\u00b7\u0004\u00b8\t\u00b8\u0004\u00b9\t\u00b9\u0004\u00ba\t",
    "\u00ba\u0004\u00bb\t\u00bb\u0004\u00bc\t\u00bc\u0004\u00bd\t\u00bd\u0004",
    "\u00be\t\u00be\u0004\u00bf\t\u00bf\u0004\u00c0\t\u00c0\u0004\u00c1\t",
    "\u00c1\u0004\u00c2\t\u00c2\u0004\u00c3\t\u00c3\u0004\u00c4\t\u00c4\u0004",
    "\u00c5\t\u00c5\u0004\u00c6\t\u00c6\u0004\u00c7\t\u00c7\u0004\u00c8\t",
    "\u00c8\u0004\u00c9\t\u00c9\u0004\u00ca\t\u00ca\u0004\u00cb\t\u00cb\u0004",
    "\u00cc\t\u00cc\u0004\u00cd\t\u00cd\u0004\u00ce\t\u00ce\u0004\u00cf\t",
    "\u00cf\u0004\u00d0\t\u00d0\u0004\u00d1\t\u00d1\u0004\u00d2\t\u00d2\u0004",
    "\u00d3\t\u00d3\u0004\u00d4\t\u00d4\u0004\u00d5\t\u00d5\u0004\u00d6\t",
    "\u00d6\u0004\u00d7\t\u00d7\u0004\u00d8\t\u00d8\u0004\u00d9\t\u00d9\u0004",
    "\u00da\t\u00da\u0004\u00db\t\u00db\u0004\u00dc\t\u00dc\u0004\u00dd\t",
    "\u00dd\u0004\u00de\t\u00de\u0004\u00df\t\u00df\u0004\u00e0\t\u00e0\u0004",
    "\u00e1\t\u00e1\u0004\u00e2\t\u00e2\u0004\u00e3\t\u00e3\u0004\u00e4\t",
    "\u00e4\u0004\u00e5\t\u00e5\u0004\u00e6\t\u00e6\u0004\u00e7\t\u00e7\u0004",
    "\u00e8\t\u00e8\u0004\u00e9\t\u00e9\u0004\u00ea\t\u00ea\u0004\u00eb\t",
    "\u00eb\u0004\u00ec\t\u00ec\u0004\u00ed\t\u00ed\u0003\u0002\u0003\u0002",
    "\u0003\u0003\u0007\u0003\u01de\n\u0003\f\u0003\u000e\u0003\u01e1\u000b",
    "\u0003\u0003\u0003\u0003\u0003\u0007\u0003\u01e5\n\u0003\f\u0003\u000e",
    "\u0003\u01e8\u000b\u0003\u0003\u0003\u0005\u0003\u01eb\n\u0003\u0003",
    "\u0004\u0003\u0004\u0005\u0004\u01ef\n\u0004\u0003\u0005\u0003\u0005",
    "\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007",
    "\u01f8\n\u0007\u0003\b\u0003\b\u0005\b\u01fc\n\b\u0003\b\u0003\b\u0007",
    "\b\u0200\n\b\f\b\u000e\b\u0203\u000b\b\u0003\t\u0007\t\u0206\n\t\f\t",
    "\u000e\t\u0209\u000b\t\u0003\t\u0003\t\u0005\t\u020d\n\t\u0003\t\u0003",
    "\t\u0003\t\u0007\t\u0212\n\t\f\t\u000e\t\u0215\u000b\t\u0003\t\u0003",
    "\t\u0005\t\u0219\n\t\u0005\t\u021b\n\t\u0003\n\u0003\n\u0007\n\u021f",
    "\n\n\f\n\u000e\n\u0222\u000b\n\u0003\n\u0003\n\u0005\n\u0226\n\n\u0003",
    "\u000b\u0007\u000b\u0229\n\u000b\f\u000b\u000e\u000b\u022c\u000b\u000b",
    "\u0003\u000b\u0003\u000b\u0005\u000b\u0230\n\u000b\u0003\f\u0003\f\u0003",
    "\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0007\u000f\u0239\n\u000f",
    "\f\u000f\u000e\u000f\u023c\u000b\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0005\u0010\u0249\n\u0010\u0003\u0011",
    "\u0007\u0011\u024c\n\u0011\f\u0011\u000e\u0011\u024f\u000b\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u0254\n\u0011\f\u0011\u000e",
    "\u0011\u0257\u000b\u0011\u0003\u0011\u0003\u0011\u0007\u0011\u025b\n",
    "\u0011\f\u0011\u000e\u0011\u025e\u000b\u0011\u0003\u0012\u0007\u0012",
    "\u0261\n\u0012\f\u0012\u000e\u0012\u0264\u000b\u0012\u0003\u0012\u0003",
    "\u0012\u0005\u0012\u0268\n\u0012\u0003\u0013\u0003\u0013\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0007\u0014\u0271\n",
    "\u0014\f\u0014\u000e\u0014\u0274\u000b\u0014\u0005\u0014\u0276\n\u0014",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016",
    "\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0007\u0017\u0282\n",
    "\u0017\f\u0017\u000e\u0017\u0285\u000b\u0017\u0003\u0018\u0003\u0018",
    "\u0005\u0018\u0289\n\u0018\u0003\u0019\u0007\u0019\u028c\n\u0019\f\u0019",
    "\u000e\u0019\u028f\u000b\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0293",
    "\n\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001a\u0005\u001a",
    "\u0299\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0007\u001b\u02a1\n\u001b\f\u001b\u000e\u001b\u02a4",
    "\u000b\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0005\u001c\u02ab\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u02b3\n\u001d\f\u001d\u000e",
    "\u001d\u02b6\u000b\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001e\u0005\u001e\u02bd\n\u001e\u0003\u001f\u0003\u001f\u0003",
    " \u0003 \u0003 \u0003 \u0003 \u0003 \u0007 \u02c7\n \f \u000e \u02ca",
    "\u000b \u0003!\u0005!\u02cd\n!\u0003!\u0007!\u02d0\n!\f!\u000e!\u02d3",
    "\u000b!\u0003!\u0007!\u02d6\n!\f!\u000e!\u02d9\u000b!\u0003!\u0003!",
    "\u0003\"\u0007\"\u02de\n\"\f\"\u000e\"\u02e1\u000b\"\u0003\"\u0003\"",
    "\u0003\"\u0003\"\u0003#\u0003#\u0003$\u0003$\u0003$\u0003$\u0005$\u02ed",
    "\n$\u0003%\u0003%\u0003%\u0003%\u0003&\u0003&\u0003&\u0003&\u0003&\u0003",
    "&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003(\u0003(\u0003(\u0003(\u0003(\u0003)\u0003)\u0003)\u0005)\u030a",
    "\n)\u0003*\u0003*\u0005*\u030e\n*\u0003+\u0007+\u0311\n+\f+\u000e+\u0314",
    "\u000b+\u0003+\u0003+\u0003+\u0005+\u0319\n+\u0003+\u0005+\u031c\n+",
    "\u0003+\u0005+\u031f\n+\u0003+\u0003+\u0003,\u0003,\u0003,\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0005,\u032b\n,\u0003-\u0003-\u0003-\u0003-\u0003",
    ".\u0003.\u0003.\u0007.\u0334\n.\f.\u000e.\u0337\u000b.\u0003/\u0003",
    "/\u0003/\u00030\u00030\u00030\u00031\u00031\u00031\u00071\u0342\n1\f",
    "1\u000e1\u0345\u000b1\u00032\u00032\u00072\u0349\n2\f2\u000e2\u034c",
    "\u000b2\u00032\u00032\u00033\u00033\u00033\u00033\u00053\u0354\n3\u0003",
    "4\u00034\u00034\u00034\u00034\u00054\u035b\n4\u00035\u00075\u035e\n",
    "5\f5\u000e5\u0361\u000b5\u00035\u00035\u00035\u00035\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00056\u036f\n6\u00037\u00037\u0003",
    "7\u00077\u0374\n7\f7\u000e7\u0377\u000b7\u00038\u00038\u00038\u0005",
    "8\u037c\n8\u00039\u00039\u00059\u0380\n9\u0003:\u0003:\u0005:\u0384",
    "\n:\u0003;\u0003;\u0005;\u0388\n;\u0003<\u0003<\u0005<\u038c\n<\u0003",
    "=\u0003=\u0003=\u0005=\u0391\n=\u0003>\u0003>\u0005>\u0395\n>\u0003",
    ">\u0003>\u0007>\u0399\n>\f>\u000e>\u039c\u000b>\u0003?\u0003?\u0005",
    "?\u03a0\n?\u0003?\u0003?\u0003?\u0007?\u03a5\n?\f?\u000e?\u03a8\u000b",
    "?\u0003?\u0003?\u0005?\u03ac\n?\u0005?\u03ae\n?\u0003@\u0003@\u0007",
    "@\u03b2\n@\f@\u000e@\u03b5\u000b@\u0003@\u0003@\u0005@\u03b9\n@\u0003",
    "A\u0003A\u0005A\u03bd\nA\u0003B\u0003B\u0003C\u0003C\u0003D\u0003D\u0003",
    "E\u0003E\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003F\u0003",
    "F\u0005F\u03d0\nF\u0003G\u0007G\u03d3\nG\fG\u000eG\u03d6\u000bG\u0003",
    "G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003H\u0003",
    "H\u0003H\u0003H\u0005H\u03e5\nH\u0003I\u0003I\u0003I\u0005I\u03ea\n",
    "I\u0003I\u0003I\u0007I\u03ee\nI\fI\u000eI\u03f1\u000bI\u0003I\u0003",
    "I\u0003I\u0005I\u03f6\nI\u0005I\u03f8\nI\u0003J\u0003J\u0005J\u03fc",
    "\nJ\u0003K\u0003K\u0003K\u0005K\u0401\nK\u0003K\u0003K\u0005K\u0405",
    "\nK\u0003L\u0003L\u0003L\u0003L\u0003L\u0003L\u0005L\u040d\nL\u0003",
    "M\u0003M\u0003M\u0007M\u0412\nM\fM\u000eM\u0415\u000bM\u0003M\u0003",
    "M\u0003M\u0007M\u041a\nM\fM\u000eM\u041d\u000bM\u0005M\u041f\nM\u0003",
    "N\u0007N\u0422\nN\fN\u000eN\u0425\u000bN\u0003N\u0003N\u0003N\u0003",
    "O\u0003O\u0005O\u042c\nO\u0003P\u0007P\u042f\nP\fP\u000eP\u0432\u000b",
    "P\u0003P\u0003P\u0007P\u0436\nP\fP\u000eP\u0439\u000bP\u0003P\u0003",
    "P\u0003P\u0003P\u0005P\u043f\nP\u0003Q\u0007Q\u0442\nQ\fQ\u000eQ\u0445",
    "\u000bQ\u0003Q\u0003Q\u0003Q\u0005Q\u044a\nQ\u0003Q\u0003Q\u0003R\u0003",
    "R\u0003R\u0003S\u0003S\u0003S\u0007S\u0454\nS\fS\u000eS\u0457\u000b",
    "S\u0003T\u0003T\u0005T\u045b\nT\u0003U\u0003U\u0005U\u045f\nU\u0003",
    "V\u0003V\u0003W\u0003W\u0003W\u0003X\u0007X\u0467\nX\fX\u000eX\u046a",
    "\u000bX\u0003X\u0003X\u0005X\u046e\nX\u0003X\u0003X\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0005Y\u0476\nY\u0003Z\u0005Z\u0479\nZ\u0003Z\u0003Z\u0003",
    "Z\u0005Z\u047e\nZ\u0003Z\u0003Z\u0003[\u0003[\u0003\\\u0003\\\u0005",
    "\\\u0486\n\\\u0003\\\u0005\\\u0489\n\\\u0003\\\u0003\\\u0003]\u0005",
    "]\u048e\n]\u0003]\u0003]\u0003]\u0005]\u0493\n]\u0003]\u0003]\u0003",
    "]\u0005]\u0498\n]\u0003]\u0003]\u0003]\u0005]\u049d\n]\u0003]\u0003",
    "]\u0003]\u0003]\u0003]\u0005]\u04a4\n]\u0003]\u0003]\u0003]\u0005]\u04a9",
    "\n]\u0003]\u0003]\u0003]\u0003]\u0003]\u0003]\u0005]\u04b1\n]\u0003",
    "]\u0003]\u0003]\u0005]\u04b6\n]\u0003]\u0003]\u0003]\u0005]\u04bb\n",
    "]\u0003^\u0007^\u04be\n^\f^\u000e^\u04c1\u000b^\u0003^\u0003^\u0003",
    "^\u0005^\u04c6\n^\u0003^\u0003^\u0003_\u0003_\u0005_\u04cc\n_\u0003",
    "_\u0005_\u04cf\n_\u0003_\u0005_\u04d2\n_\u0003_\u0003_\u0003`\u0003",
    "`\u0003`\u0007`\u04d9\n`\f`\u000e`\u04dc\u000b`\u0003a\u0007a\u04df",
    "\na\fa\u000ea\u04e2\u000ba\u0003a\u0003a\u0003a\u0005a\u04e7\na\u0003",
    "a\u0005a\u04ea\na\u0003a\u0005a\u04ed\na\u0003b\u0003b\u0003c\u0003",
    "c\u0007c\u04f3\nc\fc\u000ec\u04f6\u000bc\u0003d\u0003d\u0005d\u04fa",
    "\nd\u0003e\u0007e\u04fd\ne\fe\u000ee\u0500\u000be\u0003e\u0003e\u0003",
    "e\u0005e\u0505\ne\u0003e\u0005e\u0508\ne\u0003e\u0003e\u0003f\u0003",
    "f\u0003f\u0003f\u0003f\u0003f\u0003f\u0005f\u0513\nf\u0003g\u0003g\u0003",
    "g\u0003h\u0003h\u0007h\u051a\nh\fh\u000eh\u051d\u000bh\u0003h\u0003",
    "h\u0003i\u0003i\u0003i\u0003i\u0003i\u0005i\u0526\ni\u0003j\u0007j\u0529",
    "\nj\fj\u000ej\u052c\u000bj\u0003j\u0003j\u0003j\u0003j\u0003k\u0003",
    "k\u0003k\u0003k\u0005k\u0536\nk\u0003l\u0007l\u0539\nl\fl\u000el\u053c",
    "\u000bl\u0003l\u0003l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003",
    "m\u0005m\u0547\nm\u0003n\u0007n\u054a\nn\fn\u000en\u054d\u000bn\u0003",
    "n\u0003n\u0003n\u0003n\u0003n\u0003o\u0003o\u0007o\u0556\no\fo\u000e",
    "o\u0559\u000bo\u0003o\u0003o\u0003p\u0003p\u0003p\u0003p\u0003p\u0005",
    "p\u0562\np\u0003q\u0007q\u0565\nq\fq\u000eq\u0568\u000bq\u0003q\u0003",
    "q\u0003q\u0003q\u0003q\u0005q\u056f\nq\u0003q\u0005q\u0572\nq\u0003",
    "q\u0003q\u0003r\u0003r\u0003r\u0005r\u0579\nr\u0003s\u0003s\u0003s\u0003",
    "t\u0003t\u0003t\u0005t\u0581\nt\u0003u\u0003u\u0003u\u0003u\u0005u\u0587",
    "\nu\u0003u\u0003u\u0003v\u0003v\u0003v\u0007v\u058e\nv\fv\u000ev\u0591",
    "\u000bv\u0003w\u0003w\u0003w\u0003w\u0003x\u0003x\u0003x\u0005x\u059a",
    "\nx\u0003y\u0003y\u0005y\u059e\ny\u0003y\u0005y\u05a1\ny\u0003y\u0003",
    "y\u0003z\u0003z\u0003z\u0007z\u05a8\nz\fz\u000ez\u05ab\u000bz\u0003",
    "{\u0003{\u0003{\u0003|\u0003|\u0003|\u0003|\u0003|\u0003|\u0003}\u0003",
    "}\u0005}\u05b8\n}\u0003}\u0005}\u05bb\n}\u0003}\u0003}\u0003~\u0003",
    "~\u0003~\u0007~\u05c2\n~\f~\u000e~\u05c5\u000b~\u0003\u007f\u0003\u007f",
    "\u0005\u007f\u05c9\n\u007f\u0003\u007f\u0003\u007f\u0003\u0080\u0006",
    "\u0080\u05ce\n\u0080\r\u0080\u000e\u0080\u05cf\u0003\u0081\u0003\u0081",
    "\u0003\u0081\u0005\u0081\u05d5\n\u0081\u0003\u0082\u0003\u0082\u0003",
    "\u0082\u0003\u0083\u0007\u0083\u05db\n\u0083\f\u0083\u000e\u0083\u05de",
    "\u000b\u0083\u0003\u0083\u0003\u0083\u0003\u0083\u0003\u0084\u0003\u0084",
    "\u0003\u0084\u0003\u0084\u0003\u0084\u0003\u0084\u0005\u0084\u05e9\n",
    "\u0084\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0003\u0085\u0005",
    "\u0085\u05f0\n\u0085\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086",
    "\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086\u0003\u0086",
    "\u0003\u0086\u0003\u0086\u0005\u0086\u05fe\n\u0086\u0003\u0087\u0003",
    "\u0087\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0088\u0003\u0089\u0003",
    "\u0089\u0003\u0089\u0003\u0089\u0003\u008a\u0003\u008a\u0003\u008a\u0003",
    "\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003\u008b\u0003",
    "\u008b\u0005\u008b\u0614\n\u008b\u0003\u008c\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0003\u008c\u0003\u008c\u0003\u008d\u0003\u008d\u0003\u008d",
    "\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008d\u0003\u008e",
    "\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e\u0003\u008e",
    "\u0003\u008e\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f",
    "\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0003\u008f\u0005\u008f",
    "\u0636\n\u008f\u0003\u0090\u0003\u0090\u0003\u0090\u0003\u0090\u0003",
    "\u0090\u0003\u0090\u0003\u0091\u0003\u0091\u0007\u0091\u0640\n\u0091",
    "\f\u0091\u000e\u0091\u0643\u000b\u0091\u0003\u0091\u0007\u0091\u0646",
    "\n\u0091\f\u0091\u000e\u0091\u0649\u000b\u0091\u0003\u0091\u0003\u0091",
    "\u0003\u0092\u0003\u0092\u0003\u0092\u0003\u0093\u0003\u0093\u0007\u0093",
    "\u0652\n\u0093\f\u0093\u000e\u0093\u0655\u000b\u0093\u0003\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003\u0094\u0003",
    "\u0094\u0003\u0094\u0003\u0094\u0005\u0094\u0661\n\u0094\u0003\u0095",
    "\u0003\u0095\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096\u0003\u0096",
    "\u0003\u0096\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097\u0003\u0097",
    "\u0003\u0097\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0098",
    "\u0003\u0098\u0003\u0098\u0003\u0098\u0003\u0099\u0003\u0099\u0005\u0099",
    "\u067b\n\u0099\u0003\u009a\u0003\u009a\u0005\u009a\u067f\n\u009a\u0003",
    "\u009b\u0003\u009b\u0003\u009b\u0005\u009b\u0684\n\u009b\u0003\u009b",
    "\u0003\u009b\u0005\u009b\u0688\n\u009b\u0003\u009b\u0003\u009b\u0005",
    "\u009b\u068c\n\u009b\u0003\u009b\u0003\u009b\u0003\u009b\u0003\u009c",
    "\u0003\u009c\u0003\u009c\u0005\u009c\u0694\n\u009c\u0003\u009c\u0003",
    "\u009c\u0005\u009c\u0698\n\u009c\u0003\u009c\u0003\u009c\u0005\u009c",
    "\u069c\n\u009c\u0003\u009c\u0003\u009c\u0003\u009c\u0003\u009d\u0003",
    "\u009d\u0005\u009d\u06a3\n\u009d\u0003\u009e\u0003\u009e\u0003\u009f",
    "\u0003\u009f\u0003\u009f\u0007\u009f\u06aa\n\u009f\f\u009f\u000e\u009f",
    "\u06ad\u000b\u009f\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0007\u00a0\u06b2",
    "\n\u00a0\f\u00a0\u000e\u00a0\u06b5\u000b\u00a0\u0003\u00a0\u0003\u00a0",
    "\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a0\u0003\u00a1",
    "\u0003\u00a1\u0003\u00a1\u0007\u00a1\u06c1\n\u00a1\f\u00a1\u000e\u00a1",
    "\u06c4\u000b\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a1\u0003",
    "\u00a1\u0003\u00a1\u0003\u00a1\u0003\u00a2\u0003\u00a2\u0005\u00a2\u06cf",
    "\n\u00a2\u0003\u00a2\u0003\u00a2\u0003\u00a3\u0003\u00a3\u0005\u00a3",
    "\u06d5\n\u00a3\u0003\u00a3\u0003\u00a3\u0003\u00a4\u0003\u00a4\u0005",
    "\u00a4\u06db\n\u00a4\u0003\u00a4\u0003\u00a4\u0003\u00a5\u0003\u00a5",
    "\u0003\u00a5\u0003\u00a5\u0003\u00a6\u0003\u00a6\u0003\u00a6\u0003\u00a6",
    "\u0003\u00a6\u0003\u00a6\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0003\u00a7",
    "\u0003\u00a7\u0003\u00a7\u0003\u00a7\u0005\u00a7\u06f0\n\u00a7\u0003",
    "\u00a7\u0003\u00a7\u0003\u00a7\u0005\u00a7\u06f5\n\u00a7\u0003\u00a8",
    "\u0003\u00a8\u0007\u00a8\u06f9\n\u00a8\f\u00a8\u000e\u00a8\u06fc\u000b",
    "\u00a8\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003\u00a9\u0003",
    "\u00a9\u0003\u00aa\u0007\u00aa\u0705\n\u00aa\f\u00aa\u000e\u00aa\u0708",
    "\u000b\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00aa\u0003\u00ab\u0003\u00ab",
    "\u0003\u00ab\u0007\u00ab\u0710\n\u00ab\f\u00ab\u000e\u00ab\u0713\u000b",
    "\u00ab\u0003\u00ac\u0003\u00ac\u0003\u00ac\u0003\u00ad\u0003\u00ad\u0003",
    "\u00ad\u0003\u00ad\u0005\u00ad\u071c\n\u00ad\u0003\u00ad\u0005\u00ad",
    "\u071f\n\u00ad\u0003\u00ae\u0003\u00ae\u0003\u00ae\u0005\u00ae\u0724",
    "\n\u00ae\u0003\u00ae\u0003\u00ae\u0003\u00af\u0003\u00af\u0003\u00af",
    "\u0007\u00af\u072b\n\u00af\f\u00af\u000e\u00af\u072e\u000b\u00af\u0003",
    "\u00b0\u0007\u00b0\u0731\n\u00b0\f\u00b0\u000e\u00b0\u0734\u000b\u00b0",
    "\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b0\u0003\u00b1",
    "\u0003\u00b1\u0005\u00b1\u073d\n\u00b1\u0003\u00b1\u0007\u00b1\u0740",
    "\n\u00b1\f\u00b1\u000e\u00b1\u0743\u000b\u00b1\u0003\u00b2\u0003\u00b2",
    "\u0003\u00b2\u0003\u00b2\u0007\u00b2\u0749\n\u00b2\f\u00b2\u000e\u00b2",
    "\u074c\u000b\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0003",
    "\u00b2\u0003\u00b2\u0003\u00b2\u0003\u00b2\u0005\u00b2\u0762\n\u00b2",
    "\u0003\u00b3\u0003\u00b3\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4",
    "\u0007\u00b4\u076a\n\u00b4\f\u00b4\u000e\u00b4\u076d\u000b\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003\u00b4\u0003",
    "\u00b4\u0005\u00b4\u0782\n\u00b4\u0003\u00b5\u0003\u00b5\u0003\u00b5",
    "\u0003\u00b5\u0003\u00b5\u0005\u00b5\u0789\n\u00b5\u0003\u00b6\u0003",
    "\u00b6\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0003\u00b7\u0005\u00b7\u0791",
    "\n\u00b7\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0007\u00b8",
    "\u0797\n\u00b8\f\u00b8\u000e\u00b8\u079a\u000b\u00b8\u0003\u00b8\u0003",
    "\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0007\u00b8\u07a2",
    "\n\u00b8\f\u00b8\u000e\u00b8\u07a5\u000b\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8\u0003\u00b8",
    "\u0005\u00b8\u07bb\n\u00b8\u0003\u00b9\u0003\u00b9\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0007\u00ba\u07c3\n\u00ba\f\u00ba\u000e",
    "\u00ba\u07c6\u000b\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba",
    "\u0003\u00ba\u0003\u00ba\u0007\u00ba\u07ce\n\u00ba\f\u00ba\u000e\u00ba",
    "\u07d1\u000b\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003\u00ba\u0003",
    "\u00ba\u0003\u00ba\u0003\u00ba\u0005\u00ba\u07e6\n\u00ba\u0003\u00bb",
    "\u0003\u00bb\u0005\u00bb\u07ea\n\u00bb\u0003\u00bb\u0007\u00bb\u07ed",
    "\n\u00bb\f\u00bb\u000e\u00bb\u07f0\u000b\u00bb\u0003\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0007\u00bb\u07f5\n\u00bb\f\u00bb\u000e\u00bb\u07f8\u000b",
    "\u00bb\u0003\u00bb\u0007\u00bb\u07fb\n\u00bb\f\u00bb\u000e\u00bb\u07fe",
    "\u000b\u00bb\u0003\u00bb\u0005\u00bb\u0801\n\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0005\u00bb\u0805\n\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb",
    "\u0809\n\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0003\u00bb\u0005",
    "\u00bb\u080f\n\u00bb\u0003\u00bb\u0007\u00bb\u0812\n\u00bb\f\u00bb\u000e",
    "\u00bb\u0815\u000b\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0819\n",
    "\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u081d\n\u00bb\u0003\u00bb",
    "\u0003\u00bb\u0005\u00bb\u0821\n\u00bb\u0003\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0003\u00bb\u0005\u00bb\u0827\n\u00bb\u0003\u00bb\u0007\u00bb",
    "\u082a\n\u00bb\f\u00bb\u000e\u00bb\u082d\u000b\u00bb\u0003\u00bb\u0003",
    "\u00bb\u0005\u00bb\u0831\n\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb",
    "\u0835\n\u00bb\u0003\u00bb\u0003\u00bb\u0005\u00bb\u0839\n\u00bb\u0005",
    "\u00bb\u083b\n\u00bb\u0003\u00bc\u0003\u00bc\u0003\u00bc\u0005\u00bc",
    "\u0840\n\u00bc\u0003\u00bc\u0007\u00bc\u0843\n\u00bc\f\u00bc\u000e\u00bc",
    "\u0846\u000b\u00bc\u0003\u00bc\u0003\u00bc\u0005\u00bc\u084a\n\u00bc",
    "\u0003\u00bc\u0003\u00bc\u0005\u00bc\u084e\n\u00bc\u0003\u00bc\u0003",
    "\u00bc\u0005\u00bc\u0852\n\u00bc\u0003\u00bd\u0003\u00bd\u0005\u00bd",
    "\u0856\n\u00bd\u0003\u00bd\u0007\u00bd\u0859\n\u00bd\f\u00bd\u000e\u00bd",
    "\u085c\u000b\u00bd\u0003\u00bd\u0003\u00bd\u0003\u00bd\u0007\u00bd\u0861",
    "\n\u00bd\f\u00bd\u000e\u00bd\u0864\u000b\u00bd\u0003\u00bd\u0007\u00bd",
    "\u0867\n\u00bd\f\u00bd\u000e\u00bd\u086a\u000b\u00bd\u0003\u00bd\u0005",
    "\u00bd\u086d\n\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0871\n\u00bd",
    "\u0003\u00bd\u0003\u00bd\u0005\u00bd\u0875\n\u00bd\u0003\u00bd\u0003",
    "\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u087b\n\u00bd\u0003\u00bd",
    "\u0007\u00bd\u087e\n\u00bd\f\u00bd\u000e\u00bd\u0881\u000b\u00bd\u0003",
    "\u00bd\u0003\u00bd\u0005\u00bd\u0885\n\u00bd\u0003\u00bd\u0003\u00bd",
    "\u0005\u00bd\u0889\n\u00bd\u0003\u00bd\u0003\u00bd\u0005\u00bd\u088d",
    "\n\u00bd\u0005\u00bd\u088f\n\u00bd\u0003\u00be\u0003\u00be\u0003\u00be",
    "\u0005\u00be\u0894\n\u00be\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0003",
    "\u00bf\u0003\u00bf\u0003\u00bf\u0003\u00bf\u0005\u00bf\u08a3\n\u00bf",
    "\u0003\u00c0\u0003\u00c0\u0003\u00c0\u0003\u00c1\u0003\u00c1\u0003\u00c1",
    "\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1\u0003\u00c1",
    "\u0005\u00c1\u08b1\n\u00c1\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2\u0003",
    "\u00c2\u0005\u00c2\u08bd\n\u00c2\u0003\u00c2\u0003\u00c2\u0003\u00c2",
    "\u0003\u00c2\u0003\u00c2\u0007\u00c2\u08c4\n\u00c2\f\u00c2\u000e\u00c2",
    "\u08c7\u000b\u00c2\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003",
    "\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0003\u00c3\u0007",
    "\u00c3\u08d3\n\u00c3\f\u00c3\u000e\u00c3\u08d6\u000b\u00c3\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4",
    "\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0005\u00c4\u08e2\n\u00c4\u0003",
    "\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0003\u00c4\u0007\u00c4\u08e9",
    "\n\u00c4\f\u00c4\u000e\u00c4\u08ec\u000b\u00c4\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0005\u00c5\u08f1\n\u00c5\u0003\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u08f8\n\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0005\u00c5\u08fd\n\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0904\n\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0909\n\u00c5\u0003",
    "\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0910",
    "\n\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0915\n\u00c5",
    "\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5",
    "\u091c\n\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5\u0921",
    "\n\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5\u0003\u00c5",
    "\u0003\u00c5\u0005\u00c5\u0929\n\u00c5\u0003\u00c5\u0003\u00c5\u0003",
    "\u00c5\u0005\u00c5\u092e\n\u00c5\u0003\u00c5\u0003\u00c5\u0005\u00c5",
    "\u0932\n\u00c5\u0003\u00c6\u0003\u00c6\u0005\u00c6\u0936\n\u00c6\u0003",
    "\u00c6\u0003\u00c6\u0003\u00c6\u0005\u00c6\u093b\n\u00c6\u0003\u00c6",
    "\u0003\u00c6\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0942\n",
    "\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005",
    "\u00c7\u0949\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7",
    "\u094e\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0005\u00c7\u0955\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0005\u00c7\u095a\n\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0005\u00c7\u0961\n\u00c7\u0003\u00c7\u0003\u00c7",
    "\u0003\u00c7\u0005\u00c7\u0966\n\u00c7\u0003\u00c7\u0003\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u096e\n\u00c7",
    "\u0003\u00c7\u0003\u00c7\u0003\u00c7\u0005\u00c7\u0973\n\u00c7\u0003",
    "\u00c7\u0003\u00c7\u0005\u00c7\u0977\n\u00c7\u0003\u00c8\u0003\u00c8",
    "\u0003\u00c8\u0007\u00c8\u097c\n\u00c8\f\u00c8\u000e\u00c8\u097f\u000b",
    "\u00c8\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u0984\n\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9",
    "\u098b\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0005\u00c9\u0992\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0003\u00c9\u0003\u00c9\u0005\u00c9\u0999\n\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u09a1",
    "\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9",
    "\u0005\u00c9\u09a8\n\u00c9\u0003\u00c9\u0003\u00c9\u0003\u00c9\u0003",
    "\u00c9\u0003\u00c9\u0003\u00c9\u0005\u00c9\u09b0\n\u00c9\u0003\u00ca",
    "\u0003\u00ca\u0005\u00ca\u09b4\n\u00ca\u0003\u00ca\u0003\u00ca\u0003",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb\u09bb\n\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb\u09c2\n",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005",
    "\u00cb\u09c9\n\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0003\u00cb\u0003\u00cb\u0005\u00cb\u09d1\n\u00cb\u0003\u00cb\u0003",
    "\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0005\u00cb\u09d8\n\u00cb",
    "\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb\u0003\u00cb",
    "\u0005\u00cb\u09e0\n\u00cb\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0005\u00cc\u09e6\n\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc",
    "\u0003\u00cc\u0005\u00cc\u09ec\n\u00cc\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003\u00cc\u0003",
    "\u00cc\u0003\u00cc\u0005\u00cc\u09f8\n\u00cc\u0003\u00cd\u0003\u00cd",
    "\u0007\u00cd\u09fc\n\u00cd\f\u00cd\u000e\u00cd\u09ff\u000b\u00cd\u0003",
    "\u00ce\u0007\u00ce\u0a02\n\u00ce\f\u00ce\u000e\u00ce\u0a05\u000b\u00ce",
    "\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00ce\u0003\u00cf\u0003\u00cf",
    "\u0003\u00d0\u0003\u00d0\u0005\u00d0\u0a0f\n\u00d0\u0003\u00d1\u0003",
    "\u00d1\u0003\u00d1\u0003\u00d1\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0005",
    "\u00d2\u0a18\n\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2\u0003\u00d2",
    "\u0003\u00d2\u0005\u00d2\u0a1f\n\u00d2\u0003\u00d3\u0003\u00d3\u0003",
    "\u00d3\u0007\u00d3\u0a24\n\u00d3\f\u00d3\u000e\u00d3\u0a27\u000b\u00d3",
    "\u0003\u00d4\u0003\u00d4\u0005\u00d4\u0a2b\n\u00d4\u0003\u00d5\u0003",
    "\u00d5\u0005\u00d5\u0a2f\n\u00d5\u0003\u00d6\u0003\u00d6\u0003\u00d6",
    "\u0003\u00d6\u0003\u00d7\u0003\u00d7\u0003\u00d7\u0005\u00d7\u0a38\n",
    "\u00d7\u0003\u00d8\u0003\u00d8\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0003",
    "\u00d9\u0003\u00d9\u0003\u00d9\u0003\u00d9\u0005\u00d9\u0a43\n\u00d9",
    "\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da\u0003\u00da",
    "\u0007\u00da\u0a4b\n\u00da\f\u00da\u000e\u00da\u0a4e\u000b\u00da\u0003",
    "\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0003\u00db\u0007",
    "\u00db\u0a56\n\u00db\f\u00db\u000e\u00db\u0a59\u000b\u00db\u0003\u00dc",
    "\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0003\u00dc\u0007\u00dc",
    "\u0a61\n\u00dc\f\u00dc\u000e\u00dc\u0a64\u000b\u00dc\u0003\u00dd\u0003",
    "\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0003\u00dd\u0007\u00dd\u0a6c",
    "\n\u00dd\f\u00dd\u000e\u00dd\u0a6f\u000b\u00dd\u0003\u00de\u0003\u00de",
    "\u0003\u00de\u0003\u00de\u0003\u00de\u0003\u00de\u0007\u00de\u0a77\n",
    "\u00de\f\u00de\u000e\u00de\u0a7a\u000b\u00de\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df\u0003\u00df",
    "\u0003\u00df\u0007\u00df\u0a85\n\u00df\f\u00df\u000e\u00df\u0a88\u000b",
    "\u00df\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003\u00e0\u0003",
    "\u00e0\u0007\u00e0\u0a9c\n\u00e0\f\u00e0\u000e\u00e0\u0a9f\u000b\u00e0",
    "\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1",
    "\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0003\u00e1\u0007\u00e1\u0ab1\n",
    "\u00e1\f\u00e1\u000e\u00e1\u0ab4\u000b\u00e1\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2\u0003\u00e2",
    "\u0003\u00e2\u0007\u00e2\u0abf\n\u00e2\f\u00e2\u000e\u00e2\u0ac2\u000b",
    "\u00e2\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003",
    "\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003\u00e3\u0003",
    "\u00e3\u0007\u00e3\u0ad0\n\u00e3\f\u00e3\u000e\u00e3\u0ad3\u000b\u00e3",
    "\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4\u0003\u00e4",
    "\u0003\u00e4\u0005\u00e4\u0adc\n\u00e4\u0003\u00e5\u0003\u00e5\u0003",
    "\u00e5\u0003\u00e6\u0003\u00e6\u0003\u00e6\u0003\u00e7\u0003\u00e7\u0003",
    "\u00e7\u0003\u00e7\u0003\u00e7\u0003\u00e7\u0005\u00e7\u0aea\n\u00e7",
    "\u0003\u00e8\u0003\u00e8\u0005\u00e8\u0aee\n\u00e8\u0003\u00e8\u0003",
    "\u00e8\u0007\u00e8\u0af2\n\u00e8\f\u00e8\u000e\u00e8\u0af5\u000b\u00e8",
    "\u0003\u00e9\u0003\u00e9\u0003\u00e9\u0003\u00ea\u0003\u00ea\u0003\u00eb",
    "\u0003\u00eb\u0003\u00eb\u0003\u00ec\u0003\u00ec\u0003\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed",
    "\u0007\u00ed\u0b09\n\u00ed\f\u00ed\u000e\u00ed\u0b0c\u000b\u00ed\u0003",
    "\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0003\u00ed\u0007",
    "\u00ed\u0b14\n\u00ed\f\u00ed\u000e\u00ed\u0b17\u000b\u00ed\u0003\u00ed",
    "\u0003\u00ed\u0003\u00ed\u0005\u00ed\u0b1c\n\u00ed\u0003\u00ed\u0002",
    "\u000f48>\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4",
    "\u00ee\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0",
    "\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8",
    "\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0",
    "\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8",
    "\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110",
    "\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128",
    "\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140",
    "\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158",
    "\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170",
    "\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188",
    "\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0",
    "\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8",
    "\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0",
    "\u01d2\u01d4\u01d6\u01d8\u0002\u0006\u0003\u00025:\u0007\u0002\u0007",
    "\u0007\n\n\u001d\u001d\u001f\u001f\'\'\u0004\u0002\u0010\u0010\u0016",
    "\u0016\u0004\u0002DD]g\u0002\u0c0f\u0002\u01da\u0003\u0002\u0002\u0002",
    "\u0004\u01ea\u0003\u0002\u0002\u0002\u0006\u01ee\u0003\u0002\u0002\u0002",
    "\b\u01f0\u0003\u0002\u0002\u0002\n\u01f2\u0003\u0002\u0002\u0002\f\u01f7",
    "\u0003\u0002\u0002\u0002\u000e\u01fb\u0003\u0002\u0002\u0002\u0010\u021a",
    "\u0003\u0002\u0002\u0002\u0012\u021c\u0003\u0002\u0002\u0002\u0014\u022a",
    "\u0003\u0002\u0002\u0002\u0016\u0231\u0003\u0002\u0002\u0002\u0018\u0233",
    "\u0003\u0002\u0002\u0002\u001a\u0235\u0003\u0002\u0002\u0002\u001c\u023a",
    "\u0003\u0002\u0002\u0002\u001e\u0248\u0003\u0002\u0002\u0002 \u024d",
    "\u0003\u0002\u0002\u0002\"\u0262\u0003\u0002\u0002\u0002$\u0269\u0003",
    "\u0002\u0002\u0002&\u0275\u0003\u0002\u0002\u0002(\u0277\u0003\u0002",
    "\u0002\u0002*\u027a\u0003\u0002\u0002\u0002,\u027e\u0003\u0002\u0002",
    "\u0002.\u0288\u0003\u0002\u0002\u00020\u028d\u0003\u0002\u0002\u0002",
    "2\u0298\u0003\u0002\u0002\u00024\u029a\u0003\u0002\u0002\u00026\u02aa",
    "\u0003\u0002\u0002\u00028\u02ac\u0003\u0002\u0002\u0002:\u02bc\u0003",
    "\u0002\u0002\u0002<\u02be\u0003\u0002\u0002\u0002>\u02c0\u0003\u0002",
    "\u0002\u0002@\u02cc\u0003\u0002\u0002\u0002B\u02df\u0003\u0002\u0002",
    "\u0002D\u02e6\u0003\u0002\u0002\u0002F\u02ec\u0003\u0002\u0002\u0002",
    "H\u02ee\u0003\u0002\u0002\u0002J\u02f2\u0003\u0002\u0002\u0002L\u02f8",
    "\u0003\u0002\u0002\u0002N\u02ff\u0003\u0002\u0002\u0002P\u0309\u0003",
    "\u0002\u0002\u0002R\u030d\u0003\u0002\u0002\u0002T\u0312\u0003\u0002",
    "\u0002\u0002V\u032a\u0003\u0002\u0002\u0002X\u032c\u0003\u0002\u0002",
    "\u0002Z\u0330\u0003\u0002\u0002\u0002\\\u0338\u0003\u0002\u0002\u0002",
    "^\u033b\u0003\u0002\u0002\u0002`\u033e\u0003\u0002\u0002\u0002b\u0346",
    "\u0003\u0002\u0002\u0002d\u0353\u0003\u0002\u0002\u0002f\u035a\u0003",
    "\u0002\u0002\u0002h\u035f\u0003\u0002\u0002\u0002j\u036e\u0003\u0002",
    "\u0002\u0002l\u0370\u0003\u0002\u0002\u0002n\u0378\u0003\u0002\u0002",
    "\u0002p\u037d\u0003\u0002\u0002\u0002r\u0383\u0003\u0002\u0002\u0002",
    "t\u0387\u0003\u0002\u0002\u0002v\u038b\u0003\u0002\u0002\u0002x\u0390",
    "\u0003\u0002\u0002\u0002z\u0394\u0003\u0002\u0002\u0002|\u03ad\u0003",
    "\u0002\u0002\u0002~\u03af\u0003\u0002\u0002\u0002\u0080\u03ba\u0003",
    "\u0002\u0002\u0002\u0082\u03be\u0003\u0002\u0002\u0002\u0084\u03c0\u0003",
    "\u0002\u0002\u0002\u0086\u03c2\u0003\u0002\u0002\u0002\u0088\u03c4\u0003",
    "\u0002\u0002\u0002\u008a\u03cf\u0003\u0002\u0002\u0002\u008c\u03d4\u0003",
    "\u0002\u0002\u0002\u008e\u03e4\u0003\u0002\u0002\u0002\u0090\u03f7\u0003",
    "\u0002\u0002\u0002\u0092\u03fb\u0003\u0002\u0002\u0002\u0094\u03fd\u0003",
    "\u0002\u0002\u0002\u0096\u040c\u0003\u0002\u0002\u0002\u0098\u041e\u0003",
    "\u0002\u0002\u0002\u009a\u0423\u0003\u0002\u0002\u0002\u009c\u042b\u0003",
    "\u0002\u0002\u0002\u009e\u043e\u0003\u0002\u0002\u0002\u00a0\u0443\u0003",
    "\u0002\u0002\u0002\u00a2\u044d\u0003\u0002\u0002\u0002\u00a4\u0450\u0003",
    "\u0002\u0002\u0002\u00a6\u045a\u0003\u0002\u0002\u0002\u00a8\u045e\u0003",
    "\u0002\u0002\u0002\u00aa\u0460\u0003\u0002\u0002\u0002\u00ac\u0462\u0003",
    "\u0002\u0002\u0002\u00ae\u0468\u0003\u0002\u0002\u0002\u00b0\u0475\u0003",
    "\u0002\u0002\u0002\u00b2\u0478\u0003\u0002\u0002\u0002\u00b4\u0481\u0003",
    "\u0002\u0002\u0002\u00b6\u0483\u0003\u0002\u0002\u0002\u00b8\u04ba\u0003",
    "\u0002\u0002\u0002\u00ba\u04bf\u0003\u0002\u0002\u0002\u00bc\u04c9\u0003",
    "\u0002\u0002\u0002\u00be\u04d5\u0003\u0002\u0002\u0002\u00c0\u04e0\u0003",
    "\u0002\u0002\u0002\u00c2\u04ee\u0003\u0002\u0002\u0002\u00c4\u04f0\u0003",
    "\u0002\u0002\u0002\u00c6\u04f9\u0003\u0002\u0002\u0002\u00c8\u04fe\u0003",
    "\u0002\u0002\u0002\u00ca\u0512\u0003\u0002\u0002\u0002\u00cc\u0514\u0003",
    "\u0002\u0002\u0002\u00ce\u0517\u0003\u0002\u0002\u0002\u00d0\u0525\u0003",
    "\u0002\u0002\u0002\u00d2\u052a\u0003\u0002\u0002\u0002\u00d4\u0535\u0003",
    "\u0002\u0002\u0002\u00d6\u053a\u0003\u0002\u0002\u0002\u00d8\u0546\u0003",
    "\u0002\u0002\u0002\u00da\u054b\u0003\u0002\u0002\u0002\u00dc\u0553\u0003",
    "\u0002\u0002\u0002\u00de\u0561\u0003\u0002\u0002\u0002\u00e0\u0566\u0003",
    "\u0002\u0002\u0002\u00e2\u0578\u0003\u0002\u0002\u0002\u00e4\u057a\u0003",
    "\u0002\u0002\u0002\u00e6\u0580\u0003\u0002\u0002\u0002\u00e8\u0582\u0003",
    "\u0002\u0002\u0002\u00ea\u058a\u0003\u0002\u0002\u0002\u00ec\u0592\u0003",
    "\u0002\u0002\u0002\u00ee\u0599\u0003\u0002\u0002\u0002\u00f0\u059b\u0003",
    "\u0002\u0002\u0002\u00f2\u05a4\u0003\u0002\u0002\u0002\u00f4\u05ac\u0003",
    "\u0002\u0002\u0002\u00f6\u05af\u0003\u0002\u0002\u0002\u00f8\u05b5\u0003",
    "\u0002\u0002\u0002\u00fa\u05be\u0003\u0002\u0002\u0002\u00fc\u05c6\u0003",
    "\u0002\u0002\u0002\u00fe\u05cd\u0003\u0002\u0002\u0002\u0100\u05d4\u0003",
    "\u0002\u0002\u0002\u0102\u05d6\u0003\u0002\u0002\u0002\u0104\u05dc\u0003",
    "\u0002\u0002\u0002\u0106\u05e8\u0003\u0002\u0002\u0002\u0108\u05ef\u0003",
    "\u0002\u0002\u0002\u010a\u05fd\u0003\u0002\u0002\u0002\u010c\u05ff\u0003",
    "\u0002\u0002\u0002\u010e\u0601\u0003\u0002\u0002\u0002\u0110\u0605\u0003",
    "\u0002\u0002\u0002\u0112\u0609\u0003\u0002\u0002\u0002\u0114\u0613\u0003",
    "\u0002\u0002\u0002\u0116\u0615\u0003\u0002\u0002\u0002\u0118\u061b\u0003",
    "\u0002\u0002\u0002\u011a\u0623\u0003\u0002\u0002\u0002\u011c\u0635\u0003",
    "\u0002\u0002\u0002\u011e\u0637\u0003\u0002\u0002\u0002\u0120\u063d\u0003",
    "\u0002\u0002\u0002\u0122\u064c\u0003\u0002\u0002\u0002\u0124\u064f\u0003",
    "\u0002\u0002\u0002\u0126\u0660\u0003\u0002\u0002\u0002\u0128\u0662\u0003",
    "\u0002\u0002\u0002\u012a\u0664\u0003\u0002\u0002\u0002\u012c\u066a\u0003",
    "\u0002\u0002\u0002\u012e\u0670\u0003\u0002\u0002\u0002\u0130\u067a\u0003",
    "\u0002\u0002\u0002\u0132\u067e\u0003\u0002\u0002\u0002\u0134\u0680\u0003",
    "\u0002\u0002\u0002\u0136\u0690\u0003\u0002\u0002\u0002\u0138\u06a2\u0003",
    "\u0002\u0002\u0002\u013a\u06a4\u0003\u0002\u0002\u0002\u013c\u06a6\u0003",
    "\u0002\u0002\u0002\u013e\u06ae\u0003\u0002\u0002\u0002\u0140\u06bd\u0003",
    "\u0002\u0002\u0002\u0142\u06cc\u0003\u0002\u0002\u0002\u0144\u06d2\u0003",
    "\u0002\u0002\u0002\u0146\u06d8\u0003\u0002\u0002\u0002\u0148\u06de\u0003",
    "\u0002\u0002\u0002\u014a\u06e2\u0003\u0002\u0002\u0002\u014c\u06f4\u0003",
    "\u0002\u0002\u0002\u014e\u06f6\u0003\u0002\u0002\u0002\u0150\u06fd\u0003",
    "\u0002\u0002\u0002\u0152\u0706\u0003\u0002\u0002\u0002\u0154\u070c\u0003",
    "\u0002\u0002\u0002\u0156\u0714\u0003\u0002\u0002\u0002\u0158\u0717\u0003",
    "\u0002\u0002\u0002\u015a\u0720\u0003\u0002\u0002\u0002\u015c\u0727\u0003",
    "\u0002\u0002\u0002\u015e\u0732\u0003\u0002\u0002\u0002\u0160\u073c\u0003",
    "\u0002\u0002\u0002\u0162\u0761\u0003\u0002\u0002\u0002\u0164\u0763\u0003",
    "\u0002\u0002\u0002\u0166\u0781\u0003\u0002\u0002\u0002\u0168\u0788\u0003",
    "\u0002\u0002\u0002\u016a\u078a\u0003\u0002\u0002\u0002\u016c\u0790\u0003",
    "\u0002\u0002\u0002\u016e\u07ba\u0003\u0002\u0002\u0002\u0170\u07bc\u0003",
    "\u0002\u0002\u0002\u0172\u07e5\u0003\u0002\u0002\u0002\u0174\u083a\u0003",
    "\u0002\u0002\u0002\u0176\u083c\u0003\u0002\u0002\u0002\u0178\u088e\u0003",
    "\u0002\u0002\u0002\u017a\u0893\u0003\u0002\u0002\u0002\u017c\u08a2\u0003",
    "\u0002\u0002\u0002\u017e\u08a4\u0003\u0002\u0002\u0002\u0180\u08b0\u0003",
    "\u0002\u0002\u0002\u0182\u08bc\u0003\u0002\u0002\u0002\u0184\u08c8\u0003",
    "\u0002\u0002\u0002\u0186\u08e1\u0003\u0002\u0002\u0002\u0188\u0931\u0003",
    "\u0002\u0002\u0002\u018a\u0933\u0003\u0002\u0002\u0002\u018c\u0976\u0003",
    "\u0002\u0002\u0002\u018e\u0978\u0003\u0002\u0002\u0002\u0190\u09af\u0003",
    "\u0002\u0002\u0002\u0192\u09b1\u0003\u0002\u0002\u0002\u0194\u09df\u0003",
    "\u0002\u0002\u0002\u0196\u09f7\u0003\u0002\u0002\u0002\u0198\u09f9\u0003",
    "\u0002\u0002\u0002\u019a\u0a03\u0003\u0002\u0002\u0002\u019c\u0a0a\u0003",
    "\u0002\u0002\u0002\u019e\u0a0e\u0003\u0002\u0002\u0002\u01a0\u0a10\u0003",
    "\u0002\u0002\u0002\u01a2\u0a1e\u0003\u0002\u0002\u0002\u01a4\u0a20\u0003",
    "\u0002\u0002\u0002\u01a6\u0a2a\u0003\u0002\u0002\u0002\u01a8\u0a2e\u0003",
    "\u0002\u0002\u0002\u01aa\u0a30\u0003\u0002\u0002\u0002\u01ac\u0a37\u0003",
    "\u0002\u0002\u0002\u01ae\u0a39\u0003\u0002\u0002\u0002\u01b0\u0a42\u0003",
    "\u0002\u0002\u0002\u01b2\u0a44\u0003\u0002\u0002\u0002\u01b4\u0a4f\u0003",
    "\u0002\u0002\u0002\u01b6\u0a5a\u0003\u0002\u0002\u0002\u01b8\u0a65\u0003",
    "\u0002\u0002\u0002\u01ba\u0a70\u0003\u0002\u0002\u0002\u01bc\u0a7b\u0003",
    "\u0002\u0002\u0002\u01be\u0a89\u0003\u0002\u0002\u0002\u01c0\u0aa0\u0003",
    "\u0002\u0002\u0002\u01c2\u0ab5\u0003\u0002\u0002\u0002\u01c4\u0ac3\u0003",
    "\u0002\u0002\u0002\u01c6\u0adb\u0003\u0002\u0002\u0002\u01c8\u0add\u0003",
    "\u0002\u0002\u0002\u01ca\u0ae0\u0003\u0002\u0002\u0002\u01cc\u0ae9\u0003",
    "\u0002\u0002\u0002\u01ce\u0aed\u0003\u0002\u0002\u0002\u01d0\u0af6\u0003",
    "\u0002\u0002\u0002\u01d2\u0af9\u0003\u0002\u0002\u0002\u01d4\u0afb\u0003",
    "\u0002\u0002\u0002\u01d6\u0afe\u0003\u0002\u0002\u0002\u01d8\u0b1b\u0003",
    "\u0002\u0002\u0002\u01da\u01db\t\u0002\u0002\u0002\u01db\u0003\u0003",
    "\u0002\u0002\u0002\u01dc\u01de\u0005\u00e6t\u0002\u01dd\u01dc\u0003",
    "\u0002\u0002\u0002\u01de\u01e1\u0003\u0002\u0002\u0002\u01df\u01dd\u0003",
    "\u0002\u0002\u0002\u01df\u01e0\u0003\u0002\u0002\u0002\u01e0\u01e2\u0003",
    "\u0002\u0002\u0002\u01e1\u01df\u0003\u0002\u0002\u0002\u01e2\u01eb\u0005",
    "\u0006\u0004\u0002\u01e3\u01e5\u0005\u00e6t\u0002\u01e4\u01e3\u0003",
    "\u0002\u0002\u0002\u01e5\u01e8\u0003\u0002\u0002\u0002\u01e6\u01e4\u0003",
    "\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7\u01e9\u0003",
    "\u0002\u0002\u0002\u01e8\u01e6\u0003\u0002\u0002\u0002\u01e9\u01eb\u0007",
    "\u0005\u0002\u0002\u01ea\u01df\u0003\u0002\u0002\u0002\u01ea\u01e6\u0003",
    "\u0002\u0002\u0002\u01eb\u0005\u0003\u0002\u0002\u0002\u01ec\u01ef\u0005",
    "\b\u0005\u0002\u01ed\u01ef\u0005\n\u0006\u0002\u01ee\u01ec\u0003\u0002",
    "\u0002\u0002\u01ee\u01ed\u0003\u0002\u0002\u0002\u01ef\u0007\u0003\u0002",
    "\u0002\u0002\u01f0\u01f1\t\u0003\u0002\u0002\u01f1\t\u0003\u0002\u0002",
    "\u0002\u01f2\u01f3\t\u0004\u0002\u0002\u01f3\u000b\u0003\u0002\u0002",
    "\u0002\u01f4\u01f8\u0005\u000e\b\u0002\u01f5\u01f8\u0005\u001c\u000f",
    "\u0002\u01f6\u01f8\u0005\u001e\u0010\u0002\u01f7\u01f4\u0003\u0002\u0002",
    "\u0002\u01f7\u01f5\u0003\u0002\u0002\u0002\u01f7\u01f6\u0003\u0002\u0002",
    "\u0002\u01f8\r\u0003\u0002\u0002\u0002\u01f9\u01fc\u0005\u0014\u000b",
    "\u0002\u01fa\u01fc\u0005\u001a\u000e\u0002\u01fb\u01f9\u0003\u0002\u0002",
    "\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002\u01fc\u0201\u0003\u0002\u0002",
    "\u0002\u01fd\u0200\u0005\u0012\n\u0002\u01fe\u0200\u0005\u0018\r\u0002",
    "\u01ff\u01fd\u0003\u0002\u0002\u0002\u01ff\u01fe\u0003\u0002\u0002\u0002",
    "\u0200\u0203\u0003\u0002\u0002\u0002\u0201\u01ff\u0003\u0002\u0002\u0002",
    "\u0201\u0202\u0003\u0002\u0002\u0002\u0202\u000f\u0003\u0002\u0002\u0002",
    "\u0203\u0201\u0003\u0002\u0002\u0002\u0204\u0206\u0005\u00e6t\u0002",
    "\u0205\u0204\u0003\u0002\u0002\u0002\u0206\u0209\u0003\u0002\u0002\u0002",
    "\u0207\u0205\u0003\u0002\u0002\u0002\u0207\u0208\u0003\u0002\u0002\u0002",
    "\u0208\u020a\u0003\u0002\u0002\u0002\u0209\u0207\u0003\u0002\u0002\u0002",
    "\u020a\u020c\u0007h\u0002\u0002\u020b\u020d\u0005*\u0016\u0002\u020c",
    "\u020b\u0003\u0002\u0002\u0002\u020c\u020d\u0003\u0002\u0002\u0002\u020d",
    "\u021b\u0003\u0002\u0002\u0002\u020e\u020f\u0005\u000e\b\u0002\u020f",
    "\u0213\u0007C\u0002\u0002\u0210\u0212\u0005\u00e6t\u0002\u0211\u0210",
    "\u0003\u0002\u0002\u0002\u0212\u0215\u0003\u0002\u0002\u0002\u0213\u0211",
    "\u0003\u0002\u0002\u0002\u0213\u0214\u0003\u0002\u0002\u0002\u0214\u0216",
    "\u0003\u0002\u0002\u0002\u0215\u0213\u0003\u0002\u0002\u0002\u0216\u0218",
    "\u0007h\u0002\u0002\u0217\u0219\u0005*\u0016\u0002\u0218\u0217\u0003",
    "\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021b\u0003",
    "\u0002\u0002\u0002\u021a\u0207\u0003\u0002\u0002\u0002\u021a\u020e\u0003",
    "\u0002\u0002\u0002\u021b\u0011\u0003\u0002\u0002\u0002\u021c\u0220\u0007",
    "C\u0002\u0002\u021d\u021f\u0005\u00e6t\u0002\u021e\u021d\u0003\u0002",
    "\u0002\u0002\u021f\u0222\u0003\u0002\u0002\u0002\u0220\u021e\u0003\u0002",
    "\u0002\u0002\u0220\u0221\u0003\u0002\u0002\u0002\u0221\u0223\u0003\u0002",
    "\u0002\u0002\u0222\u0220\u0003\u0002\u0002\u0002\u0223\u0225\u0007h",
    "\u0002\u0002\u0224\u0226\u0005*\u0016\u0002\u0225\u0224\u0003\u0002",
    "\u0002\u0002\u0225\u0226\u0003\u0002\u0002\u0002\u0226\u0013\u0003\u0002",
    "\u0002\u0002\u0227\u0229\u0005\u00e6t\u0002\u0228\u0227\u0003\u0002",
    "\u0002\u0002\u0229\u022c\u0003\u0002\u0002\u0002\u022a\u0228\u0003\u0002",
    "\u0002\u0002\u022a\u022b\u0003\u0002\u0002\u0002\u022b\u022d\u0003\u0002",
    "\u0002\u0002\u022c\u022a\u0003\u0002\u0002\u0002\u022d\u022f\u0007h",
    "\u0002\u0002\u022e\u0230\u0005*\u0016\u0002\u022f\u022e\u0003\u0002",
    "\u0002\u0002\u022f\u0230\u0003\u0002\u0002\u0002\u0230\u0015\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0005\u0010\t\u0002\u0232\u0017\u0003\u0002",
    "\u0002\u0002\u0233\u0234\u0005\u0012\n\u0002\u0234\u0019\u0003\u0002",
    "\u0002\u0002\u0235\u0236\u0005\u0014\u000b\u0002\u0236\u001b\u0003\u0002",
    "\u0002\u0002\u0237\u0239\u0005\u00e6t\u0002\u0238\u0237\u0003\u0002",
    "\u0002\u0002\u0239\u023c\u0003\u0002\u0002\u0002\u023a\u0238\u0003\u0002",
    "\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023b\u023d\u0003\u0002",
    "\u0002\u0002\u023c\u023a\u0003\u0002\u0002\u0002\u023d\u023e\u0007h",
    "\u0002\u0002\u023e\u001d\u0003\u0002\u0002\u0002\u023f\u0240\u0005\u0004",
    "\u0003\u0002\u0240\u0241\u0005 \u0011\u0002\u0241\u0249\u0003\u0002",
    "\u0002\u0002\u0242\u0243\u0005\u000e\b\u0002\u0243\u0244\u0005 \u0011",
    "\u0002\u0244\u0249\u0003\u0002\u0002\u0002\u0245\u0246\u0005\u001c\u000f",
    "\u0002\u0246\u0247\u0005 \u0011\u0002\u0247\u0249\u0003\u0002\u0002",
    "\u0002\u0248\u023f\u0003\u0002\u0002\u0002\u0248\u0242\u0003\u0002\u0002",
    "\u0002\u0248\u0245\u0003\u0002\u0002\u0002\u0249\u001f\u0003\u0002\u0002",
    "\u0002\u024a\u024c\u0005\u00e6t\u0002\u024b\u024a\u0003\u0002\u0002",
    "\u0002\u024c\u024f\u0003\u0002\u0002\u0002\u024d\u024b\u0003\u0002\u0002",
    "\u0002\u024d\u024e\u0003\u0002\u0002\u0002\u024e\u0250\u0003\u0002\u0002",
    "\u0002\u024f\u024d\u0003\u0002\u0002\u0002\u0250\u0251\u0007?\u0002",
    "\u0002\u0251\u025c\u0007@\u0002\u0002\u0252\u0254\u0005\u00e6t\u0002",
    "\u0253\u0252\u0003\u0002\u0002\u0002\u0254\u0257\u0003\u0002\u0002\u0002",
    "\u0255\u0253\u0003\u0002\u0002\u0002\u0255\u0256\u0003\u0002\u0002\u0002",
    "\u0256\u0258\u0003\u0002\u0002\u0002\u0257\u0255\u0003\u0002\u0002\u0002",
    "\u0258\u0259\u0007?\u0002\u0002\u0259\u025b\u0007@\u0002\u0002\u025a",
    "\u0255\u0003\u0002\u0002\u0002\u025b\u025e\u0003\u0002\u0002\u0002\u025c",
    "\u025a\u0003\u0002\u0002\u0002\u025c\u025d\u0003\u0002\u0002\u0002\u025d",
    "!\u0003\u0002\u0002\u0002\u025e\u025c\u0003\u0002\u0002\u0002\u025f",
    "\u0261\u0005$\u0013\u0002\u0260\u025f\u0003\u0002\u0002\u0002\u0261",
    "\u0264\u0003\u0002\u0002\u0002\u0262\u0260\u0003\u0002\u0002\u0002\u0262",
    "\u0263\u0003\u0002\u0002\u0002\u0263\u0265\u0003\u0002\u0002\u0002\u0264",
    "\u0262\u0003\u0002\u0002\u0002\u0265\u0267\u0007h\u0002\u0002\u0266",
    "\u0268\u0005&\u0014\u0002\u0267\u0266\u0003\u0002\u0002\u0002\u0267",
    "\u0268\u0003\u0002\u0002\u0002\u0268#\u0003\u0002\u0002\u0002\u0269",
    "\u026a\u0005\u00e6t\u0002\u026a%\u0003\u0002\u0002\u0002\u026b\u026c",
    "\u0007\u0013\u0002\u0002\u026c\u0276\u0005\u001c\u000f\u0002\u026d\u026e",
    "\u0007\u0013\u0002\u0002\u026e\u0272\u0005\u000e\b\u0002\u026f\u0271",
    "\u0005(\u0015\u0002\u0270\u026f\u0003\u0002\u0002\u0002\u0271\u0274",
    "\u0003\u0002\u0002\u0002\u0272\u0270\u0003\u0002\u0002\u0002\u0272\u0273",
    "\u0003\u0002\u0002\u0002\u0273\u0276\u0003\u0002\u0002\u0002\u0274\u0272",
    "\u0003\u0002\u0002\u0002\u0275\u026b\u0003\u0002\u0002\u0002\u0275\u026d",
    "\u0003\u0002\u0002\u0002\u0276\'\u0003\u0002\u0002\u0002\u0277\u0278",
    "\u0007W\u0002\u0002\u0278\u0279\u0005\u0016\f\u0002\u0279)\u0003\u0002",
    "\u0002\u0002\u027a\u027b\u0007F\u0002\u0002\u027b\u027c\u0005,\u0017",
    "\u0002\u027c\u027d\u0007E\u0002\u0002\u027d+\u0003\u0002\u0002\u0002",
    "\u027e\u0283\u0005.\u0018\u0002\u027f\u0280\u0007B\u0002\u0002\u0280",
    "\u0282\u0005.\u0018\u0002\u0281\u027f\u0003\u0002\u0002\u0002\u0282",
    "\u0285\u0003\u0002\u0002\u0002\u0283\u0281\u0003\u0002\u0002\u0002\u0283",
    "\u0284\u0003\u0002\u0002\u0002\u0284-\u0003\u0002\u0002\u0002\u0285",
    "\u0283\u0003\u0002\u0002\u0002\u0286\u0289\u0005\f\u0007\u0002\u0287",
    "\u0289\u00050\u0019\u0002\u0288\u0286\u0003\u0002\u0002\u0002\u0288",
    "\u0287\u0003\u0002\u0002\u0002\u0289/\u0003\u0002\u0002\u0002\u028a",
    "\u028c\u0005\u00e6t\u0002\u028b\u028a\u0003\u0002\u0002\u0002\u028c",
    "\u028f\u0003\u0002\u0002\u0002\u028d\u028b\u0003\u0002\u0002\u0002\u028d",
    "\u028e\u0003\u0002\u0002\u0002\u028e\u0290\u0003\u0002\u0002\u0002\u028f",
    "\u028d\u0003\u0002\u0002\u0002\u0290\u0292\u0007I\u0002\u0002\u0291",
    "\u0293\u00052\u001a\u0002\u0292\u0291\u0003\u0002\u0002\u0002\u0292",
    "\u0293\u0003\u0002\u0002\u0002\u02931\u0003\u0002\u0002\u0002\u0294",
    "\u0295\u0007\u0013\u0002\u0002\u0295\u0299\u0005\f\u0007\u0002\u0296",
    "\u0297\u0007*\u0002\u0002\u0297\u0299\u0005\f\u0007\u0002\u0298\u0294",
    "\u0003\u0002\u0002\u0002\u0298\u0296\u0003\u0002\u0002\u0002\u02993",
    "\u0003\u0002\u0002\u0002\u029a\u029b\b\u001b\u0001\u0002\u029b\u029c",
    "\u0007h\u0002\u0002\u029c\u02a2\u0003\u0002\u0002\u0002\u029d\u029e",
    "\f\u0003\u0002\u0002\u029e\u029f\u0007C\u0002\u0002\u029f\u02a1\u0007",
    "h\u0002\u0002\u02a0\u029d\u0003\u0002\u0002\u0002\u02a1\u02a4\u0003",
    "\u0002\u0002\u0002\u02a2\u02a0\u0003\u0002\u0002\u0002\u02a2\u02a3\u0003",
    "\u0002\u0002\u0002\u02a35\u0003\u0002\u0002\u0002\u02a4\u02a2\u0003",
    "\u0002\u0002\u0002\u02a5\u02ab\u0007h\u0002\u0002\u02a6\u02a7\u0005",
    "8\u001d\u0002\u02a7\u02a8\u0007C\u0002\u0002\u02a8\u02a9\u0007h\u0002",
    "\u0002\u02a9\u02ab\u0003\u0002\u0002\u0002\u02aa\u02a5\u0003\u0002\u0002",
    "\u0002\u02aa\u02a6\u0003\u0002\u0002\u0002\u02ab7\u0003\u0002\u0002",
    "\u0002\u02ac\u02ad\b\u001d\u0001\u0002\u02ad\u02ae\u0007h\u0002\u0002",
    "\u02ae\u02b4\u0003\u0002\u0002\u0002\u02af\u02b0\f\u0003\u0002\u0002",
    "\u02b0\u02b1\u0007C\u0002\u0002\u02b1\u02b3\u0007h\u0002\u0002\u02b2",
    "\u02af\u0003\u0002\u0002\u0002\u02b3\u02b6\u0003\u0002\u0002\u0002\u02b4",
    "\u02b2\u0003\u0002\u0002\u0002\u02b4\u02b5\u0003\u0002\u0002\u0002\u02b5",
    "9\u0003\u0002\u0002\u0002\u02b6\u02b4\u0003\u0002\u0002\u0002\u02b7",
    "\u02bd\u0007h\u0002\u0002\u02b8\u02b9\u0005> \u0002\u02b9\u02ba\u0007",
    "C\u0002\u0002\u02ba\u02bb\u0007h\u0002\u0002\u02bb\u02bd\u0003\u0002",
    "\u0002\u0002\u02bc\u02b7\u0003\u0002\u0002\u0002\u02bc\u02b8\u0003\u0002",
    "\u0002\u0002\u02bd;\u0003\u0002\u0002\u0002\u02be\u02bf\u0007h\u0002",
    "\u0002\u02bf=\u0003\u0002\u0002\u0002\u02c0\u02c1\b \u0001\u0002\u02c1",
    "\u02c2\u0007h\u0002\u0002\u02c2\u02c8\u0003\u0002\u0002\u0002\u02c3",
    "\u02c4\f\u0003\u0002\u0002\u02c4\u02c5\u0007C\u0002\u0002\u02c5\u02c7",
    "\u0007h\u0002\u0002\u02c6\u02c3\u0003\u0002\u0002\u0002\u02c7\u02ca",
    "\u0003\u0002\u0002\u0002\u02c8\u02c6\u0003\u0002\u0002\u0002\u02c8\u02c9",
    "\u0003\u0002\u0002\u0002\u02c9?\u0003\u0002\u0002\u0002\u02ca\u02c8",
    "\u0003\u0002\u0002\u0002\u02cb\u02cd\u0005B\"\u0002\u02cc\u02cb\u0003",
    "\u0002\u0002\u0002\u02cc\u02cd\u0003\u0002\u0002\u0002\u02cd\u02d1\u0003",
    "\u0002\u0002\u0002\u02ce\u02d0\u0005F$\u0002\u02cf\u02ce\u0003\u0002",
    "\u0002\u0002\u02d0\u02d3\u0003\u0002\u0002\u0002\u02d1\u02cf\u0003\u0002",
    "\u0002\u0002\u02d1\u02d2\u0003\u0002\u0002\u0002\u02d2\u02d7\u0003\u0002",
    "\u0002\u0002\u02d3\u02d1\u0003\u0002\u0002\u0002\u02d4\u02d6\u0005P",
    ")\u0002\u02d5\u02d4\u0003\u0002\u0002\u0002\u02d6\u02d9\u0003\u0002",
    "\u0002\u0002\u02d7\u02d5\u0003\u0002\u0002\u0002\u02d7\u02d8\u0003\u0002",
    "\u0002\u0002\u02d8\u02da\u0003\u0002\u0002\u0002\u02d9\u02d7\u0003\u0002",
    "\u0002\u0002\u02da\u02db\u0007\u0002\u0002\u0003\u02dbA\u0003\u0002",
    "\u0002\u0002\u02dc\u02de\u0005D#\u0002\u02dd\u02dc\u0003\u0002\u0002",
    "\u0002\u02de\u02e1\u0003\u0002\u0002\u0002\u02df\u02dd\u0003\u0002\u0002",
    "\u0002\u02df\u02e0\u0003\u0002\u0002\u0002\u02e0\u02e2\u0003\u0002\u0002",
    "\u0002\u02e1\u02df\u0003\u0002\u0002\u0002\u02e2\u02e3\u0007\"\u0002",
    "\u0002\u02e3\u02e4\u00054\u001b\u0002\u02e4\u02e5\u0007A\u0002\u0002",
    "\u02e5C\u0003\u0002\u0002\u0002\u02e6\u02e7\u0005\u00e6t\u0002\u02e7",
    "E\u0003\u0002\u0002\u0002\u02e8\u02ed\u0005H%\u0002\u02e9\u02ed\u0005",
    "J&\u0002\u02ea\u02ed\u0005L\'\u0002\u02eb\u02ed\u0005N(\u0002\u02ec",
    "\u02e8\u0003\u0002\u0002\u0002\u02ec\u02e9\u0003\u0002\u0002\u0002\u02ec",
    "\u02ea\u0003\u0002\u0002\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02ed",
    "G\u0003\u0002\u0002\u0002\u02ee\u02ef\u0007\u001b\u0002\u0002\u02ef",
    "\u02f0\u00056\u001c\u0002\u02f0\u02f1\u0007A\u0002\u0002\u02f1I\u0003",
    "\u0002\u0002\u0002\u02f2\u02f3\u0007\u001b\u0002\u0002\u02f3\u02f4\u0005",
    "8\u001d\u0002\u02f4\u02f5\u0007C\u0002\u0002\u02f5\u02f6\u0007U\u0002",
    "\u0002\u02f6\u02f7\u0007A\u0002\u0002\u02f7K\u0003\u0002\u0002\u0002",
    "\u02f8\u02f9\u0007\u001b\u0002\u0002\u02f9\u02fa\u0007(\u0002\u0002",
    "\u02fa\u02fb\u00056\u001c\u0002\u02fb\u02fc\u0007C\u0002\u0002\u02fc",
    "\u02fd\u0007h\u0002\u0002\u02fd\u02fe\u0007A\u0002\u0002\u02feM\u0003",
    "\u0002\u0002\u0002\u02ff\u0300\u0007\u001b\u0002\u0002\u0300\u0301\u0007",
    "(\u0002\u0002\u0301\u0302\u00056\u001c\u0002\u0302\u0303\u0007C\u0002",
    "\u0002\u0303\u0304\u0007U\u0002\u0002\u0304\u0305\u0007A\u0002\u0002",
    "\u0305O\u0003\u0002\u0002\u0002\u0306\u030a\u0005R*\u0002\u0307\u030a",
    "\u0005\u00c6d\u0002\u0308\u030a\u0007A\u0002\u0002\u0309\u0306\u0003",
    "\u0002\u0002\u0002\u0309\u0307\u0003\u0002\u0002\u0002\u0309\u0308\u0003",
    "\u0002\u0002\u0002\u030aQ\u0003\u0002\u0002\u0002\u030b\u030e\u0005",
    "T+\u0002\u030c\u030e\u0005\u00ba^\u0002\u030d\u030b\u0003\u0002\u0002",
    "\u0002\u030d\u030c\u0003\u0002\u0002\u0002\u030eS\u0003\u0002\u0002",
    "\u0002\u030f\u0311\u0005V,\u0002\u0310\u030f\u0003\u0002\u0002\u0002",
    "\u0311\u0314\u0003\u0002\u0002\u0002\u0312\u0310\u0003\u0002\u0002\u0002",
    "\u0312\u0313\u0003\u0002\u0002\u0002\u0313\u0315\u0003\u0002\u0002\u0002",
    "\u0314\u0312\u0003\u0002\u0002\u0002\u0315\u0316\u0007\u000b\u0002\u0002",
    "\u0316\u0318\u0007h\u0002\u0002\u0317\u0319\u0005X-\u0002\u0318\u0317",
    "\u0003\u0002\u0002\u0002\u0318\u0319\u0003\u0002\u0002\u0002\u0319\u031b",
    "\u0003\u0002\u0002\u0002\u031a\u031c\u0005\\/\u0002\u031b\u031a\u0003",
    "\u0002\u0002\u0002\u031b\u031c\u0003\u0002\u0002\u0002\u031c\u031e\u0003",
    "\u0002\u0002\u0002\u031d\u031f\u0005^0\u0002\u031e\u031d\u0003\u0002",
    "\u0002\u0002\u031e\u031f\u0003\u0002\u0002\u0002\u031f\u0320\u0003\u0002",
    "\u0002\u0002\u0320\u0321\u0005b2\u0002\u0321U\u0003\u0002\u0002\u0002",
    "\u0322\u032b\u0005\u00e6t\u0002\u0323\u032b\u0007%\u0002\u0002\u0324",
    "\u032b\u0007$\u0002\u0002\u0325\u032b\u0007#\u0002\u0002\u0326\u032b",
    "\u0007\u0003\u0002\u0002\u0327\u032b\u0007(\u0002\u0002\u0328\u032b",
    "\u0007\u0014\u0002\u0002\u0329\u032b\u0007)\u0002\u0002\u032a\u0322",
    "\u0003\u0002\u0002\u0002\u032a\u0323\u0003\u0002\u0002\u0002\u032a\u0324",
    "\u0003\u0002\u0002\u0002\u032a\u0325\u0003\u0002\u0002\u0002\u032a\u0326",
    "\u0003\u0002\u0002\u0002\u032a\u0327\u0003\u0002\u0002\u0002\u032a\u0328",
    "\u0003\u0002\u0002\u0002\u032a\u0329\u0003\u0002\u0002\u0002\u032bW",
    "\u0003\u0002\u0002\u0002\u032c\u032d\u0007F\u0002\u0002\u032d\u032e",
    "\u0005Z.\u0002\u032e\u032f\u0007E\u0002\u0002\u032fY\u0003\u0002\u0002",
    "\u0002\u0330\u0335\u0005\"\u0012\u0002\u0331\u0332\u0007B\u0002\u0002",
    "\u0332\u0334\u0005\"\u0012\u0002\u0333\u0331\u0003\u0002\u0002\u0002",
    "\u0334\u0337\u0003\u0002\u0002\u0002\u0335\u0333\u0003\u0002\u0002\u0002",
    "\u0335\u0336\u0003\u0002\u0002\u0002\u0336[\u0003\u0002\u0002\u0002",
    "\u0337\u0335\u0003\u0002\u0002\u0002\u0338\u0339\u0007\u0013\u0002\u0002",
    "\u0339\u033a\u0005\u0010\t\u0002\u033a]\u0003\u0002\u0002\u0002\u033b",
    "\u033c\u0007\u001a\u0002\u0002\u033c\u033d\u0005`1\u0002\u033d_\u0003",
    "\u0002\u0002\u0002\u033e\u0343\u0005\u0016\f\u0002\u033f\u0340\u0007",
    "B\u0002\u0002\u0340\u0342\u0005\u0016\f\u0002\u0341\u033f\u0003\u0002",
    "\u0002\u0002\u0342\u0345\u0003\u0002\u0002\u0002\u0343\u0341\u0003\u0002",
    "\u0002\u0002\u0343\u0344\u0003\u0002\u0002\u0002\u0344a\u0003\u0002",
    "\u0002\u0002\u0345\u0343\u0003\u0002\u0002\u0002\u0346\u034a\u0007=",
    "\u0002\u0002\u0347\u0349\u0005d3\u0002\u0348\u0347\u0003\u0002\u0002",
    "\u0002\u0349\u034c\u0003\u0002\u0002\u0002\u034a\u0348\u0003\u0002\u0002",
    "\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b\u034d\u0003\u0002\u0002",
    "\u0002\u034c\u034a\u0003\u0002\u0002\u0002\u034d\u034e\u0007>\u0002",
    "\u0002\u034ec\u0003\u0002\u0002\u0002\u034f\u0354\u0005f4\u0002\u0350",
    "\u0354\u0005\u00aaV\u0002\u0351\u0354\u0005\u00acW\u0002\u0352\u0354",
    "\u0005\u00aeX\u0002\u0353\u034f\u0003\u0002\u0002\u0002\u0353\u0350",
    "\u0003\u0002\u0002\u0002\u0353\u0351\u0003\u0002\u0002\u0002\u0353\u0352",
    "\u0003\u0002\u0002\u0002\u0354e\u0003\u0002\u0002\u0002\u0355\u035b",
    "\u0005h5\u0002\u0356\u035b\u0005\u008cG\u0002\u0357\u035b\u0005R*\u0002",
    "\u0358\u035b\u0005\u00c6d\u0002\u0359\u035b\u0007A\u0002\u0002\u035a",
    "\u0355\u0003\u0002\u0002\u0002\u035a\u0356\u0003\u0002\u0002\u0002\u035a",
    "\u0357\u0003\u0002\u0002\u0002\u035a\u0358\u0003\u0002\u0002\u0002\u035a",
    "\u0359\u0003\u0002\u0002\u0002\u035bg\u0003\u0002\u0002\u0002\u035c",
    "\u035e\u0005j6\u0002\u035d\u035c\u0003\u0002\u0002\u0002\u035e\u0361",
    "\u0003\u0002\u0002\u0002\u035f\u035d\u0003\u0002\u0002\u0002\u035f\u0360",
    "\u0003\u0002\u0002\u0002\u0360\u0362\u0003\u0002\u0002\u0002\u0361\u035f",
    "\u0003\u0002\u0002\u0002\u0362\u0363\u0005t;\u0002\u0363\u0364\u0005",
    "l7\u0002\u0364\u0365\u0007A\u0002\u0002\u0365i\u0003\u0002\u0002\u0002",
    "\u0366\u036f\u0005\u00e6t\u0002\u0367\u036f\u0007%\u0002\u0002\u0368",
    "\u036f\u0007$\u0002\u0002\u0369\u036f\u0007#\u0002\u0002\u036a\u036f",
    "\u0007(\u0002\u0002\u036b\u036f\u0007\u0014\u0002\u0002\u036c\u036f",
    "\u00070\u0002\u0002\u036d\u036f\u00073\u0002\u0002\u036e\u0366\u0003",
    "\u0002\u0002\u0002\u036e\u0367\u0003\u0002\u0002\u0002\u036e\u0368\u0003",
    "\u0002\u0002\u0002\u036e\u0369\u0003\u0002\u0002\u0002\u036e\u036a\u0003",
    "\u0002\u0002\u0002\u036e\u036b\u0003\u0002\u0002\u0002\u036e\u036c\u0003",
    "\u0002\u0002\u0002\u036e\u036d\u0003\u0002\u0002\u0002\u036fk\u0003",
    "\u0002\u0002\u0002\u0370\u0375\u0005n8\u0002\u0371\u0372\u0007B\u0002",
    "\u0002\u0372\u0374\u0005n8\u0002\u0373\u0371\u0003\u0002\u0002\u0002",
    "\u0374\u0377\u0003\u0002\u0002\u0002\u0375\u0373\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0003\u0002\u0002\u0002\u0376m\u0003\u0002\u0002\u0002",
    "\u0377\u0375\u0003\u0002\u0002\u0002\u0378\u037b\u0005p9\u0002\u0379",
    "\u037a\u0007D\u0002\u0002\u037a\u037c\u0005r:\u0002\u037b\u0379\u0003",
    "\u0002\u0002\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037co\u0003",
    "\u0002\u0002\u0002\u037d\u037f\u0007h\u0002\u0002\u037e\u0380\u0005",
    " \u0011\u0002\u037f\u037e\u0003\u0002\u0002\u0002\u037f\u0380\u0003",
    "\u0002\u0002\u0002\u0380q\u0003\u0002\u0002\u0002\u0381\u0384\u0005",
    "\u019e\u00d0\u0002\u0382\u0384\u0005\u00f8}\u0002\u0383\u0381\u0003",
    "\u0002\u0002\u0002\u0383\u0382\u0003\u0002\u0002\u0002\u0384s\u0003",
    "\u0002\u0002\u0002\u0385\u0388\u0005v<\u0002\u0386\u0388\u0005x=\u0002",
    "\u0387\u0385\u0003\u0002\u0002\u0002\u0387\u0386\u0003\u0002\u0002\u0002",
    "\u0388u\u0003\u0002\u0002\u0002\u0389\u038c\u0005\u0006\u0004\u0002",
    "\u038a\u038c\u0007\u0005\u0002\u0002\u038b\u0389\u0003\u0002\u0002\u0002",
    "\u038b\u038a\u0003\u0002\u0002\u0002\u038cw\u0003\u0002\u0002\u0002",
    "\u038d\u0391\u0005z>\u0002\u038e\u0391\u0005\u0088E\u0002\u038f\u0391",
    "\u0005\u008aF\u0002\u0390\u038d\u0003\u0002\u0002\u0002\u0390\u038e",
    "\u0003\u0002\u0002\u0002\u0390\u038f\u0003\u0002\u0002\u0002\u0391y",
    "\u0003\u0002\u0002\u0002\u0392\u0395\u0005\u0080A\u0002\u0393\u0395",
    "\u0005\u0086D\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0394\u0393",
    "\u0003\u0002\u0002\u0002\u0395\u039a\u0003\u0002\u0002\u0002\u0396\u0399",
    "\u0005~@\u0002\u0397\u0399\u0005\u0084C\u0002\u0398\u0396\u0003\u0002",
    "\u0002\u0002\u0398\u0397\u0003\u0002\u0002\u0002\u0399\u039c\u0003\u0002",
    "\u0002\u0002\u039a\u0398\u0003\u0002\u0002\u0002\u039a\u039b\u0003\u0002",
    "\u0002\u0002\u039b{\u0003\u0002\u0002\u0002\u039c\u039a\u0003\u0002",
    "\u0002\u0002\u039d\u039f\u0007h\u0002\u0002\u039e\u03a0\u0005*\u0016",
    "\u0002\u039f\u039e\u0003\u0002\u0002\u0002\u039f\u03a0\u0003\u0002\u0002",
    "\u0002\u03a0\u03ae\u0003\u0002\u0002\u0002\u03a1\u03a2\u0005z>\u0002",
    "\u03a2\u03a6\u0007C\u0002\u0002\u03a3\u03a5\u0005\u00e6t\u0002\u03a4",
    "\u03a3\u0003\u0002\u0002\u0002\u03a5\u03a8\u0003\u0002\u0002\u0002\u03a6",
    "\u03a4\u0003\u0002\u0002\u0002\u03a6\u03a7\u0003\u0002\u0002\u0002\u03a7",
    "\u03a9\u0003\u0002\u0002\u0002\u03a8\u03a6\u0003\u0002\u0002\u0002\u03a9",
    "\u03ab\u0007h\u0002\u0002\u03aa\u03ac\u0005*\u0016\u0002\u03ab\u03aa",
    "\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002\u0002\u03ac\u03ae",
    "\u0003\u0002\u0002\u0002\u03ad\u039d\u0003\u0002\u0002\u0002\u03ad\u03a1",
    "\u0003\u0002\u0002\u0002\u03ae}\u0003\u0002\u0002\u0002\u03af\u03b3",
    "\u0007C\u0002\u0002\u03b0\u03b2\u0005\u00e6t\u0002\u03b1\u03b0\u0003",
    "\u0002\u0002\u0002\u03b2\u03b5\u0003\u0002\u0002\u0002\u03b3\u03b1\u0003",
    "\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002\u0002\u0002\u03b4\u03b6\u0003",
    "\u0002\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b6\u03b8\u0007",
    "h\u0002\u0002\u03b7\u03b9\u0005*\u0016\u0002\u03b8\u03b7\u0003\u0002",
    "\u0002\u0002\u03b8\u03b9\u0003\u0002\u0002\u0002\u03b9\u007f\u0003\u0002",
    "\u0002\u0002\u03ba\u03bc\u0007h\u0002\u0002\u03bb\u03bd\u0005*\u0016",
    "\u0002\u03bc\u03bb\u0003\u0002\u0002\u0002\u03bc\u03bd\u0003\u0002\u0002",
    "\u0002\u03bd\u0081\u0003\u0002\u0002\u0002\u03be\u03bf\u0005|?\u0002",
    "\u03bf\u0083\u0003\u0002\u0002\u0002\u03c0\u03c1\u0005~@\u0002\u03c1",
    "\u0085\u0003\u0002\u0002\u0002\u03c2\u03c3\u0005\u0080A\u0002\u03c3",
    "\u0087\u0003\u0002\u0002\u0002\u03c4\u03c5\u0007h\u0002\u0002\u03c5",
    "\u0089\u0003\u0002\u0002\u0002\u03c6\u03c7\u0005v<\u0002\u03c7\u03c8",
    "\u0005 \u0011\u0002\u03c8\u03d0\u0003\u0002\u0002\u0002\u03c9\u03ca",
    "\u0005z>\u0002\u03ca\u03cb\u0005 \u0011\u0002\u03cb\u03d0\u0003\u0002",
    "\u0002\u0002\u03cc\u03cd\u0005\u0088E\u0002\u03cd\u03ce\u0005 \u0011",
    "\u0002\u03ce\u03d0\u0003\u0002\u0002\u0002\u03cf\u03c6\u0003\u0002\u0002",
    "\u0002\u03cf\u03c9\u0003\u0002\u0002\u0002\u03cf\u03cc\u0003\u0002\u0002",
    "\u0002\u03d0\u008b\u0003\u0002\u0002\u0002\u03d1\u03d3\u0005\u008eH",
    "\u0002\u03d2\u03d1\u0003\u0002\u0002\u0002\u03d3\u03d6\u0003\u0002\u0002",
    "\u0002\u03d4\u03d2\u0003\u0002\u0002\u0002\u03d4\u03d5\u0003\u0002\u0002",
    "\u0002\u03d5\u03d7\u0003\u0002\u0002\u0002\u03d6\u03d4\u0003\u0002\u0002",
    "\u0002\u03d7\u03d8\u0005\u0090I\u0002\u03d8\u03d9\u0005\u00a8U\u0002",
    "\u03d9\u008d\u0003\u0002\u0002\u0002\u03da\u03e5\u0005\u00e6t\u0002",
    "\u03db\u03e5\u0007%\u0002\u0002\u03dc\u03e5\u0007$\u0002\u0002\u03dd",
    "\u03e5\u0007#\u0002\u0002\u03de\u03e5\u0007\u0003\u0002\u0002\u03df",
    "\u03e5\u0007(\u0002\u0002\u03e0\u03e5\u0007\u0014\u0002\u0002\u03e1",
    "\u03e5\u0007,\u0002\u0002\u03e2\u03e5\u0007 \u0002\u0002\u03e3\u03e5",
    "\u0007)\u0002\u0002\u03e4\u03da\u0003\u0002\u0002\u0002\u03e4\u03db",
    "\u0003\u0002\u0002\u0002\u03e4\u03dc\u0003\u0002\u0002\u0002\u03e4\u03dd",
    "\u0003\u0002\u0002\u0002\u03e4\u03de\u0003\u0002\u0002\u0002\u03e4\u03df",
    "\u0003\u0002\u0002\u0002\u03e4\u03e0\u0003\u0002\u0002\u0002\u03e4\u03e1",
    "\u0003\u0002\u0002\u0002\u03e4\u03e2\u0003\u0002\u0002\u0002\u03e4\u03e3",
    "\u0003\u0002\u0002\u0002\u03e5\u008f\u0003\u0002\u0002\u0002\u03e6\u03e7",
    "\u0005\u0092J\u0002\u03e7\u03e9\u0005\u0094K\u0002\u03e8\u03ea\u0005",
    "\u00a2R\u0002\u03e9\u03e8\u0003\u0002\u0002\u0002\u03e9\u03ea\u0003",
    "\u0002\u0002\u0002\u03ea\u03f8\u0003\u0002\u0002\u0002\u03eb\u03ef\u0005",
    "X-\u0002\u03ec\u03ee\u0005\u00e6t\u0002\u03ed\u03ec\u0003\u0002\u0002",
    "\u0002\u03ee\u03f1\u0003\u0002\u0002\u0002\u03ef\u03ed\u0003\u0002\u0002",
    "\u0002\u03ef\u03f0\u0003\u0002\u0002\u0002\u03f0\u03f2\u0003\u0002\u0002",
    "\u0002\u03f1\u03ef\u0003\u0002\u0002\u0002\u03f2\u03f3\u0005\u0092J",
    "\u0002\u03f3\u03f5\u0005\u0094K\u0002\u03f4\u03f6\u0005\u00a2R\u0002",
    "\u03f5\u03f4\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002",
    "\u03f6\u03f8\u0003\u0002\u0002\u0002\u03f7\u03e6\u0003\u0002\u0002\u0002",
    "\u03f7\u03eb\u0003\u0002\u0002\u0002\u03f8\u0091\u0003\u0002\u0002\u0002",
    "\u03f9\u03fc\u0005t;\u0002\u03fa\u03fc\u00072\u0002\u0002\u03fb\u03f9",
    "\u0003\u0002\u0002\u0002\u03fb\u03fa\u0003\u0002\u0002\u0002\u03fc\u0093",
    "\u0003\u0002\u0002\u0002\u03fd\u03fe\u0007h\u0002\u0002\u03fe\u0400",
    "\u0007;\u0002\u0002\u03ff\u0401\u0005\u0096L\u0002\u0400\u03ff\u0003",
    "\u0002\u0002\u0002\u0400\u0401\u0003\u0002\u0002\u0002\u0401\u0402\u0003",
    "\u0002\u0002\u0002\u0402\u0404\u0007<\u0002\u0002\u0403\u0405\u0005",
    " \u0011\u0002\u0404\u0403\u0003\u0002\u0002\u0002\u0404\u0405\u0003",
    "\u0002\u0002\u0002\u0405\u0095\u0003\u0002\u0002\u0002\u0406\u040d\u0005",
    "\u00a0Q\u0002\u0407\u0408\u0005\u0098M\u0002\u0408\u0409\u0007B\u0002",
    "\u0002\u0409\u040a\u0005\u009eP\u0002\u040a\u040d\u0003\u0002\u0002",
    "\u0002\u040b\u040d\u0005\u009eP\u0002\u040c\u0406\u0003\u0002\u0002",
    "\u0002\u040c\u0407\u0003\u0002\u0002\u0002\u040c\u040b\u0003\u0002\u0002",
    "\u0002\u040d\u0097\u0003\u0002\u0002\u0002\u040e\u0413\u0005\u009aN",
    "\u0002\u040f\u0410\u0007B\u0002\u0002\u0410\u0412\u0005\u009aN\u0002",
    "\u0411\u040f\u0003\u0002\u0002\u0002\u0412\u0415\u0003\u0002\u0002\u0002",
    "\u0413\u0411\u0003\u0002\u0002\u0002\u0413\u0414\u0003\u0002\u0002\u0002",
    "\u0414\u041f\u0003\u0002\u0002\u0002\u0415\u0413\u0003\u0002\u0002\u0002",
    "\u0416\u041b\u0005\u00a0Q\u0002\u0417\u0418\u0007B\u0002\u0002\u0418",
    "\u041a\u0005\u009aN\u0002\u0419\u0417\u0003\u0002\u0002\u0002\u041a",
    "\u041d\u0003\u0002\u0002\u0002\u041b\u0419\u0003\u0002\u0002\u0002\u041b",
    "\u041c\u0003\u0002\u0002\u0002\u041c\u041f\u0003\u0002\u0002\u0002\u041d",
    "\u041b\u0003\u0002\u0002\u0002\u041e\u040e\u0003\u0002\u0002\u0002\u041e",
    "\u0416\u0003\u0002\u0002\u0002\u041f\u0099\u0003\u0002\u0002\u0002\u0420",
    "\u0422\u0005\u009cO\u0002\u0421\u0420\u0003\u0002\u0002\u0002\u0422",
    "\u0425\u0003\u0002\u0002\u0002\u0423\u0421\u0003\u0002\u0002\u0002\u0423",
    "\u0424\u0003\u0002\u0002\u0002\u0424\u0426\u0003\u0002\u0002\u0002\u0425",
    "\u0423\u0003\u0002\u0002\u0002\u0426\u0427\u0005t;\u0002\u0427\u0428",
    "\u0005p9\u0002\u0428\u009b\u0003\u0002\u0002\u0002\u0429\u042c\u0005",
    "\u00e6t\u0002\u042a\u042c\u0007\u0014\u0002\u0002\u042b\u0429\u0003",
    "\u0002\u0002\u0002\u042b\u042a\u0003\u0002\u0002\u0002\u042c\u009d\u0003",
    "\u0002\u0002\u0002\u042d\u042f\u0005\u009cO\u0002\u042e\u042d\u0003",
    "\u0002\u0002\u0002\u042f\u0432\u0003\u0002\u0002\u0002\u0430\u042e\u0003",
    "\u0002\u0002\u0002\u0430\u0431\u0003\u0002\u0002\u0002\u0431\u0433\u0003",
    "\u0002\u0002\u0002\u0432\u0430\u0003\u0002\u0002\u0002\u0433\u0437\u0005",
    "t;\u0002\u0434\u0436\u0005\u00e6t\u0002\u0435\u0434\u0003\u0002\u0002",
    "\u0002\u0436\u0439\u0003\u0002\u0002\u0002\u0437\u0435\u0003\u0002\u0002",
    "\u0002\u0437\u0438\u0003\u0002\u0002\u0002\u0438\u043a\u0003\u0002\u0002",
    "\u0002\u0439\u0437\u0003\u0002\u0002\u0002\u043a\u043b\u0007j\u0002",
    "\u0002\u043b\u043c\u0005p9\u0002\u043c\u043f\u0003\u0002\u0002\u0002",
    "\u043d\u043f\u0005\u009aN\u0002\u043e\u0430\u0003\u0002\u0002\u0002",
    "\u043e\u043d\u0003\u0002\u0002\u0002\u043f\u009f\u0003\u0002\u0002\u0002",
    "\u0440\u0442\u0005\u00e6t\u0002\u0441\u0440\u0003\u0002\u0002\u0002",
    "\u0442\u0445\u0003\u0002\u0002\u0002\u0443\u0441\u0003\u0002\u0002\u0002",
    "\u0443\u0444\u0003\u0002\u0002\u0002\u0444\u0446\u0003\u0002\u0002\u0002",
    "\u0445\u0443\u0003\u0002\u0002\u0002\u0446\u0449\u0005t;\u0002\u0447",
    "\u0448\u0007h\u0002\u0002\u0448\u044a\u0007C\u0002\u0002\u0449\u0447",
    "\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002\u044a\u044b",
    "\u0003\u0002\u0002\u0002\u044b\u044c\u0007-\u0002\u0002\u044c\u00a1",
    "\u0003\u0002\u0002\u0002\u044d\u044e\u0007/\u0002\u0002\u044e\u044f",
    "\u0005\u00a4S\u0002\u044f\u00a3\u0003\u0002\u0002\u0002\u0450\u0455",
    "\u0005\u00a6T\u0002\u0451\u0452\u0007B\u0002\u0002\u0452\u0454\u0005",
    "\u00a6T\u0002\u0453\u0451\u0003\u0002\u0002\u0002\u0454\u0457\u0003",
    "\u0002\u0002\u0002\u0455\u0453\u0003\u0002\u0002\u0002\u0455\u0456\u0003",
    "\u0002\u0002\u0002\u0456\u00a5\u0003\u0002\u0002\u0002\u0457\u0455\u0003",
    "\u0002\u0002\u0002\u0458\u045b\u0005\u0010\t\u0002\u0459\u045b\u0005",
    "\u001c\u000f\u0002\u045a\u0458\u0003\u0002\u0002\u0002\u045a\u0459\u0003",
    "\u0002\u0002\u0002\u045b\u00a7\u0003\u0002\u0002\u0002\u045c\u045f\u0005",
    "\u00fc\u007f\u0002\u045d\u045f\u0007A\u0002\u0002\u045e\u045c\u0003",
    "\u0002\u0002\u0002\u045e\u045d\u0003\u0002\u0002\u0002\u045f\u00a9\u0003",
    "\u0002\u0002\u0002\u0460\u0461\u0005\u00fc\u007f\u0002\u0461\u00ab\u0003",
    "\u0002\u0002\u0002\u0462\u0463\u0007(\u0002\u0002\u0463\u0464\u0005",
    "\u00fc\u007f\u0002\u0464\u00ad\u0003\u0002\u0002\u0002\u0465\u0467\u0005",
    "\u00b0Y\u0002\u0466\u0465\u0003\u0002\u0002\u0002\u0467\u046a\u0003",
    "\u0002\u0002\u0002\u0468\u0466\u0003\u0002\u0002\u0002\u0468\u0469\u0003",
    "\u0002\u0002\u0002\u0469\u046b\u0003\u0002\u0002\u0002\u046a\u0468\u0003",
    "\u0002\u0002\u0002\u046b\u046d\u0005\u00b2Z\u0002\u046c\u046e\u0005",
    "\u00a2R\u0002\u046d\u046c\u0003\u0002\u0002\u0002\u046d\u046e\u0003",
    "\u0002\u0002\u0002\u046e\u046f\u0003\u0002\u0002\u0002\u046f\u0470\u0005",
    "\u00b6\\\u0002\u0470\u00af\u0003\u0002\u0002\u0002\u0471\u0476\u0005",
    "\u00e6t\u0002\u0472\u0476\u0007%\u0002\u0002\u0473\u0476\u0007$\u0002",
    "\u0002\u0474\u0476\u0007#\u0002\u0002\u0475\u0471\u0003\u0002\u0002",
    "\u0002\u0475\u0472\u0003\u0002\u0002\u0002\u0475\u0473\u0003\u0002\u0002",
    "\u0002\u0475\u0474\u0003\u0002\u0002\u0002\u0476\u00b1\u0003\u0002\u0002",
    "\u0002\u0477\u0479\u0005X-\u0002\u0478\u0477\u0003\u0002\u0002\u0002",
    "\u0478\u0479\u0003\u0002\u0002\u0002\u0479\u047a\u0003\u0002\u0002\u0002",
    "\u047a\u047b\u0005\u00b4[\u0002\u047b\u047d\u0007;\u0002\u0002\u047c",
    "\u047e\u0005\u0096L\u0002\u047d\u047c\u0003\u0002\u0002\u0002\u047d",
    "\u047e\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002\u0002\u0002\u047f",
    "\u0480\u0007<\u0002\u0002\u0480\u00b3\u0003\u0002\u0002\u0002\u0481",
    "\u0482\u0007h\u0002\u0002\u0482\u00b5\u0003\u0002\u0002\u0002\u0483",
    "\u0485\u0007=\u0002\u0002\u0484\u0486\u0005\u00b8]\u0002\u0485\u0484",
    "\u0003\u0002\u0002\u0002\u0485\u0486\u0003\u0002\u0002\u0002\u0486\u0488",
    "\u0003\u0002\u0002\u0002\u0487\u0489\u0005\u00fe\u0080\u0002\u0488\u0487",
    "\u0003\u0002\u0002\u0002\u0488\u0489\u0003\u0002\u0002\u0002\u0489\u048a",
    "\u0003\u0002\u0002\u0002\u048a\u048b\u0007>\u0002\u0002\u048b\u00b7",
    "\u0003\u0002\u0002\u0002\u048c\u048e\u0005*\u0016\u0002\u048d\u048c",
    "\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002\u0002\u048e\u048f",
    "\u0003\u0002\u0002\u0002\u048f\u0490\u0007-\u0002\u0002\u0490\u0492",
    "\u0007;\u0002\u0002\u0491\u0493\u0005\u018e\u00c8\u0002\u0492\u0491",
    "\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002\u0002\u0493\u0494",
    "\u0003\u0002\u0002\u0002\u0494\u0495\u0007<\u0002\u0002\u0495\u04bb",
    "\u0007A\u0002\u0002\u0496\u0498\u0005*\u0016\u0002\u0497\u0496\u0003",
    "\u0002\u0002\u0002\u0497\u0498\u0003\u0002\u0002\u0002\u0498\u0499\u0003",
    "\u0002\u0002\u0002\u0499\u049a\u0007*\u0002\u0002\u049a\u049c\u0007",
    ";\u0002\u0002\u049b\u049d\u0005\u018e\u00c8\u0002\u049c\u049b\u0003",
    "\u0002\u0002\u0002\u049c\u049d\u0003\u0002\u0002\u0002\u049d\u049e\u0003",
    "\u0002\u0002\u0002\u049e\u049f\u0007<\u0002\u0002\u049f\u04bb\u0007",
    "A\u0002\u0002\u04a0\u04a1\u0005:\u001e\u0002\u04a1\u04a3\u0007C\u0002",
    "\u0002\u04a2\u04a4\u0005*\u0016\u0002\u04a3\u04a2\u0003\u0002\u0002",
    "\u0002\u04a3\u04a4\u0003\u0002\u0002\u0002\u04a4\u04a5\u0003\u0002\u0002",
    "\u0002\u04a5\u04a6\u0007*\u0002\u0002\u04a6\u04a8\u0007;\u0002\u0002",
    "\u04a7\u04a9\u0005\u018e\u00c8\u0002\u04a8\u04a7\u0003\u0002\u0002\u0002",
    "\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u04aa\u0003\u0002\u0002\u0002",
    "\u04aa\u04ab\u0007<\u0002\u0002\u04ab\u04ac\u0007A\u0002\u0002\u04ac",
    "\u04bb\u0003\u0002\u0002\u0002\u04ad\u04ae\u0005\u0160\u00b1\u0002\u04ae",
    "\u04b0\u0007C\u0002\u0002\u04af\u04b1\u0005*\u0016\u0002\u04b0\u04af",
    "\u0003\u0002\u0002\u0002\u04b0\u04b1\u0003\u0002\u0002\u0002\u04b1\u04b2",
    "\u0003\u0002\u0002\u0002\u04b2\u04b3\u0007*\u0002\u0002\u04b3\u04b5",
    "\u0007;\u0002\u0002\u04b4\u04b6\u0005\u018e\u00c8\u0002\u04b5\u04b4",
    "\u0003\u0002\u0002\u0002\u04b5\u04b6\u0003\u0002\u0002\u0002\u04b6\u04b7",
    "\u0003\u0002\u0002\u0002\u04b7\u04b8\u0007<\u0002\u0002\u04b8\u04b9",
    "\u0007A\u0002\u0002\u04b9\u04bb\u0003\u0002\u0002\u0002\u04ba\u048d",
    "\u0003\u0002\u0002\u0002\u04ba\u0497\u0003\u0002\u0002\u0002\u04ba\u04a0",
    "\u0003\u0002\u0002\u0002\u04ba\u04ad\u0003\u0002\u0002\u0002\u04bb\u00b9",
    "\u0003\u0002\u0002\u0002\u04bc\u04be\u0005V,\u0002\u04bd\u04bc\u0003",
    "\u0002\u0002\u0002\u04be\u04c1\u0003\u0002\u0002\u0002\u04bf\u04bd\u0003",
    "\u0002\u0002\u0002\u04bf\u04c0\u0003\u0002\u0002\u0002\u04c0\u04c2\u0003",
    "\u0002\u0002\u0002\u04c1\u04bf\u0003\u0002\u0002\u0002\u04c2\u04c3\u0007",
    "\u0012\u0002\u0002\u04c3\u04c5\u0007h\u0002\u0002\u04c4\u04c6\u0005",
    "^0\u0002\u04c5\u04c4\u0003\u0002\u0002\u0002\u04c5\u04c6\u0003\u0002",
    "\u0002\u0002\u04c6\u04c7\u0003\u0002\u0002\u0002\u04c7\u04c8\u0005\u00bc",
    "_\u0002\u04c8\u00bb\u0003\u0002\u0002\u0002\u04c9\u04cb\u0007=\u0002",
    "\u0002\u04ca\u04cc\u0005\u00be`\u0002\u04cb\u04ca\u0003\u0002\u0002",
    "\u0002\u04cb\u04cc\u0003\u0002\u0002\u0002\u04cc\u04ce\u0003\u0002\u0002",
    "\u0002\u04cd\u04cf\u0007B\u0002\u0002\u04ce\u04cd\u0003\u0002\u0002",
    "\u0002\u04ce\u04cf\u0003\u0002\u0002\u0002\u04cf\u04d1\u0003\u0002\u0002",
    "\u0002\u04d0\u04d2\u0005\u00c4c\u0002\u04d1\u04d0\u0003\u0002\u0002",
    "\u0002\u04d1\u04d2\u0003\u0002\u0002\u0002\u04d2\u04d3\u0003\u0002\u0002",
    "\u0002\u04d3\u04d4\u0007>\u0002\u0002\u04d4\u00bd\u0003\u0002\u0002",
    "\u0002\u04d5\u04da\u0005\u00c0a\u0002\u04d6\u04d7\u0007B\u0002\u0002",
    "\u04d7\u04d9\u0005\u00c0a\u0002\u04d8\u04d6\u0003\u0002\u0002\u0002",
    "\u04d9\u04dc\u0003\u0002\u0002\u0002\u04da\u04d8\u0003\u0002\u0002\u0002",
    "\u04da\u04db\u0003\u0002\u0002\u0002\u04db\u00bf\u0003\u0002\u0002\u0002",
    "\u04dc\u04da\u0003\u0002\u0002\u0002\u04dd\u04df\u0005\u00c2b\u0002",
    "\u04de\u04dd\u0003\u0002\u0002\u0002\u04df\u04e2\u0003\u0002\u0002\u0002",
    "\u04e0\u04de\u0003\u0002\u0002\u0002\u04e0\u04e1\u0003\u0002\u0002\u0002",
    "\u04e1\u04e3\u0003\u0002\u0002\u0002\u04e2\u04e0\u0003\u0002\u0002\u0002",
    "\u04e3\u04e9\u0007h\u0002\u0002\u04e4\u04e6\u0007;\u0002\u0002\u04e5",
    "\u04e7\u0005\u018e\u00c8\u0002\u04e6\u04e5\u0003\u0002\u0002\u0002\u04e6",
    "\u04e7\u0003\u0002\u0002\u0002\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8",
    "\u04ea\u0007<\u0002\u0002\u04e9\u04e4\u0003\u0002\u0002\u0002\u04e9",
    "\u04ea\u0003\u0002\u0002\u0002\u04ea\u04ec\u0003\u0002\u0002\u0002\u04eb",
    "\u04ed\u0005b2\u0002\u04ec\u04eb\u0003\u0002\u0002\u0002\u04ec\u04ed",
    "\u0003\u0002\u0002\u0002\u04ed\u00c1\u0003\u0002\u0002\u0002\u04ee\u04ef",
    "\u0005\u00e6t\u0002\u04ef\u00c3\u0003\u0002\u0002\u0002\u04f0\u04f4",
    "\u0007A\u0002\u0002\u04f1\u04f3\u0005d3\u0002\u04f2\u04f1\u0003\u0002",
    "\u0002\u0002\u04f3\u04f6\u0003\u0002\u0002\u0002\u04f4\u04f2\u0003\u0002",
    "\u0002\u0002\u04f4\u04f5\u0003\u0002\u0002\u0002\u04f5\u00c5\u0003\u0002",
    "\u0002\u0002\u04f6\u04f4\u0003\u0002\u0002\u0002\u04f7\u04fa\u0005\u00c8",
    "e\u0002\u04f8\u04fa\u0005\u00dan\u0002\u04f9\u04f7\u0003\u0002\u0002",
    "\u0002\u04f9\u04f8\u0003\u0002\u0002\u0002\u04fa\u00c7\u0003\u0002\u0002",
    "\u0002\u04fb\u04fd\u0005\u00caf\u0002\u04fc\u04fb\u0003\u0002\u0002",
    "\u0002\u04fd\u0500\u0003\u0002\u0002\u0002\u04fe\u04fc\u0003\u0002\u0002",
    "\u0002\u04fe\u04ff\u0003\u0002\u0002\u0002\u04ff\u0501\u0003\u0002\u0002",
    "\u0002\u0500\u04fe\u0003\u0002\u0002\u0002\u0501\u0502\u0007\u001e\u0002",
    "\u0002\u0502\u0504\u0007h\u0002\u0002\u0503\u0505\u0005X-\u0002\u0504",
    "\u0503\u0003\u0002\u0002\u0002\u0504\u0505\u0003\u0002\u0002\u0002\u0505",
    "\u0507\u0003\u0002\u0002\u0002\u0506\u0508\u0005\u00ccg\u0002\u0507",
    "\u0506\u0003\u0002\u0002\u0002\u0507\u0508\u0003\u0002\u0002\u0002\u0508",
    "\u0509\u0003\u0002\u0002\u0002\u0509\u050a\u0005\u00ceh\u0002\u050a",
    "\u00c9\u0003\u0002\u0002\u0002\u050b\u0513\u0005\u00e6t\u0002\u050c",
    "\u0513\u0007%\u0002\u0002\u050d\u0513\u0007$\u0002\u0002\u050e\u0513",
    "\u0007#\u0002\u0002\u050f\u0513\u0007\u0003\u0002\u0002\u0510\u0513",
    "\u0007(\u0002\u0002\u0511\u0513\u0007)\u0002\u0002\u0512\u050b\u0003",
    "\u0002\u0002\u0002\u0512\u050c\u0003\u0002\u0002\u0002\u0512\u050d\u0003",
    "\u0002\u0002\u0002\u0512\u050e\u0003\u0002\u0002\u0002\u0512\u050f\u0003",
    "\u0002\u0002\u0002\u0512\u0510\u0003\u0002\u0002\u0002\u0512\u0511\u0003",
    "\u0002\u0002\u0002\u0513\u00cb\u0003\u0002\u0002\u0002\u0514\u0515\u0007",
    "\u0013\u0002\u0002\u0515\u0516\u0005`1\u0002\u0516\u00cd\u0003\u0002",
    "\u0002\u0002\u0517\u051b\u0007=\u0002\u0002\u0518\u051a\u0005\u00d0",
    "i\u0002\u0519\u0518\u0003\u0002\u0002\u0002\u051a\u051d\u0003\u0002",
    "\u0002\u0002\u051b\u0519\u0003\u0002\u0002\u0002\u051b\u051c\u0003\u0002",
    "\u0002\u0002\u051c\u051e\u0003\u0002\u0002\u0002\u051d\u051b\u0003\u0002",
    "\u0002\u0002\u051e\u051f\u0007>\u0002\u0002\u051f\u00cf\u0003\u0002",
    "\u0002\u0002\u0520\u0526\u0005\u00d2j\u0002\u0521\u0526\u0005\u00d6",
    "l\u0002\u0522\u0526\u0005R*\u0002\u0523\u0526\u0005\u00c6d\u0002\u0524",
    "\u0526\u0007A\u0002\u0002\u0525\u0520\u0003\u0002\u0002\u0002\u0525",
    "\u0521\u0003\u0002\u0002\u0002\u0525\u0522\u0003\u0002\u0002\u0002\u0525",
    "\u0523\u0003\u0002\u0002\u0002\u0525\u0524\u0003\u0002\u0002\u0002\u0526",
    "\u00d1\u0003\u0002\u0002\u0002\u0527\u0529\u0005\u00d4k\u0002\u0528",
    "\u0527\u0003\u0002\u0002\u0002\u0529\u052c\u0003\u0002\u0002\u0002\u052a",
    "\u0528\u0003\u0002\u0002\u0002\u052a\u052b\u0003\u0002\u0002\u0002\u052b",
    "\u052d\u0003\u0002\u0002\u0002\u052c\u052a\u0003\u0002\u0002\u0002\u052d",
    "\u052e\u0005t;\u0002\u052e\u052f\u0005l7\u0002\u052f\u0530\u0007A\u0002",
    "\u0002\u0530\u00d3\u0003\u0002\u0002\u0002\u0531\u0536\u0005\u00e6t",
    "\u0002\u0532\u0536\u0007%\u0002\u0002\u0533\u0536\u0007(\u0002\u0002",
    "\u0534\u0536\u0007\u0014\u0002\u0002\u0535\u0531\u0003\u0002\u0002\u0002",
    "\u0535\u0532\u0003\u0002\u0002\u0002\u0535\u0533\u0003\u0002\u0002\u0002",
    "\u0535\u0534\u0003\u0002\u0002\u0002\u0536\u00d5\u0003\u0002\u0002\u0002",
    "\u0537\u0539\u0005\u00d8m\u0002\u0538\u0537\u0003\u0002\u0002\u0002",
    "\u0539\u053c\u0003\u0002\u0002\u0002\u053a\u0538\u0003\u0002\u0002\u0002",
    "\u053a\u053b\u0003\u0002\u0002\u0002\u053b\u053d\u0003\u0002\u0002\u0002",
    "\u053c\u053a\u0003\u0002\u0002\u0002\u053d\u053e\u0005\u0090I\u0002",
    "\u053e\u053f\u0005\u00a8U\u0002\u053f\u00d7\u0003\u0002\u0002\u0002",
    "\u0540\u0547\u0005\u00e6t\u0002\u0541\u0547\u0007%\u0002\u0002\u0542",
    "\u0547\u0007\u0003\u0002\u0002\u0543\u0547\u0007\u000e\u0002\u0002\u0544",
    "\u0547\u0007(\u0002\u0002\u0545\u0547\u0007)\u0002\u0002\u0546\u0540",
    "\u0003\u0002\u0002\u0002\u0546\u0541\u0003\u0002\u0002\u0002\u0546\u0542",
    "\u0003\u0002\u0002\u0002\u0546\u0543\u0003\u0002\u0002\u0002\u0546\u0544",
    "\u0003\u0002\u0002\u0002\u0546\u0545\u0003\u0002\u0002\u0002\u0547\u00d9",
    "\u0003\u0002\u0002\u0002\u0548\u054a\u0005\u00caf\u0002\u0549\u0548",
    "\u0003\u0002\u0002\u0002\u054a\u054d\u0003\u0002\u0002\u0002\u054b\u0549",
    "\u0003\u0002\u0002\u0002\u054b\u054c\u0003\u0002\u0002\u0002\u054c\u054e",
    "\u0003\u0002\u0002\u0002\u054d\u054b\u0003\u0002\u0002\u0002\u054e\u054f",
    "\u0007i\u0002\u0002\u054f\u0550\u0007\u001e\u0002\u0002\u0550\u0551",
    "\u0007h\u0002\u0002\u0551\u0552\u0005\u00dco\u0002\u0552\u00db\u0003",
    "\u0002\u0002\u0002\u0553\u0557\u0007=\u0002\u0002\u0554\u0556\u0005",
    "\u00dep\u0002\u0555\u0554\u0003\u0002\u0002\u0002\u0556\u0559\u0003",
    "\u0002\u0002\u0002\u0557\u0555\u0003\u0002\u0002\u0002\u0557\u0558\u0003",
    "\u0002\u0002\u0002\u0558\u055a\u0003\u0002\u0002\u0002\u0559\u0557\u0003",
    "\u0002\u0002\u0002\u055a\u055b\u0007>\u0002\u0002\u055b\u00dd\u0003",
    "\u0002\u0002\u0002\u055c\u0562\u0005\u00e0q\u0002\u055d\u0562\u0005",
    "\u00d2j\u0002\u055e\u0562\u0005R*\u0002\u055f\u0562\u0005\u00c6d\u0002",
    "\u0560\u0562\u0007A\u0002\u0002\u0561\u055c\u0003\u0002\u0002\u0002",
    "\u0561\u055d\u0003\u0002\u0002\u0002\u0561\u055e\u0003\u0002\u0002\u0002",
    "\u0561\u055f\u0003\u0002\u0002\u0002\u0561\u0560\u0003\u0002\u0002\u0002",
    "\u0562\u00df\u0003\u0002\u0002\u0002\u0563\u0565\u0005\u00e2r\u0002",
    "\u0564\u0563\u0003\u0002\u0002\u0002\u0565\u0568\u0003\u0002\u0002\u0002",
    "\u0566\u0564\u0003\u0002\u0002\u0002\u0566\u0567\u0003\u0002\u0002\u0002",
    "\u0567\u0569\u0003\u0002\u0002\u0002\u0568\u0566\u0003\u0002\u0002\u0002",
    "\u0569\u056a\u0005t;\u0002\u056a\u056b\u0007h\u0002\u0002\u056b\u056c",
    "\u0007;\u0002\u0002\u056c\u056e\u0007<\u0002\u0002\u056d\u056f\u0005",
    " \u0011\u0002\u056e\u056d\u0003\u0002\u0002\u0002\u056e\u056f\u0003",
    "\u0002\u0002\u0002\u056f\u0571\u0003\u0002\u0002\u0002\u0570\u0572\u0005",
    "\u00e4s\u0002\u0571\u0570\u0003\u0002\u0002\u0002\u0571\u0572\u0003",
    "\u0002\u0002\u0002\u0572\u0573\u0003\u0002\u0002\u0002\u0573\u0574\u0007",
    "A\u0002\u0002\u0574\u00e1\u0003\u0002\u0002\u0002\u0575\u0579\u0005",
    "\u00e6t\u0002\u0576\u0579\u0007%\u0002\u0002\u0577\u0579\u0007\u0003",
    "\u0002\u0002\u0578\u0575\u0003\u0002\u0002\u0002\u0578\u0576\u0003\u0002",
    "\u0002\u0002\u0578\u0577\u0003\u0002\u0002\u0002\u0579\u00e3\u0003\u0002",
    "\u0002\u0002\u057a\u057b\u0007\u000e\u0002\u0002\u057b\u057c\u0005\u00ee",
    "x\u0002\u057c\u00e5\u0003\u0002\u0002\u0002\u057d\u0581\u0005\u00e8",
    "u\u0002\u057e\u0581\u0005\u00f4{\u0002\u057f\u0581\u0005\u00f6|\u0002",
    "\u0580\u057d\u0003\u0002\u0002\u0002\u0580\u057e\u0003\u0002\u0002\u0002",
    "\u0580\u057f\u0003\u0002\u0002\u0002\u0581\u00e7\u0003\u0002\u0002\u0002",
    "\u0582\u0583\u0007i\u0002\u0002\u0583\u0584\u00056\u001c\u0002\u0584",
    "\u0586\u0007;\u0002\u0002\u0585\u0587\u0005\u00eav\u0002\u0586\u0585",
    "\u0003\u0002\u0002\u0002\u0586\u0587\u0003\u0002\u0002\u0002\u0587\u0588",
    "\u0003\u0002\u0002\u0002\u0588\u0589\u0007<\u0002\u0002\u0589\u00e9",
    "\u0003\u0002\u0002\u0002\u058a\u058f\u0005\u00ecw\u0002\u058b\u058c",
    "\u0007B\u0002\u0002\u058c\u058e\u0005\u00ecw\u0002\u058d\u058b\u0003",
    "\u0002\u0002\u0002\u058e\u0591\u0003\u0002\u0002\u0002\u058f\u058d\u0003",
    "\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002\u0590\u00eb\u0003",
    "\u0002\u0002\u0002\u0591\u058f\u0003\u0002\u0002\u0002\u0592\u0593\u0007",
    "h\u0002\u0002\u0593\u0594\u0007D\u0002\u0002\u0594\u0595\u0005\u00ee",
    "x\u0002\u0595\u00ed\u0003\u0002\u0002\u0002\u0596\u059a\u0005\u01b0",
    "\u00d9\u0002\u0597\u059a\u0005\u00f0y\u0002\u0598\u059a\u0005\u00e6",
    "t\u0002\u0599\u0596\u0003\u0002\u0002\u0002\u0599\u0597\u0003\u0002",
    "\u0002\u0002\u0599\u0598\u0003\u0002\u0002\u0002\u059a\u00ef\u0003\u0002",
    "\u0002\u0002\u059b\u059d\u0007=\u0002\u0002\u059c\u059e\u0005\u00f2",
    "z\u0002\u059d\u059c\u0003\u0002\u0002\u0002\u059d\u059e\u0003\u0002",
    "\u0002\u0002\u059e\u05a0\u0003\u0002\u0002\u0002\u059f\u05a1\u0007B",
    "\u0002\u0002\u05a0\u059f\u0003\u0002\u0002\u0002\u05a0\u05a1\u0003\u0002",
    "\u0002\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002\u05a2\u05a3\u0007>",
    "\u0002\u0002\u05a3\u00f1\u0003\u0002\u0002\u0002\u05a4\u05a9\u0005\u00ee",
    "x\u0002\u05a5\u05a6\u0007B\u0002\u0002\u05a6\u05a8\u0005\u00eex\u0002",
    "\u05a7\u05a5\u0003\u0002\u0002\u0002\u05a8\u05ab\u0003\u0002\u0002\u0002",
    "\u05a9\u05a7\u0003\u0002\u0002\u0002\u05a9\u05aa\u0003\u0002\u0002\u0002",
    "\u05aa\u00f3\u0003\u0002\u0002\u0002\u05ab\u05a9\u0003\u0002\u0002\u0002",
    "\u05ac\u05ad\u0007i\u0002\u0002\u05ad\u05ae\u00056\u001c\u0002\u05ae",
    "\u00f5\u0003\u0002\u0002\u0002\u05af\u05b0\u0007i\u0002\u0002\u05b0",
    "\u05b1\u00056\u001c\u0002\u05b1\u05b2\u0007;\u0002\u0002\u05b2\u05b3",
    "\u0005\u00eex\u0002\u05b3\u05b4\u0007<\u0002\u0002\u05b4\u00f7\u0003",
    "\u0002\u0002\u0002\u05b5\u05b7\u0007=\u0002\u0002\u05b6\u05b8\u0005",
    "\u00fa~\u0002\u05b7\u05b6\u0003\u0002\u0002\u0002\u05b7\u05b8\u0003",
    "\u0002\u0002\u0002\u05b8\u05ba\u0003\u0002\u0002\u0002\u05b9\u05bb\u0007",
    "B\u0002\u0002\u05ba\u05b9\u0003\u0002\u0002\u0002\u05ba\u05bb\u0003",
    "\u0002\u0002\u0002\u05bb\u05bc\u0003\u0002\u0002\u0002\u05bc\u05bd\u0007",
    ">\u0002\u0002\u05bd\u00f9\u0003\u0002\u0002\u0002\u05be\u05c3\u0005",
    "r:\u0002\u05bf\u05c0\u0007B\u0002\u0002\u05c0\u05c2\u0005r:\u0002\u05c1",
    "\u05bf\u0003\u0002\u0002\u0002\u05c2\u05c5\u0003\u0002\u0002\u0002\u05c3",
    "\u05c1\u0003\u0002\u0002\u0002\u05c3\u05c4\u0003\u0002\u0002\u0002\u05c4",
    "\u00fb\u0003\u0002\u0002\u0002\u05c5\u05c3\u0003\u0002\u0002\u0002\u05c6",
    "\u05c8\u0007=\u0002\u0002\u05c7\u05c9\u0005\u00fe\u0080\u0002\u05c8",
    "\u05c7\u0003\u0002\u0002\u0002\u05c8\u05c9\u0003\u0002\u0002\u0002\u05c9",
    "\u05ca\u0003\u0002\u0002\u0002\u05ca\u05cb\u0007>\u0002\u0002\u05cb",
    "\u00fd\u0003\u0002\u0002\u0002\u05cc\u05ce\u0005\u0100\u0081\u0002\u05cd",
    "\u05cc\u0003\u0002\u0002\u0002\u05ce\u05cf\u0003\u0002\u0002\u0002\u05cf",
    "\u05cd\u0003\u0002\u0002\u0002\u05cf\u05d0\u0003\u0002\u0002\u0002\u05d0",
    "\u00ff\u0003\u0002\u0002\u0002\u05d1\u05d5\u0005\u0102\u0082\u0002\u05d2",
    "\u05d5\u0005R*\u0002\u05d3\u05d5\u0005\u0106\u0084\u0002\u05d4\u05d1",
    "\u0003\u0002\u0002\u0002\u05d4\u05d2\u0003\u0002\u0002\u0002\u05d4\u05d3",
    "\u0003\u0002\u0002\u0002\u05d5\u0101\u0003\u0002\u0002\u0002\u05d6\u05d7",
    "\u0005\u0104\u0083\u0002\u05d7\u05d8\u0007A\u0002\u0002\u05d8\u0103",
    "\u0003\u0002\u0002\u0002\u05d9\u05db\u0005\u009cO\u0002\u05da\u05d9",
    "\u0003\u0002\u0002\u0002\u05db\u05de\u0003\u0002\u0002\u0002\u05dc\u05da",
    "\u0003\u0002\u0002\u0002\u05dc\u05dd\u0003\u0002\u0002\u0002\u05dd\u05df",
    "\u0003\u0002\u0002\u0002\u05de\u05dc\u0003\u0002\u0002\u0002\u05df\u05e0",
    "\u0005t;\u0002\u05e0\u05e1\u0005l7\u0002\u05e1\u0105\u0003\u0002\u0002",
    "\u0002\u05e2\u05e9\u0005\u010a\u0086\u0002\u05e3\u05e9\u0005\u010e\u0088",
    "\u0002\u05e4\u05e9\u0005\u0116\u008c\u0002\u05e5\u05e9\u0005\u0118\u008d",
    "\u0002\u05e6\u05e9\u0005\u012a\u0096\u0002\u05e7\u05e9\u0005\u0130\u0099",
    "\u0002\u05e8\u05e2\u0003\u0002\u0002\u0002\u05e8\u05e3\u0003\u0002\u0002",
    "\u0002\u05e8\u05e4\u0003\u0002\u0002\u0002\u05e8\u05e5\u0003\u0002\u0002",
    "\u0002\u05e8\u05e6\u0003\u0002\u0002\u0002\u05e8\u05e7\u0003\u0002\u0002",
    "\u0002\u05e9\u0107\u0003\u0002\u0002\u0002\u05ea\u05f0\u0005\u010a\u0086",
    "\u0002\u05eb\u05f0\u0005\u0110\u0089\u0002\u05ec\u05f0\u0005\u011a\u008e",
    "\u0002\u05ed\u05f0\u0005\u012c\u0097\u0002\u05ee\u05f0\u0005\u0132\u009a",
    "\u0002\u05ef\u05ea\u0003\u0002\u0002\u0002\u05ef\u05eb\u0003\u0002\u0002",
    "\u0002\u05ef\u05ec\u0003\u0002\u0002\u0002\u05ef\u05ed\u0003\u0002\u0002",
    "\u0002\u05ef\u05ee\u0003\u0002\u0002\u0002\u05f0\u0109\u0003\u0002\u0002",
    "\u0002\u05f1\u05fe\u0005\u00fc\u007f\u0002\u05f2\u05fe\u0005\u010c\u0087",
    "\u0002\u05f3\u05fe\u0005\u0112\u008a\u0002\u05f4\u05fe\u0005\u011c\u008f",
    "\u0002\u05f5\u05fe\u0005\u011e\u0090\u0002\u05f6\u05fe\u0005\u012e\u0098",
    "\u0002\u05f7\u05fe\u0005\u0142\u00a2\u0002\u05f8\u05fe\u0005\u0144\u00a3",
    "\u0002\u05f9\u05fe\u0005\u0146\u00a4\u0002\u05fa\u05fe\u0005\u014a\u00a6",
    "\u0002\u05fb\u05fe\u0005\u0148\u00a5\u0002\u05fc\u05fe\u0005\u014c\u00a7",
    "\u0002\u05fd\u05f1\u0003\u0002\u0002\u0002\u05fd\u05f2\u0003\u0002\u0002",
    "\u0002\u05fd\u05f3\u0003\u0002\u0002\u0002\u05fd\u05f4\u0003\u0002\u0002",
    "\u0002\u05fd\u05f5\u0003\u0002\u0002\u0002\u05fd\u05f6\u0003\u0002\u0002",
    "\u0002\u05fd\u05f7\u0003\u0002\u0002\u0002\u05fd\u05f8\u0003\u0002\u0002",
    "\u0002\u05fd\u05f9\u0003\u0002\u0002\u0002\u05fd\u05fa\u0003\u0002\u0002",
    "\u0002\u05fd\u05fb\u0003\u0002\u0002\u0002\u05fd\u05fc\u0003\u0002\u0002",
    "\u0002\u05fe\u010b\u0003\u0002\u0002\u0002\u05ff\u0600\u0007A\u0002",
    "\u0002\u0600\u010d\u0003\u0002\u0002\u0002\u0601\u0602\u0007h\u0002",
    "\u0002\u0602\u0603\u0007J\u0002\u0002\u0603\u0604\u0005\u0106\u0084",
    "\u0002\u0604\u010f\u0003\u0002\u0002\u0002\u0605\u0606\u0007h\u0002",
    "\u0002\u0606\u0607\u0007J\u0002\u0002\u0607\u0608\u0005\u0108\u0085",
    "\u0002\u0608\u0111\u0003\u0002\u0002\u0002\u0609\u060a\u0005\u0114\u008b",
    "\u0002\u060a\u060b\u0007A\u0002\u0002\u060b\u0113\u0003\u0002\u0002",
    "\u0002\u060c\u0614\u0005\u01aa\u00d6\u0002\u060d\u0614\u0005\u01c8\u00e5",
    "\u0002\u060e\u0614\u0005\u01ca\u00e6\u0002\u060f\u0614\u0005\u01d0\u00e9",
    "\u0002\u0610\u0614\u0005\u01d4\u00eb\u0002\u0611\u0614\u0005\u0188\u00c5",
    "\u0002\u0612\u0614\u0005\u0174\u00bb\u0002\u0613\u060c\u0003\u0002\u0002",
    "\u0002\u0613\u060d\u0003\u0002\u0002\u0002\u0613\u060e\u0003\u0002\u0002",
    "\u0002\u0613\u060f\u0003\u0002\u0002\u0002\u0613\u0610\u0003\u0002\u0002",
    "\u0002\u0613\u0611\u0003\u0002\u0002\u0002\u0613\u0612\u0003\u0002\u0002",
    "\u0002\u0614\u0115\u0003\u0002\u0002\u0002\u0615\u0616\u0007\u0018\u0002",
    "\u0002\u0616\u0617\u0007;\u0002\u0002\u0617\u0618\u0005\u019e\u00d0",
    "\u0002\u0618\u0619\u0007<\u0002\u0002\u0619\u061a\u0005\u0106\u0084",
    "\u0002\u061a\u0117\u0003\u0002\u0002\u0002\u061b\u061c\u0007\u0018\u0002",
    "\u0002\u061c\u061d\u0007;\u0002\u0002\u061d\u061e\u0005\u019e\u00d0",
    "\u0002\u061e\u061f\u0007<\u0002\u0002\u061f\u0620\u0005\u0108\u0085",
    "\u0002\u0620\u0621\u0007\u0011\u0002\u0002\u0621\u0622\u0005\u0106\u0084",
    "\u0002\u0622\u0119\u0003\u0002\u0002\u0002\u0623\u0624\u0007\u0018\u0002",
    "\u0002\u0624\u0625\u0007;\u0002\u0002\u0625\u0626\u0005\u019e\u00d0",
    "\u0002\u0626\u0627\u0007<\u0002\u0002\u0627\u0628\u0005\u0108\u0085",
    "\u0002\u0628\u0629\u0007\u0011\u0002\u0002\u0629\u062a\u0005\u0108\u0085",
    "\u0002\u062a\u011b\u0003\u0002\u0002\u0002\u062b\u062c\u0007\u0004\u0002",
    "\u0002\u062c\u062d\u0005\u019e\u00d0\u0002\u062d\u062e\u0007A\u0002",
    "\u0002\u062e\u0636\u0003\u0002\u0002\u0002\u062f\u0630\u0007\u0004\u0002",
    "\u0002\u0630\u0631\u0005\u019e\u00d0\u0002\u0631\u0632\u0007J\u0002",
    "\u0002\u0632\u0633\u0005\u019e\u00d0\u0002\u0633\u0634\u0007A\u0002",
    "\u0002\u0634\u0636\u0003\u0002\u0002\u0002\u0635\u062b\u0003\u0002\u0002",
    "\u0002\u0635\u062f\u0003\u0002\u0002\u0002\u0636\u011d\u0003\u0002\u0002",
    "\u0002\u0637\u0638\u0007+\u0002\u0002\u0638\u0639\u0007;\u0002\u0002",
    "\u0639\u063a\u0005\u019e\u00d0\u0002\u063a\u063b\u0007<\u0002\u0002",
    "\u063b\u063c\u0005\u0120\u0091\u0002\u063c\u011f\u0003\u0002\u0002\u0002",
    "\u063d\u0641\u0007=\u0002\u0002\u063e\u0640\u0005\u0122\u0092\u0002",
    "\u063f\u063e\u0003\u0002\u0002\u0002\u0640\u0643\u0003\u0002\u0002\u0002",
    "\u0641\u063f\u0003\u0002\u0002\u0002\u0641\u0642\u0003\u0002\u0002\u0002",
    "\u0642\u0647\u0003\u0002\u0002\u0002\u0643\u0641\u0003\u0002\u0002\u0002",
    "\u0644\u0646\u0005\u0126\u0094\u0002\u0645\u0644\u0003\u0002\u0002\u0002",
    "\u0646\u0649\u0003\u0002\u0002\u0002\u0647\u0645\u0003\u0002\u0002\u0002",
    "\u0647\u0648\u0003\u0002\u0002\u0002\u0648\u064a\u0003\u0002\u0002\u0002",
    "\u0649\u0647\u0003\u0002\u0002\u0002\u064a\u064b\u0007>\u0002\u0002",
    "\u064b\u0121\u0003\u0002\u0002\u0002\u064c\u064d\u0005\u0124\u0093\u0002",
    "\u064d\u064e\u0005\u00fe\u0080\u0002\u064e\u0123\u0003\u0002\u0002\u0002",
    "\u064f\u0653\u0005\u0126\u0094\u0002\u0650\u0652\u0005\u0126\u0094\u0002",
    "\u0651\u0650\u0003\u0002\u0002\u0002\u0652\u0655\u0003\u0002\u0002\u0002",
    "\u0653\u0651\u0003\u0002\u0002\u0002\u0653\u0654\u0003\u0002\u0002\u0002",
    "\u0654\u0125\u0003\u0002\u0002\u0002\u0655\u0653\u0003\u0002\u0002\u0002",
    "\u0656\u0657\u0007\b\u0002\u0002\u0657\u0658\u0005\u019c\u00cf\u0002",
    "\u0658\u0659\u0007J\u0002\u0002\u0659\u0661\u0003\u0002\u0002\u0002",
    "\u065a\u065b\u0007\b\u0002\u0002\u065b\u065c\u0005\u0128\u0095\u0002",
    "\u065c\u065d\u0007J\u0002\u0002\u065d\u0661\u0003\u0002\u0002\u0002",
    "\u065e\u065f\u0007\u000e\u0002\u0002\u065f\u0661\u0007J\u0002\u0002",
    "\u0660\u0656\u0003\u0002\u0002\u0002\u0660\u065a\u0003\u0002\u0002\u0002",
    "\u0660\u065e\u0003\u0002\u0002\u0002\u0661\u0127\u0003\u0002\u0002\u0002",
    "\u0662\u0663\u0007h\u0002\u0002\u0663\u0129\u0003\u0002\u0002\u0002",
    "\u0664\u0665\u00074\u0002\u0002\u0665\u0666\u0007;\u0002\u0002\u0666",
    "\u0667\u0005\u019e\u00d0\u0002\u0667\u0668\u0007<\u0002\u0002\u0668",
    "\u0669\u0005\u0106\u0084\u0002\u0669\u012b\u0003\u0002\u0002\u0002\u066a",
    "\u066b\u00074\u0002\u0002\u066b\u066c\u0007;\u0002\u0002\u066c\u066d",
    "\u0005\u019e\u00d0\u0002\u066d\u066e\u0007<\u0002\u0002\u066e\u066f",
    "\u0005\u0108\u0085\u0002\u066f\u012d\u0003\u0002\u0002\u0002\u0670\u0671",
    "\u0007\u000f\u0002\u0002\u0671\u0672\u0005\u0106\u0084\u0002\u0672\u0673",
    "\u00074\u0002\u0002\u0673\u0674\u0007;\u0002\u0002\u0674\u0675\u0005",
    "\u019e\u00d0\u0002\u0675\u0676\u0007<\u0002\u0002\u0676\u0677\u0007",
    "A\u0002\u0002\u0677\u012f\u0003\u0002\u0002\u0002\u0678\u067b\u0005",
    "\u0134\u009b\u0002\u0679\u067b\u0005\u013e\u00a0\u0002\u067a\u0678\u0003",
    "\u0002\u0002\u0002\u067a\u0679\u0003\u0002\u0002\u0002\u067b\u0131\u0003",
    "\u0002\u0002\u0002\u067c\u067f\u0005\u0136\u009c\u0002\u067d\u067f\u0005",
    "\u0140\u00a1\u0002\u067e\u067c\u0003\u0002\u0002\u0002\u067e\u067d\u0003",
    "\u0002\u0002\u0002\u067f\u0133\u0003\u0002\u0002\u0002\u0680\u0681\u0007",
    "\u0017\u0002\u0002\u0681\u0683\u0007;\u0002\u0002\u0682\u0684\u0005",
    "\u0138\u009d\u0002\u0683\u0682\u0003\u0002\u0002\u0002\u0683\u0684\u0003",
    "\u0002\u0002\u0002\u0684\u0685\u0003\u0002\u0002\u0002\u0685\u0687\u0007",
    "A\u0002\u0002\u0686\u0688\u0005\u019e\u00d0\u0002\u0687\u0686\u0003",
    "\u0002\u0002\u0002\u0687\u0688\u0003\u0002\u0002\u0002\u0688\u0689\u0003",
    "\u0002\u0002\u0002\u0689\u068b\u0007A\u0002\u0002\u068a\u068c\u0005",
    "\u013a\u009e\u0002\u068b\u068a\u0003\u0002\u0002\u0002\u068b\u068c\u0003",
    "\u0002\u0002\u0002\u068c\u068d\u0003\u0002\u0002\u0002\u068d\u068e\u0007",
    "<\u0002\u0002\u068e\u068f\u0005\u0106\u0084\u0002\u068f\u0135\u0003",
    "\u0002\u0002\u0002\u0690\u0691\u0007\u0017\u0002\u0002\u0691\u0693\u0007",
    ";\u0002\u0002\u0692\u0694\u0005\u0138\u009d\u0002\u0693\u0692\u0003",
    "\u0002\u0002\u0002\u0693\u0694\u0003\u0002\u0002\u0002\u0694\u0695\u0003",
    "\u0002\u0002\u0002\u0695\u0697\u0007A\u0002\u0002\u0696\u0698\u0005",
    "\u019e\u00d0\u0002\u0697\u0696\u0003\u0002\u0002\u0002\u0697\u0698\u0003",
    "\u0002\u0002\u0002\u0698\u0699\u0003\u0002\u0002\u0002\u0699\u069b\u0007",
    "A\u0002\u0002\u069a\u069c\u0005\u013a\u009e\u0002\u069b\u069a\u0003",
    "\u0002\u0002\u0002\u069b\u069c\u0003\u0002\u0002\u0002\u069c\u069d\u0003",
    "\u0002\u0002\u0002\u069d\u069e\u0007<\u0002\u0002\u069e\u069f\u0005",
    "\u0108\u0085\u0002\u069f\u0137\u0003\u0002\u0002\u0002\u06a0\u06a3\u0005",
    "\u013c\u009f\u0002\u06a1\u06a3\u0005\u0104\u0083\u0002\u06a2\u06a0\u0003",
    "\u0002\u0002\u0002\u06a2\u06a1\u0003\u0002\u0002\u0002\u06a3\u0139\u0003",
    "\u0002\u0002\u0002\u06a4\u06a5\u0005\u013c\u009f\u0002\u06a5\u013b\u0003",
    "\u0002\u0002\u0002\u06a6\u06ab\u0005\u0114\u008b\u0002\u06a7\u06a8\u0007",
    "B\u0002\u0002\u06a8\u06aa\u0005\u0114\u008b\u0002\u06a9\u06a7\u0003",
    "\u0002\u0002\u0002\u06aa\u06ad\u0003\u0002\u0002\u0002\u06ab\u06a9\u0003",
    "\u0002\u0002\u0002\u06ab\u06ac\u0003\u0002\u0002\u0002\u06ac\u013d\u0003",
    "\u0002\u0002\u0002\u06ad\u06ab\u0003\u0002\u0002\u0002\u06ae\u06af\u0007",
    "\u0017\u0002\u0002\u06af\u06b3\u0007;\u0002\u0002\u06b0\u06b2\u0005",
    "\u009cO\u0002\u06b1\u06b0\u0003\u0002\u0002\u0002\u06b2\u06b5\u0003",
    "\u0002\u0002\u0002\u06b3\u06b1\u0003\u0002\u0002\u0002\u06b3\u06b4\u0003",
    "\u0002\u0002\u0002\u06b4\u06b6\u0003\u0002\u0002\u0002\u06b5\u06b3\u0003",
    "\u0002\u0002\u0002\u06b6\u06b7\u0005t;\u0002\u06b7\u06b8\u0005p9\u0002",
    "\u06b8\u06b9\u0007J\u0002\u0002\u06b9\u06ba\u0005\u019e\u00d0\u0002",
    "\u06ba\u06bb\u0007<\u0002\u0002\u06bb\u06bc\u0005\u0106\u0084\u0002",
    "\u06bc\u013f\u0003\u0002\u0002\u0002\u06bd\u06be\u0007\u0017\u0002\u0002",
    "\u06be\u06c2\u0007;\u0002\u0002\u06bf\u06c1\u0005\u009cO\u0002\u06c0",
    "\u06bf\u0003\u0002\u0002\u0002\u06c1\u06c4\u0003\u0002\u0002\u0002\u06c2",
    "\u06c0\u0003\u0002\u0002\u0002\u06c2\u06c3\u0003\u0002\u0002\u0002\u06c3",
    "\u06c5\u0003\u0002\u0002\u0002\u06c4\u06c2\u0003\u0002\u0002\u0002\u06c5",
    "\u06c6\u0005t;\u0002\u06c6\u06c7\u0005p9\u0002\u06c7\u06c8\u0007J\u0002",
    "\u0002\u06c8\u06c9\u0005\u019e\u00d0\u0002\u06c9\u06ca\u0007<\u0002",
    "\u0002\u06ca\u06cb\u0005\u0108\u0085\u0002\u06cb\u0141\u0003\u0002\u0002",
    "\u0002\u06cc\u06ce\u0007\u0006\u0002\u0002\u06cd\u06cf\u0007h\u0002",
    "\u0002\u06ce\u06cd\u0003\u0002\u0002\u0002\u06ce\u06cf\u0003\u0002\u0002",
    "\u0002\u06cf\u06d0\u0003\u0002\u0002\u0002\u06d0\u06d1\u0007A\u0002",
    "\u0002\u06d1\u0143\u0003\u0002\u0002\u0002\u06d2\u06d4\u0007\r\u0002",
    "\u0002\u06d3\u06d5\u0007h\u0002\u0002\u06d4\u06d3\u0003\u0002\u0002",
    "\u0002\u06d4\u06d5\u0003\u0002\u0002\u0002\u06d5\u06d6\u0003\u0002\u0002",
    "\u0002\u06d6\u06d7\u0007A\u0002\u0002\u06d7\u0145\u0003\u0002\u0002",
    "\u0002\u06d8\u06da\u0007&\u0002\u0002\u06d9\u06db\u0005\u019e\u00d0",
    "\u0002\u06da\u06d9\u0003\u0002\u0002\u0002\u06da\u06db\u0003\u0002\u0002",
    "\u0002\u06db\u06dc\u0003\u0002\u0002\u0002\u06dc\u06dd\u0007A\u0002",
    "\u0002\u06dd\u0147\u0003\u0002\u0002\u0002\u06de\u06df\u0007.\u0002",
    "\u0002\u06df\u06e0\u0005\u019e\u00d0\u0002\u06e0\u06e1\u0007A\u0002",
    "\u0002\u06e1\u0149\u0003\u0002\u0002\u0002\u06e2\u06e3\u0007,\u0002",
    "\u0002\u06e3\u06e4\u0007;\u0002\u0002\u06e4\u06e5\u0005\u019e\u00d0",
    "\u0002\u06e5\u06e6\u0007<\u0002\u0002\u06e6\u06e7\u0005\u00fc\u007f",
    "\u0002\u06e7\u014b\u0003\u0002\u0002\u0002\u06e8\u06e9\u00071\u0002",
    "\u0002\u06e9\u06ea\u0005\u00fc\u007f\u0002\u06ea\u06eb\u0005\u014e\u00a8",
    "\u0002\u06eb\u06f5\u0003\u0002\u0002\u0002\u06ec\u06ed\u00071\u0002",
    "\u0002\u06ed\u06ef\u0005\u00fc\u007f\u0002\u06ee\u06f0\u0005\u014e\u00a8",
    "\u0002\u06ef\u06ee\u0003\u0002\u0002\u0002\u06ef\u06f0\u0003\u0002\u0002",
    "\u0002\u06f0\u06f1\u0003\u0002\u0002\u0002\u06f1\u06f2\u0005\u0156\u00ac",
    "\u0002\u06f2\u06f5\u0003\u0002\u0002\u0002\u06f3\u06f5\u0005\u0158\u00ad",
    "\u0002\u06f4\u06e8\u0003\u0002\u0002\u0002\u06f4\u06ec\u0003\u0002\u0002",
    "\u0002\u06f4\u06f3\u0003\u0002\u0002\u0002\u06f5\u014d\u0003\u0002\u0002",
    "\u0002\u06f6\u06fa\u0005\u0150\u00a9\u0002\u06f7\u06f9\u0005\u0150\u00a9",
    "\u0002\u06f8\u06f7\u0003\u0002\u0002\u0002\u06f9\u06fc\u0003\u0002\u0002",
    "\u0002\u06fa\u06f8\u0003\u0002\u0002\u0002\u06fa\u06fb\u0003\u0002\u0002",
    "\u0002\u06fb\u014f\u0003\u0002\u0002\u0002\u06fc\u06fa\u0003\u0002\u0002",
    "\u0002\u06fd\u06fe\u0007\t\u0002\u0002\u06fe\u06ff\u0007;\u0002\u0002",
    "\u06ff\u0700\u0005\u0152\u00aa\u0002\u0700\u0701\u0007<\u0002\u0002",
    "\u0701\u0702\u0005\u00fc\u007f\u0002\u0702\u0151\u0003\u0002\u0002\u0002",
    "\u0703\u0705\u0005\u009cO\u0002\u0704\u0703\u0003\u0002\u0002\u0002",
    "\u0705\u0708\u0003\u0002\u0002\u0002\u0706\u0704\u0003\u0002\u0002\u0002",
    "\u0706\u0707\u0003\u0002\u0002\u0002\u0707\u0709\u0003\u0002\u0002\u0002",
    "\u0708\u0706\u0003\u0002\u0002\u0002\u0709\u070a\u0005\u0154\u00ab\u0002",
    "\u070a\u070b\u0005p9\u0002\u070b\u0153\u0003\u0002\u0002\u0002\u070c",
    "\u0711\u0005|?\u0002\u070d\u070e\u0007X\u0002\u0002\u070e\u0710\u0005",
    "\u0010\t\u0002\u070f\u070d\u0003\u0002\u0002\u0002\u0710\u0713\u0003",
    "\u0002\u0002\u0002\u0711\u070f\u0003\u0002\u0002\u0002\u0711\u0712\u0003",
    "\u0002\u0002\u0002\u0712\u0155\u0003\u0002\u0002\u0002\u0713\u0711\u0003",
    "\u0002\u0002\u0002\u0714\u0715\u0007\u0015\u0002\u0002\u0715\u0716\u0005",
    "\u00fc\u007f\u0002\u0716\u0157\u0003\u0002\u0002\u0002\u0717\u0718\u0007",
    "1\u0002\u0002\u0718\u0719\u0005\u015a\u00ae\u0002\u0719\u071b\u0005",
    "\u00fc\u007f\u0002\u071a\u071c\u0005\u014e\u00a8\u0002\u071b\u071a\u0003",
    "\u0002\u0002\u0002\u071b\u071c\u0003\u0002\u0002\u0002\u071c\u071e\u0003",
    "\u0002\u0002\u0002\u071d\u071f\u0005\u0156\u00ac\u0002\u071e\u071d\u0003",
    "\u0002\u0002\u0002\u071e\u071f\u0003\u0002\u0002\u0002\u071f\u0159\u0003",
    "\u0002\u0002\u0002\u0720\u0721\u0007;\u0002\u0002\u0721\u0723\u0005",
    "\u015c\u00af\u0002\u0722\u0724\u0007A\u0002\u0002\u0723\u0722\u0003",
    "\u0002\u0002\u0002\u0723\u0724\u0003\u0002\u0002\u0002\u0724\u0725\u0003",
    "\u0002\u0002\u0002\u0725\u0726\u0007<\u0002\u0002\u0726\u015b\u0003",
    "\u0002\u0002\u0002\u0727\u072c\u0005\u015e\u00b0\u0002\u0728\u0729\u0007",
    "A\u0002\u0002\u0729\u072b\u0005\u015e\u00b0\u0002\u072a\u0728\u0003",
    "\u0002\u0002\u0002\u072b\u072e\u0003\u0002\u0002\u0002\u072c\u072a\u0003",
    "\u0002\u0002\u0002\u072c\u072d\u0003\u0002\u0002\u0002\u072d\u015d\u0003",
    "\u0002\u0002\u0002\u072e\u072c\u0003\u0002\u0002\u0002\u072f\u0731\u0005",
    "\u009cO\u0002\u0730\u072f\u0003\u0002\u0002\u0002\u0731\u0734\u0003",
    "\u0002\u0002\u0002\u0732\u0730\u0003\u0002\u0002\u0002\u0732\u0733\u0003",
    "\u0002\u0002\u0002\u0733\u0735\u0003\u0002\u0002\u0002\u0734\u0732\u0003",
    "\u0002\u0002\u0002\u0735\u0736\u0005t;\u0002\u0736\u0737\u0005p9\u0002",
    "\u0737\u0738\u0007D\u0002\u0002\u0738\u0739\u0005\u019e\u00d0\u0002",
    "\u0739\u015f\u0003\u0002\u0002\u0002\u073a\u073d\u0005\u016e\u00b8\u0002",
    "\u073b\u073d\u0005\u0196\u00cc\u0002\u073c\u073a\u0003\u0002\u0002\u0002",
    "\u073c\u073b\u0003\u0002\u0002\u0002\u073d\u0741\u0003\u0002\u0002\u0002",
    "\u073e\u0740\u0005\u0168\u00b5\u0002\u073f\u073e\u0003\u0002\u0002\u0002",
    "\u0740\u0743\u0003\u0002\u0002\u0002\u0741\u073f\u0003\u0002\u0002\u0002",
    "\u0741\u0742\u0003\u0002\u0002\u0002\u0742\u0161\u0003\u0002\u0002\u0002",
    "\u0743\u0741\u0003\u0002\u0002\u0002\u0744\u0762\u0005\u0002\u0002\u0002",
    "\u0745\u074a\u00056\u001c\u0002\u0746\u0747\u0007?\u0002\u0002\u0747",
    "\u0749\u0007@\u0002\u0002\u0748\u0746\u0003\u0002\u0002\u0002\u0749",
    "\u074c\u0003\u0002\u0002\u0002\u074a\u0748\u0003\u0002\u0002\u0002\u074a",
    "\u074b\u0003\u0002\u0002\u0002\u074b\u074d\u0003\u0002\u0002\u0002\u074c",
    "\u074a\u0003\u0002\u0002\u0002\u074d\u074e\u0007C\u0002\u0002\u074e",
    "\u074f\u0007\u000b\u0002\u0002\u074f\u0762\u0003\u0002\u0002\u0002\u0750",
    "\u0751\u00072\u0002\u0002\u0751\u0752\u0007C\u0002\u0002\u0752\u0762",
    "\u0007\u000b\u0002\u0002\u0753\u0762\u0007-\u0002\u0002\u0754\u0755",
    "\u00056\u001c\u0002\u0755\u0756\u0007C\u0002\u0002\u0756\u0757\u0007",
    "-\u0002\u0002\u0757\u0762\u0003\u0002\u0002\u0002\u0758\u0759\u0007",
    ";\u0002\u0002\u0759\u075a\u0005\u019e\u00d0\u0002\u075a\u075b\u0007",
    "<\u0002\u0002\u075b\u0762\u0003\u0002\u0002\u0002\u075c\u0762\u0005",
    "\u0174\u00bb\u0002\u075d\u0762\u0005\u017c\u00bf\u0002\u075e\u0762\u0005",
    "\u0182\u00c2\u0002\u075f\u0762\u0005\u0188\u00c5\u0002\u0760\u0762\u0005",
    "\u0190\u00c9\u0002\u0761\u0744\u0003\u0002\u0002\u0002\u0761\u0745\u0003",
    "\u0002\u0002\u0002\u0761\u0750\u0003\u0002\u0002\u0002\u0761\u0753\u0003",
    "\u0002\u0002\u0002\u0761\u0754\u0003\u0002\u0002\u0002\u0761\u0758\u0003",
    "\u0002\u0002\u0002\u0761\u075c\u0003\u0002\u0002\u0002\u0761\u075d\u0003",
    "\u0002\u0002\u0002\u0761\u075e\u0003\u0002\u0002\u0002\u0761\u075f\u0003",
    "\u0002\u0002\u0002\u0761\u0760\u0003\u0002\u0002\u0002\u0762\u0163\u0003",
    "\u0002\u0002\u0002\u0763\u0764\u0003\u0002\u0002\u0002\u0764\u0165\u0003",
    "\u0002\u0002\u0002\u0765\u0782\u0005\u0002\u0002\u0002\u0766\u076b\u0005",
    "6\u001c\u0002\u0767\u0768\u0007?\u0002\u0002\u0768\u076a\u0007@\u0002",
    "\u0002\u0769\u0767\u0003\u0002\u0002\u0002\u076a\u076d\u0003\u0002\u0002",
    "\u0002\u076b\u0769\u0003\u0002\u0002\u0002\u076b\u076c\u0003\u0002\u0002",
    "\u0002\u076c\u076e\u0003\u0002\u0002\u0002\u076d\u076b\u0003\u0002\u0002",
    "\u0002\u076e\u076f\u0007C\u0002\u0002\u076f\u0770\u0007\u000b\u0002",
    "\u0002\u0770\u0782\u0003\u0002\u0002\u0002\u0771\u0772\u00072\u0002",
    "\u0002\u0772\u0773\u0007C\u0002\u0002\u0773\u0782\u0007\u000b\u0002",
    "\u0002\u0774\u0782\u0007-\u0002\u0002\u0775\u0776\u00056\u001c\u0002",
    "\u0776\u0777\u0007C\u0002\u0002\u0777\u0778\u0007-\u0002\u0002\u0778",
    "\u0782\u0003\u0002\u0002\u0002\u0779\u077a\u0007;\u0002\u0002\u077a",
    "\u077b\u0005\u019e\u00d0\u0002\u077b\u077c\u0007<\u0002\u0002\u077c",
    "\u0782\u0003\u0002\u0002\u0002\u077d\u0782\u0005\u0174\u00bb\u0002\u077e",
    "\u0782\u0005\u017c\u00bf\u0002\u077f\u0782\u0005\u0188\u00c5\u0002\u0780",
    "\u0782\u0005\u0190\u00c9\u0002\u0781\u0765\u0003\u0002\u0002\u0002\u0781",
    "\u0766\u0003\u0002\u0002\u0002\u0781\u0771\u0003\u0002\u0002\u0002\u0781",
    "\u0774\u0003\u0002\u0002\u0002\u0781\u0775\u0003\u0002\u0002\u0002\u0781",
    "\u0779\u0003\u0002\u0002\u0002\u0781\u077d\u0003\u0002\u0002\u0002\u0781",
    "\u077e\u0003\u0002\u0002\u0002\u0781\u077f\u0003\u0002\u0002\u0002\u0781",
    "\u0780\u0003\u0002\u0002\u0002\u0782\u0167\u0003\u0002\u0002\u0002\u0783",
    "\u0789\u0005\u0176\u00bc\u0002\u0784\u0789\u0005\u017e\u00c0\u0002\u0785",
    "\u0789\u0005\u0184\u00c3\u0002\u0786\u0789\u0005\u018a\u00c6\u0002\u0787",
    "\u0789\u0005\u0192\u00ca\u0002\u0788\u0783\u0003\u0002\u0002\u0002\u0788",
    "\u0784\u0003\u0002\u0002\u0002\u0788\u0785\u0003\u0002\u0002\u0002\u0788",
    "\u0786\u0003\u0002\u0002\u0002\u0788\u0787\u0003\u0002\u0002\u0002\u0789",
    "\u0169\u0003\u0002\u0002\u0002\u078a\u078b\u0003\u0002\u0002\u0002\u078b",
    "\u016b\u0003\u0002\u0002\u0002\u078c\u0791\u0005\u0176\u00bc\u0002\u078d",
    "\u0791\u0005\u017e\u00c0\u0002\u078e\u0791\u0005\u018a\u00c6\u0002\u078f",
    "\u0791\u0005\u0192\u00ca\u0002\u0790\u078c\u0003\u0002\u0002\u0002\u0790",
    "\u078d\u0003\u0002\u0002\u0002\u0790\u078e\u0003\u0002\u0002\u0002\u0790",
    "\u078f\u0003\u0002\u0002\u0002\u0791\u016d\u0003\u0002\u0002\u0002\u0792",
    "\u07bb\u0005\u0002\u0002\u0002\u0793\u0798\u00056\u001c\u0002\u0794",
    "\u0795\u0007?\u0002\u0002\u0795\u0797\u0007@\u0002\u0002\u0796\u0794",
    "\u0003\u0002\u0002\u0002\u0797\u079a\u0003\u0002\u0002\u0002\u0798\u0796",
    "\u0003\u0002\u0002\u0002\u0798\u0799\u0003\u0002\u0002\u0002\u0799\u079b",
    "\u0003\u0002\u0002\u0002\u079a\u0798\u0003\u0002\u0002\u0002\u079b\u079c",
    "\u0007C\u0002\u0002\u079c\u079d\u0007\u000b\u0002\u0002\u079d\u07bb",
    "\u0003\u0002\u0002\u0002\u079e\u07a3\u0005v<\u0002\u079f\u07a0\u0007",
    "?\u0002\u0002\u07a0\u07a2\u0007@\u0002\u0002\u07a1\u079f\u0003\u0002",
    "\u0002\u0002\u07a2\u07a5\u0003\u0002\u0002\u0002\u07a3\u07a1\u0003\u0002",
    "\u0002\u0002\u07a3\u07a4\u0003\u0002\u0002\u0002\u07a4\u07a6\u0003\u0002",
    "\u0002\u0002\u07a5\u07a3\u0003\u0002\u0002\u0002\u07a6\u07a7\u0007C",
    "\u0002\u0002\u07a7\u07a8\u0007\u000b\u0002\u0002\u07a8\u07bb\u0003\u0002",
    "\u0002\u0002\u07a9\u07aa\u00072\u0002\u0002\u07aa\u07ab\u0007C\u0002",
    "\u0002\u07ab\u07bb\u0007\u000b\u0002\u0002\u07ac\u07bb\u0007-\u0002",
    "\u0002\u07ad\u07ae\u00056\u001c\u0002\u07ae\u07af\u0007C\u0002\u0002",
    "\u07af\u07b0\u0007-\u0002\u0002\u07b0\u07bb\u0003\u0002\u0002\u0002",
    "\u07b1\u07b2\u0007;\u0002\u0002\u07b2\u07b3\u0005\u019e\u00d0\u0002",
    "\u07b3\u07b4\u0007<\u0002\u0002\u07b4\u07bb\u0003\u0002\u0002\u0002",
    "\u07b5\u07bb\u0005\u0178\u00bd\u0002\u07b6\u07bb\u0005\u0180\u00c1\u0002",
    "\u07b7\u07bb\u0005\u0186\u00c4\u0002\u07b8\u07bb\u0005\u018c\u00c7\u0002",
    "\u07b9\u07bb\u0005\u0194\u00cb\u0002\u07ba\u0792\u0003\u0002\u0002\u0002",
    "\u07ba\u0793\u0003\u0002\u0002\u0002\u07ba\u079e\u0003\u0002\u0002\u0002",
    "\u07ba\u07a9\u0003\u0002\u0002\u0002\u07ba\u07ac\u0003\u0002\u0002\u0002",
    "\u07ba\u07ad\u0003\u0002\u0002\u0002\u07ba\u07b1\u0003\u0002\u0002\u0002",
    "\u07ba\u07b5\u0003\u0002\u0002\u0002\u07ba\u07b6\u0003\u0002\u0002\u0002",
    "\u07ba\u07b7\u0003\u0002\u0002\u0002\u07ba\u07b8\u0003\u0002\u0002\u0002",
    "\u07ba\u07b9\u0003\u0002\u0002\u0002\u07bb\u016f\u0003\u0002\u0002\u0002",
    "\u07bc\u07bd\u0003\u0002\u0002\u0002\u07bd\u0171\u0003\u0002\u0002\u0002",
    "\u07be\u07e6\u0005\u0002\u0002\u0002\u07bf\u07c4\u00056\u001c\u0002",
    "\u07c0\u07c1\u0007?\u0002\u0002\u07c1\u07c3\u0007@\u0002\u0002\u07c2",
    "\u07c0\u0003\u0002\u0002\u0002\u07c3\u07c6\u0003\u0002\u0002\u0002\u07c4",
    "\u07c2\u0003\u0002\u0002\u0002\u07c4\u07c5\u0003\u0002\u0002\u0002\u07c5",
    "\u07c7\u0003\u0002\u0002\u0002\u07c6\u07c4\u0003\u0002\u0002\u0002\u07c7",
    "\u07c8\u0007C\u0002\u0002\u07c8\u07c9\u0007\u000b\u0002\u0002\u07c9",
    "\u07e6\u0003\u0002\u0002\u0002\u07ca\u07cf\u0005v<\u0002\u07cb\u07cc",
    "\u0007?\u0002\u0002\u07cc\u07ce\u0007@\u0002\u0002\u07cd\u07cb\u0003",
    "\u0002\u0002\u0002\u07ce\u07d1\u0003\u0002\u0002\u0002\u07cf\u07cd\u0003",
    "\u0002\u0002\u0002\u07cf\u07d0\u0003\u0002\u0002\u0002\u07d0\u07d2\u0003",
    "\u0002\u0002\u0002\u07d1\u07cf\u0003\u0002\u0002\u0002\u07d2\u07d3\u0007",
    "C\u0002\u0002\u07d3\u07d4\u0007\u000b\u0002\u0002\u07d4\u07e6\u0003",
    "\u0002\u0002\u0002\u07d5\u07d6\u00072\u0002\u0002\u07d6\u07d7\u0007",
    "C\u0002\u0002\u07d7\u07e6\u0007\u000b\u0002\u0002\u07d8\u07e6\u0007",
    "-\u0002\u0002\u07d9\u07da\u00056\u001c\u0002\u07da\u07db\u0007C\u0002",
    "\u0002\u07db\u07dc\u0007-\u0002\u0002\u07dc\u07e6\u0003\u0002\u0002",
    "\u0002\u07dd\u07de\u0007;\u0002\u0002\u07de\u07df\u0005\u019e\u00d0",
    "\u0002\u07df\u07e0\u0007<\u0002\u0002\u07e0\u07e6\u0003\u0002\u0002",
    "\u0002\u07e1\u07e6\u0005\u0178\u00bd\u0002\u07e2\u07e6\u0005\u0180\u00c1",
    "\u0002\u07e3\u07e6\u0005\u018c\u00c7\u0002\u07e4\u07e6\u0005\u0194\u00cb",
    "\u0002\u07e5\u07be\u0003\u0002\u0002\u0002\u07e5\u07bf\u0003\u0002\u0002",
    "\u0002\u07e5\u07ca\u0003\u0002\u0002\u0002\u07e5\u07d5\u0003\u0002\u0002",
    "\u0002\u07e5\u07d8\u0003\u0002\u0002\u0002\u07e5\u07d9\u0003\u0002\u0002",
    "\u0002\u07e5\u07dd\u0003\u0002\u0002\u0002\u07e5\u07e1\u0003\u0002\u0002",
    "\u0002\u07e5\u07e2\u0003\u0002\u0002\u0002\u07e5\u07e3\u0003\u0002\u0002",
    "\u0002\u07e5\u07e4\u0003\u0002\u0002\u0002\u07e6\u0173\u0003\u0002\u0002",
    "\u0002\u07e7\u07e9\u0007!\u0002\u0002\u07e8\u07ea\u0005*\u0016\u0002",
    "\u07e9\u07e8\u0003\u0002\u0002\u0002\u07e9\u07ea\u0003\u0002\u0002\u0002",
    "\u07ea\u07ee\u0003\u0002\u0002\u0002\u07eb\u07ed\u0005\u00e6t\u0002",
    "\u07ec\u07eb\u0003\u0002\u0002\u0002\u07ed\u07f0\u0003\u0002\u0002\u0002",
    "\u07ee\u07ec\u0003\u0002\u0002\u0002\u07ee\u07ef\u0003\u0002\u0002\u0002",
    "\u07ef\u07f1\u0003\u0002\u0002\u0002\u07f0\u07ee\u0003\u0002\u0002\u0002",
    "\u07f1\u07fc\u0007h\u0002\u0002\u07f2\u07f6\u0007C\u0002\u0002\u07f3",
    "\u07f5\u0005\u00e6t\u0002\u07f4\u07f3\u0003\u0002\u0002\u0002\u07f5",
    "\u07f8\u0003\u0002\u0002\u0002\u07f6\u07f4\u0003\u0002\u0002\u0002\u07f6",
    "\u07f7\u0003\u0002\u0002\u0002\u07f7\u07f9\u0003\u0002\u0002\u0002\u07f8",
    "\u07f6\u0003\u0002\u0002\u0002\u07f9\u07fb\u0007h\u0002\u0002\u07fa",
    "\u07f2\u0003\u0002\u0002\u0002\u07fb\u07fe\u0003\u0002\u0002\u0002\u07fc",
    "\u07fa\u0003\u0002\u0002\u0002\u07fc\u07fd\u0003\u0002\u0002\u0002\u07fd",
    "\u0800\u0003\u0002\u0002\u0002\u07fe\u07fc\u0003\u0002\u0002\u0002\u07ff",
    "\u0801\u0005\u017a\u00be\u0002\u0800\u07ff\u0003\u0002\u0002\u0002\u0800",
    "\u0801\u0003\u0002\u0002\u0002\u0801\u0802\u0003\u0002\u0002\u0002\u0802",
    "\u0804\u0007;\u0002\u0002\u0803\u0805\u0005\u018e\u00c8\u0002\u0804",
    "\u0803\u0003\u0002\u0002\u0002\u0804\u0805\u0003\u0002\u0002\u0002\u0805",
    "\u0806\u0003\u0002\u0002\u0002\u0806\u0808\u0007<\u0002\u0002\u0807",
    "\u0809\u0005b2\u0002\u0808\u0807\u0003\u0002\u0002\u0002\u0808\u0809",
    "\u0003\u0002\u0002\u0002\u0809\u083b\u0003\u0002\u0002\u0002\u080a\u080b",
    "\u0005:\u001e\u0002\u080b\u080c\u0007C\u0002\u0002\u080c\u080e\u0007",
    "!\u0002\u0002\u080d\u080f\u0005*\u0016\u0002\u080e\u080d\u0003\u0002",
    "\u0002\u0002\u080e\u080f\u0003\u0002\u0002\u0002\u080f\u0813\u0003\u0002",
    "\u0002\u0002\u0810\u0812\u0005\u00e6t\u0002\u0811\u0810\u0003\u0002",
    "\u0002\u0002\u0812\u0815\u0003\u0002\u0002\u0002\u0813\u0811\u0003\u0002",
    "\u0002\u0002\u0813\u0814\u0003\u0002\u0002\u0002\u0814\u0816\u0003\u0002",
    "\u0002\u0002\u0815\u0813\u0003\u0002\u0002\u0002\u0816\u0818\u0007h",
    "\u0002\u0002\u0817\u0819\u0005\u017a\u00be\u0002\u0818\u0817\u0003\u0002",
    "\u0002\u0002\u0818\u0819\u0003\u0002\u0002\u0002\u0819\u081a\u0003\u0002",
    "\u0002\u0002\u081a\u081c\u0007;\u0002\u0002\u081b\u081d\u0005\u018e",
    "\u00c8\u0002\u081c\u081b\u0003\u0002\u0002\u0002\u081c\u081d\u0003\u0002",
    "\u0002\u0002\u081d\u081e\u0003\u0002\u0002\u0002\u081e\u0820\u0007<",
    "\u0002\u0002\u081f\u0821\u0005b2\u0002\u0820\u081f\u0003\u0002\u0002",
    "\u0002\u0820\u0821\u0003\u0002\u0002\u0002\u0821\u083b\u0003\u0002\u0002",
    "\u0002\u0822\u0823\u0005\u0160\u00b1\u0002\u0823\u0824\u0007C\u0002",
    "\u0002\u0824\u0826\u0007!\u0002\u0002\u0825\u0827\u0005*\u0016\u0002",
    "\u0826\u0825\u0003\u0002\u0002\u0002\u0826\u0827\u0003\u0002\u0002\u0002",
    "\u0827\u082b\u0003\u0002\u0002\u0002\u0828\u082a\u0005\u00e6t\u0002",
    "\u0829\u0828\u0003\u0002\u0002\u0002\u082a\u082d\u0003\u0002\u0002\u0002",
    "\u082b\u0829\u0003\u0002\u0002\u0002\u082b\u082c\u0003\u0002\u0002\u0002",
    "\u082c\u082e\u0003\u0002\u0002\u0002\u082d\u082b\u0003\u0002\u0002\u0002",
    "\u082e\u0830\u0007h\u0002\u0002\u082f\u0831\u0005\u017a\u00be\u0002",
    "\u0830\u082f\u0003\u0002\u0002\u0002\u0830\u0831\u0003\u0002\u0002\u0002",
    "\u0831\u0832\u0003\u0002\u0002\u0002\u0832\u0834\u0007;\u0002\u0002",
    "\u0833\u0835\u0005\u018e\u00c8\u0002\u0834\u0833\u0003\u0002\u0002\u0002",
    "\u0834\u0835\u0003\u0002\u0002\u0002\u0835\u0836\u0003\u0002\u0002\u0002",
    "\u0836\u0838\u0007<\u0002\u0002\u0837\u0839\u0005b2\u0002\u0838\u0837",
    "\u0003\u0002\u0002\u0002\u0838\u0839\u0003\u0002\u0002\u0002\u0839\u083b",
    "\u0003\u0002\u0002\u0002\u083a\u07e7\u0003\u0002\u0002\u0002\u083a\u080a",
    "\u0003\u0002\u0002\u0002\u083a\u0822\u0003\u0002\u0002\u0002\u083b\u0175",
    "\u0003\u0002\u0002\u0002\u083c\u083d\u0007C\u0002\u0002\u083d\u083f",
    "\u0007!\u0002\u0002\u083e\u0840\u0005*\u0016\u0002\u083f\u083e\u0003",
    "\u0002\u0002\u0002\u083f\u0840\u0003\u0002\u0002\u0002\u0840\u0844\u0003",
    "\u0002\u0002\u0002\u0841\u0843\u0005\u00e6t\u0002\u0842\u0841\u0003",
    "\u0002\u0002\u0002\u0843\u0846\u0003\u0002\u0002\u0002\u0844\u0842\u0003",
    "\u0002\u0002\u0002\u0844\u0845\u0003\u0002\u0002\u0002\u0845\u0847\u0003",
    "\u0002\u0002\u0002\u0846\u0844\u0003\u0002\u0002\u0002\u0847\u0849\u0007",
    "h\u0002\u0002\u0848\u084a\u0005\u017a\u00be\u0002\u0849\u0848\u0003",
    "\u0002\u0002\u0002\u0849\u084a\u0003\u0002\u0002\u0002\u084a\u084b\u0003",
    "\u0002\u0002\u0002\u084b\u084d\u0007;\u0002\u0002\u084c\u084e\u0005",
    "\u018e\u00c8\u0002\u084d\u084c\u0003\u0002\u0002\u0002\u084d\u084e\u0003",
    "\u0002\u0002\u0002\u084e\u084f\u0003\u0002\u0002\u0002\u084f\u0851\u0007",
    "<\u0002\u0002\u0850\u0852\u0005b2\u0002\u0851\u0850\u0003\u0002\u0002",
    "\u0002\u0851\u0852\u0003\u0002\u0002\u0002\u0852\u0177\u0003\u0002\u0002",
    "\u0002\u0853\u0855\u0007!\u0002\u0002\u0854\u0856\u0005*\u0016\u0002",
    "\u0855\u0854\u0003\u0002\u0002\u0002\u0855\u0856\u0003\u0002\u0002\u0002",
    "\u0856\u085a\u0003\u0002\u0002\u0002\u0857\u0859\u0005\u00e6t\u0002",
    "\u0858\u0857\u0003\u0002\u0002\u0002\u0859\u085c\u0003\u0002\u0002\u0002",
    "\u085a\u0858\u0003\u0002\u0002\u0002\u085a\u085b\u0003\u0002\u0002\u0002",
    "\u085b\u085d\u0003\u0002\u0002\u0002\u085c\u085a\u0003\u0002\u0002\u0002",
    "\u085d\u0868\u0007h\u0002\u0002\u085e\u0862\u0007C\u0002\u0002\u085f",
    "\u0861\u0005\u00e6t\u0002\u0860\u085f\u0003\u0002\u0002\u0002\u0861",
    "\u0864\u0003\u0002\u0002\u0002\u0862\u0860\u0003\u0002\u0002\u0002\u0862",
    "\u0863\u0003\u0002\u0002\u0002\u0863\u0865\u0003\u0002\u0002\u0002\u0864",
    "\u0862\u0003\u0002\u0002\u0002\u0865\u0867\u0007h\u0002\u0002\u0866",
    "\u085e\u0003\u0002\u0002\u0002\u0867\u086a\u0003\u0002\u0002\u0002\u0868",
    "\u0866\u0003\u0002\u0002\u0002\u0868\u0869\u0003\u0002\u0002\u0002\u0869",
    "\u086c\u0003\u0002\u0002\u0002\u086a\u0868\u0003\u0002\u0002\u0002\u086b",
    "\u086d\u0005\u017a\u00be\u0002\u086c\u086b\u0003\u0002\u0002\u0002\u086c",
    "\u086d\u0003\u0002\u0002\u0002\u086d\u086e\u0003\u0002\u0002\u0002\u086e",
    "\u0870\u0007;\u0002\u0002\u086f\u0871\u0005\u018e\u00c8\u0002\u0870",
    "\u086f\u0003\u0002\u0002\u0002\u0870\u0871\u0003\u0002\u0002\u0002\u0871",
    "\u0872\u0003\u0002\u0002\u0002\u0872\u0874\u0007<\u0002\u0002\u0873",
    "\u0875\u0005b2\u0002\u0874\u0873\u0003\u0002\u0002\u0002\u0874\u0875",
    "\u0003\u0002\u0002\u0002\u0875\u088f\u0003\u0002\u0002\u0002\u0876\u0877",
    "\u0005:\u001e\u0002\u0877\u0878\u0007C\u0002\u0002\u0878\u087a\u0007",
    "!\u0002\u0002\u0879\u087b\u0005*\u0016\u0002\u087a\u0879\u0003\u0002",
    "\u0002\u0002\u087a\u087b\u0003\u0002\u0002\u0002\u087b\u087f\u0003\u0002",
    "\u0002\u0002\u087c\u087e\u0005\u00e6t\u0002\u087d\u087c\u0003\u0002",
    "\u0002\u0002\u087e\u0881\u0003\u0002\u0002\u0002\u087f\u087d\u0003\u0002",
    "\u0002\u0002\u087f\u0880\u0003\u0002\u0002\u0002\u0880\u0882\u0003\u0002",
    "\u0002\u0002\u0881\u087f\u0003\u0002\u0002\u0002\u0882\u0884\u0007h",
    "\u0002\u0002\u0883\u0885\u0005\u017a\u00be\u0002\u0884\u0883\u0003\u0002",
    "\u0002\u0002\u0884\u0885\u0003\u0002\u0002\u0002\u0885\u0886\u0003\u0002",
    "\u0002\u0002\u0886\u0888\u0007;\u0002\u0002\u0887\u0889\u0005\u018e",
    "\u00c8\u0002\u0888\u0887\u0003\u0002\u0002\u0002\u0888\u0889\u0003\u0002",
    "\u0002\u0002\u0889\u088a\u0003\u0002\u0002\u0002\u088a\u088c\u0007<",
    "\u0002\u0002\u088b\u088d\u0005b2\u0002\u088c\u088b\u0003\u0002\u0002",
    "\u0002\u088c\u088d\u0003\u0002\u0002\u0002\u088d\u088f\u0003\u0002\u0002",
    "\u0002\u088e\u0853\u0003\u0002\u0002\u0002\u088e\u0876\u0003\u0002\u0002",
    "\u0002\u088f\u0179\u0003\u0002\u0002\u0002\u0890\u0894\u0005*\u0016",
    "\u0002\u0891\u0892\u0007F\u0002\u0002\u0892\u0894\u0007E\u0002\u0002",
    "\u0893\u0890\u0003\u0002\u0002\u0002\u0893\u0891\u0003\u0002\u0002\u0002",
    "\u0894\u017b\u0003\u0002\u0002\u0002\u0895\u0896\u0005\u0160\u00b1\u0002",
    "\u0896\u0897\u0007C\u0002\u0002\u0897\u0898\u0007h\u0002\u0002\u0898",
    "\u08a3\u0003\u0002\u0002\u0002\u0899\u089a\u0007*\u0002\u0002\u089a",
    "\u089b\u0007C\u0002\u0002\u089b\u08a3\u0007h\u0002\u0002\u089c\u089d",
    "\u00056\u001c\u0002\u089d\u089e\u0007C\u0002\u0002\u089e\u089f\u0007",
    "*\u0002\u0002\u089f\u08a0\u0007C\u0002\u0002\u08a0\u08a1\u0007h\u0002",
    "\u0002\u08a1\u08a3\u0003\u0002\u0002\u0002\u08a2\u0895\u0003\u0002\u0002",
    "\u0002\u08a2\u0899\u0003\u0002\u0002\u0002\u08a2\u089c\u0003\u0002\u0002",
    "\u0002\u08a3\u017d\u0003\u0002\u0002\u0002\u08a4\u08a5\u0007C\u0002",
    "\u0002\u08a5\u08a6\u0007h\u0002\u0002\u08a6\u017f\u0003\u0002\u0002",
    "\u0002\u08a7\u08a8\u0007*\u0002\u0002\u08a8\u08a9\u0007C\u0002\u0002",
    "\u08a9\u08b1\u0007h\u0002\u0002\u08aa\u08ab\u00056\u001c\u0002\u08ab",
    "\u08ac\u0007C\u0002\u0002\u08ac\u08ad\u0007*\u0002\u0002\u08ad\u08ae",
    "\u0007C\u0002\u0002\u08ae\u08af\u0007h\u0002\u0002\u08af\u08b1\u0003",
    "\u0002\u0002\u0002\u08b0\u08a7\u0003\u0002\u0002\u0002\u08b0\u08aa\u0003",
    "\u0002\u0002\u0002\u08b1\u0181\u0003\u0002\u0002\u0002\u08b2\u08b3\u0005",
    ":\u001e\u0002\u08b3\u08b4\u0007?\u0002\u0002\u08b4\u08b5\u0005\u019e",
    "\u00d0\u0002\u08b5\u08b6\u0007@\u0002\u0002\u08b6\u08bd\u0003\u0002",
    "\u0002\u0002\u08b7\u08b8\u0005\u0166\u00b4\u0002\u08b8\u08b9\u0007?",
    "\u0002\u0002\u08b9\u08ba\u0005\u019e\u00d0\u0002\u08ba\u08bb\u0007@",
    "\u0002\u0002\u08bb\u08bd\u0003\u0002\u0002\u0002\u08bc\u08b2\u0003\u0002",
    "\u0002\u0002\u08bc\u08b7\u0003\u0002\u0002\u0002\u08bd\u08c5\u0003\u0002",
    "\u0002\u0002\u08be\u08bf\u0005\u0164\u00b3\u0002\u08bf\u08c0\u0007?",
    "\u0002\u0002\u08c0\u08c1\u0005\u019e\u00d0\u0002\u08c1\u08c2\u0007@",
    "\u0002\u0002\u08c2\u08c4\u0003\u0002\u0002\u0002\u08c3\u08be\u0003\u0002",
    "\u0002\u0002\u08c4\u08c7\u0003\u0002\u0002\u0002\u08c5\u08c3\u0003\u0002",
    "\u0002\u0002\u08c5\u08c6\u0003\u0002\u0002\u0002\u08c6\u0183\u0003\u0002",
    "\u0002\u0002\u08c7\u08c5\u0003\u0002\u0002\u0002\u08c8\u08c9\u0005\u016c",
    "\u00b7\u0002\u08c9\u08ca\u0007?\u0002\u0002\u08ca\u08cb\u0005\u019e",
    "\u00d0\u0002\u08cb\u08cc\u0007@\u0002\u0002\u08cc\u08d4\u0003\u0002",
    "\u0002\u0002\u08cd\u08ce\u0005\u016a\u00b6\u0002\u08ce\u08cf\u0007?",
    "\u0002\u0002\u08cf\u08d0\u0005\u019e\u00d0\u0002\u08d0\u08d1\u0007@",
    "\u0002\u0002\u08d1\u08d3\u0003\u0002\u0002\u0002\u08d2\u08cd\u0003\u0002",
    "\u0002\u0002\u08d3\u08d6\u0003\u0002\u0002\u0002\u08d4\u08d2\u0003\u0002",
    "\u0002\u0002\u08d4\u08d5\u0003\u0002\u0002\u0002\u08d5\u0185\u0003\u0002",
    "\u0002\u0002\u08d6\u08d4\u0003\u0002\u0002\u0002\u08d7\u08d8\u0005:",
    "\u001e\u0002\u08d8\u08d9\u0007?\u0002\u0002\u08d9\u08da\u0005\u019e",
    "\u00d0\u0002\u08da\u08db\u0007@\u0002\u0002\u08db\u08e2\u0003\u0002",
    "\u0002\u0002\u08dc\u08dd\u0005\u0172\u00ba\u0002\u08dd\u08de\u0007?",
    "\u0002\u0002\u08de\u08df\u0005\u019e\u00d0\u0002\u08df\u08e0\u0007@",
    "\u0002\u0002\u08e0\u08e2\u0003\u0002\u0002\u0002\u08e1\u08d7\u0003\u0002",
    "\u0002\u0002\u08e1\u08dc\u0003\u0002\u0002\u0002\u08e2\u08ea\u0003\u0002",
    "\u0002\u0002\u08e3\u08e4\u0005\u0170\u00b9\u0002\u08e4\u08e5\u0007?",
    "\u0002\u0002\u08e5\u08e6\u0005\u019e\u00d0\u0002\u08e6\u08e7\u0007@",
    "\u0002\u0002\u08e7\u08e9\u0003\u0002\u0002\u0002\u08e8\u08e3\u0003\u0002",
    "\u0002\u0002\u08e9\u08ec\u0003\u0002\u0002\u0002\u08ea\u08e8\u0003\u0002",
    "\u0002\u0002\u08ea\u08eb\u0003\u0002\u0002\u0002\u08eb\u0187\u0003\u0002",
    "\u0002\u0002\u08ec\u08ea\u0003\u0002\u0002\u0002\u08ed\u08ee\u0005<",
    "\u001f\u0002\u08ee\u08f0\u0007;\u0002\u0002\u08ef\u08f1\u0005\u018e",
    "\u00c8\u0002\u08f0\u08ef\u0003\u0002\u0002\u0002\u08f0\u08f1\u0003\u0002",
    "\u0002\u0002\u08f1\u08f2\u0003\u0002\u0002\u0002\u08f2\u08f3\u0007<",
    "\u0002\u0002\u08f3\u0932\u0003\u0002\u0002\u0002\u08f4\u08f5\u00056",
    "\u001c\u0002\u08f5\u08f7\u0007C\u0002\u0002\u08f6\u08f8\u0005*\u0016",
    "\u0002\u08f7\u08f6\u0003\u0002\u0002\u0002\u08f7\u08f8\u0003\u0002\u0002",
    "\u0002\u08f8\u08f9\u0003\u0002\u0002\u0002\u08f9\u08fa\u0007h\u0002",
    "\u0002\u08fa\u08fc\u0007;\u0002\u0002\u08fb\u08fd\u0005\u018e\u00c8",
    "\u0002\u08fc\u08fb\u0003\u0002\u0002\u0002\u08fc\u08fd\u0003\u0002\u0002",
    "\u0002\u08fd\u08fe\u0003\u0002\u0002\u0002\u08fe\u08ff\u0007<\u0002",
    "\u0002\u08ff\u0932\u0003\u0002\u0002\u0002\u0900\u0901\u0005:\u001e",
    "\u0002\u0901\u0903\u0007C\u0002\u0002\u0902\u0904\u0005*\u0016\u0002",
    "\u0903\u0902\u0003\u0002\u0002\u0002\u0903\u0904\u0003\u0002\u0002\u0002",
    "\u0904\u0905\u0003\u0002\u0002\u0002\u0905\u0906\u0007h\u0002\u0002",
    "\u0906\u0908\u0007;\u0002\u0002\u0907\u0909\u0005\u018e\u00c8\u0002",
    "\u0908\u0907\u0003\u0002\u0002\u0002\u0908\u0909\u0003\u0002\u0002\u0002",
    "\u0909\u090a\u0003\u0002\u0002\u0002\u090a\u090b\u0007<\u0002\u0002",
    "\u090b\u0932\u0003\u0002\u0002\u0002\u090c\u090d\u0005\u0160\u00b1\u0002",
    "\u090d\u090f\u0007C\u0002\u0002\u090e\u0910\u0005*\u0016\u0002\u090f",
    "\u090e\u0003\u0002\u0002\u0002\u090f\u0910\u0003\u0002\u0002\u0002\u0910",
    "\u0911\u0003\u0002\u0002\u0002\u0911\u0912\u0007h\u0002\u0002\u0912",
    "\u0914\u0007;\u0002\u0002\u0913\u0915\u0005\u018e\u00c8\u0002\u0914",
    "\u0913\u0003\u0002\u0002\u0002\u0914\u0915\u0003\u0002\u0002\u0002\u0915",
    "\u0916\u0003\u0002\u0002\u0002\u0916\u0917\u0007<\u0002\u0002\u0917",
    "\u0932\u0003\u0002\u0002\u0002\u0918\u0919\u0007*\u0002\u0002\u0919",
    "\u091b\u0007C\u0002\u0002\u091a\u091c\u0005*\u0016\u0002\u091b\u091a",
    "\u0003\u0002\u0002\u0002\u091b\u091c\u0003\u0002\u0002\u0002\u091c\u091d",
    "\u0003\u0002\u0002\u0002\u091d\u091e\u0007h\u0002\u0002\u091e\u0920",
    "\u0007;\u0002\u0002\u091f\u0921\u0005\u018e\u00c8\u0002\u0920\u091f",
    "\u0003\u0002\u0002\u0002\u0920\u0921\u0003\u0002\u0002\u0002\u0921\u0922",
    "\u0003\u0002\u0002\u0002\u0922\u0932\u0007<\u0002\u0002\u0923\u0924",
    "\u00056\u001c\u0002\u0924\u0925\u0007C\u0002\u0002\u0925\u0926\u0007",
    "*\u0002\u0002\u0926\u0928\u0007C\u0002\u0002\u0927\u0929\u0005*\u0016",
    "\u0002\u0928\u0927\u0003\u0002\u0002\u0002\u0928\u0929\u0003\u0002\u0002",
    "\u0002\u0929\u092a\u0003\u0002\u0002\u0002\u092a\u092b\u0007h\u0002",
    "\u0002\u092b\u092d\u0007;\u0002\u0002\u092c\u092e\u0005\u018e\u00c8",
    "\u0002\u092d\u092c\u0003\u0002\u0002\u0002\u092d\u092e\u0003\u0002\u0002",
    "\u0002\u092e\u092f\u0003\u0002\u0002\u0002\u092f\u0930\u0007<\u0002",
    "\u0002\u0930\u0932\u0003\u0002\u0002\u0002\u0931\u08ed\u0003\u0002\u0002",
    "\u0002\u0931\u08f4\u0003\u0002\u0002\u0002\u0931\u0900\u0003\u0002\u0002",
    "\u0002\u0931\u090c\u0003\u0002\u0002\u0002\u0931\u0918\u0003\u0002\u0002",
    "\u0002\u0931\u0923\u0003\u0002\u0002\u0002\u0932\u0189\u0003\u0002\u0002",
    "\u0002\u0933\u0935\u0007C\u0002\u0002\u0934\u0936\u0005*\u0016\u0002",
    "\u0935\u0934\u0003\u0002\u0002\u0002\u0935\u0936\u0003\u0002\u0002\u0002",
    "\u0936\u0937\u0003\u0002\u0002\u0002\u0937\u0938\u0007h\u0002\u0002",
    "\u0938\u093a\u0007;\u0002\u0002\u0939\u093b\u0005\u018e\u00c8\u0002",
    "\u093a\u0939\u0003\u0002\u0002\u0002\u093a\u093b\u0003\u0002\u0002\u0002",
    "\u093b\u093c\u0003\u0002\u0002\u0002\u093c\u093d\u0007<\u0002\u0002",
    "\u093d\u018b\u0003\u0002\u0002\u0002\u093e\u093f\u0005<\u001f\u0002",
    "\u093f\u0941\u0007;\u0002\u0002\u0940\u0942\u0005\u018e\u00c8\u0002",
    "\u0941\u0940\u0003\u0002\u0002\u0002\u0941\u0942\u0003\u0002\u0002\u0002",
    "\u0942\u0943\u0003\u0002\u0002\u0002\u0943\u0944\u0007<\u0002\u0002",
    "\u0944\u0977\u0003\u0002\u0002\u0002\u0945\u0946\u00056\u001c\u0002",
    "\u0946\u0948\u0007C\u0002\u0002\u0947\u0949\u0005*\u0016\u0002\u0948",
    "\u0947\u0003\u0002\u0002\u0002\u0948\u0949\u0003\u0002\u0002\u0002\u0949",
    "\u094a\u0003\u0002\u0002\u0002\u094a\u094b\u0007h\u0002\u0002\u094b",
    "\u094d\u0007;\u0002\u0002\u094c\u094e\u0005\u018e\u00c8\u0002\u094d",
    "\u094c\u0003\u0002\u0002\u0002\u094d\u094e\u0003\u0002\u0002\u0002\u094e",
    "\u094f\u0003\u0002\u0002\u0002\u094f\u0950\u0007<\u0002\u0002\u0950",
    "\u0977\u0003\u0002\u0002\u0002\u0951\u0952\u0005:\u001e\u0002\u0952",
    "\u0954\u0007C\u0002\u0002\u0953\u0955\u0005*\u0016\u0002\u0954\u0953",
    "\u0003\u0002\u0002\u0002\u0954\u0955\u0003\u0002\u0002\u0002\u0955\u0956",
    "\u0003\u0002\u0002\u0002\u0956\u0957\u0007h\u0002\u0002\u0957\u0959",
    "\u0007;\u0002\u0002\u0958\u095a\u0005\u018e\u00c8\u0002\u0959\u0958",
    "\u0003\u0002\u0002\u0002\u0959\u095a\u0003\u0002\u0002\u0002\u095a\u095b",
    "\u0003\u0002\u0002\u0002\u095b\u095c\u0007<\u0002\u0002\u095c\u0977",
    "\u0003\u0002\u0002\u0002\u095d\u095e\u0007*\u0002\u0002\u095e\u0960",
    "\u0007C\u0002\u0002\u095f\u0961\u0005*\u0016\u0002\u0960\u095f\u0003",
    "\u0002\u0002\u0002\u0960\u0961\u0003\u0002\u0002\u0002\u0961\u0962\u0003",
    "\u0002\u0002\u0002\u0962\u0963\u0007h\u0002\u0002\u0963\u0965\u0007",
    ";\u0002\u0002\u0964\u0966\u0005\u018e\u00c8\u0002\u0965\u0964\u0003",
    "\u0002\u0002\u0002\u0965\u0966\u0003\u0002\u0002\u0002\u0966\u0967\u0003",
    "\u0002\u0002\u0002\u0967\u0977\u0007<\u0002\u0002\u0968\u0969\u0005",
    "6\u001c\u0002\u0969\u096a\u0007C\u0002\u0002\u096a\u096b\u0007*\u0002",
    "\u0002\u096b\u096d\u0007C\u0002\u0002\u096c\u096e\u0005*\u0016\u0002",
    "\u096d\u096c\u0003\u0002\u0002\u0002\u096d\u096e\u0003\u0002\u0002\u0002",
    "\u096e\u096f\u0003\u0002\u0002\u0002\u096f\u0970\u0007h\u0002\u0002",
    "\u0970\u0972\u0007;\u0002\u0002\u0971\u0973\u0005\u018e\u00c8\u0002",
    "\u0972\u0971\u0003\u0002\u0002\u0002\u0972\u0973\u0003\u0002\u0002\u0002",
    "\u0973\u0974\u0003\u0002\u0002\u0002\u0974\u0975\u0007<\u0002\u0002",
    "\u0975\u0977\u0003\u0002\u0002\u0002\u0976\u093e\u0003\u0002\u0002\u0002",
    "\u0976\u0945\u0003\u0002\u0002\u0002\u0976\u0951\u0003\u0002\u0002\u0002",
    "\u0976\u095d\u0003\u0002\u0002\u0002\u0976\u0968\u0003\u0002\u0002\u0002",
    "\u0977\u018d\u0003\u0002\u0002\u0002\u0978\u097d\u0005\u019e\u00d0\u0002",
    "\u0979\u097a\u0007B\u0002\u0002\u097a\u097c\u0005\u019e\u00d0\u0002",
    "\u097b\u0979\u0003\u0002\u0002\u0002\u097c\u097f\u0003\u0002\u0002\u0002",
    "\u097d\u097b\u0003\u0002\u0002\u0002\u097d\u097e\u0003\u0002\u0002\u0002",
    "\u097e\u018f\u0003\u0002\u0002\u0002\u097f\u097d\u0003\u0002\u0002\u0002",
    "\u0980\u0981\u0005:\u001e\u0002\u0981\u0983\u0007\\\u0002\u0002\u0982",
    "\u0984\u0005*\u0016\u0002\u0983\u0982\u0003\u0002\u0002\u0002\u0983",
    "\u0984\u0003\u0002\u0002\u0002\u0984\u0985\u0003\u0002\u0002\u0002\u0985",
    "\u0986\u0007h\u0002\u0002\u0986\u09b0\u0003\u0002\u0002\u0002\u0987",
    "\u0988\u0005\f\u0007\u0002\u0988\u098a\u0007\\\u0002\u0002\u0989\u098b",
    "\u0005*\u0016\u0002\u098a\u0989\u0003\u0002\u0002\u0002\u098a\u098b",
    "\u0003\u0002\u0002\u0002\u098b\u098c\u0003\u0002\u0002\u0002\u098c\u098d",
    "\u0007h\u0002\u0002\u098d\u09b0\u0003\u0002\u0002\u0002\u098e\u098f",
    "\u0005\u0160\u00b1\u0002\u098f\u0991\u0007\\\u0002\u0002\u0990\u0992",
    "\u0005*\u0016\u0002\u0991\u0990\u0003\u0002\u0002\u0002\u0991\u0992",
    "\u0003\u0002\u0002\u0002\u0992\u0993\u0003\u0002\u0002\u0002\u0993\u0994",
    "\u0007h\u0002\u0002\u0994\u09b0\u0003\u0002\u0002\u0002\u0995\u0996",
    "\u0007*\u0002\u0002\u0996\u0998\u0007\\\u0002\u0002\u0997\u0999\u0005",
    "*\u0016\u0002\u0998\u0997\u0003\u0002\u0002\u0002\u0998\u0999\u0003",
    "\u0002\u0002\u0002\u0999\u099a\u0003\u0002\u0002\u0002\u099a\u09b0\u0007",
    "h\u0002\u0002\u099b\u099c\u00056\u001c\u0002\u099c\u099d\u0007C\u0002",
    "\u0002\u099d\u099e\u0007*\u0002\u0002\u099e\u09a0\u0007\\\u0002\u0002",
    "\u099f\u09a1\u0005*\u0016\u0002\u09a0\u099f\u0003\u0002\u0002\u0002",
    "\u09a0\u09a1\u0003\u0002\u0002\u0002\u09a1\u09a2\u0003\u0002\u0002\u0002",
    "\u09a2\u09a3\u0007h\u0002\u0002\u09a3\u09b0\u0003\u0002\u0002\u0002",
    "\u09a4\u09a5\u0005\u0010\t\u0002\u09a5\u09a7\u0007\\\u0002\u0002\u09a6",
    "\u09a8\u0005*\u0016\u0002\u09a7\u09a6\u0003\u0002\u0002\u0002\u09a7",
    "\u09a8\u0003\u0002\u0002\u0002\u09a8\u09a9\u0003\u0002\u0002\u0002\u09a9",
    "\u09aa\u0007!\u0002\u0002\u09aa\u09b0\u0003\u0002\u0002\u0002\u09ab",
    "\u09ac\u0005\u001e\u0010\u0002\u09ac\u09ad\u0007\\\u0002\u0002\u09ad",
    "\u09ae\u0007!\u0002\u0002\u09ae\u09b0\u0003\u0002\u0002\u0002\u09af",
    "\u0980\u0003\u0002\u0002\u0002\u09af\u0987\u0003\u0002\u0002\u0002\u09af",
    "\u098e\u0003\u0002\u0002\u0002\u09af\u0995\u0003\u0002\u0002\u0002\u09af",
    "\u099b\u0003\u0002\u0002\u0002\u09af\u09a4\u0003\u0002\u0002\u0002\u09af",
    "\u09ab\u0003\u0002\u0002\u0002\u09b0\u0191\u0003\u0002\u0002\u0002\u09b1",
    "\u09b3\u0007\\\u0002\u0002\u09b2\u09b4\u0005*\u0016\u0002\u09b3\u09b2",
    "\u0003\u0002\u0002\u0002\u09b3\u09b4\u0003\u0002\u0002\u0002\u09b4\u09b5",
    "\u0003\u0002\u0002\u0002\u09b5\u09b6\u0007h\u0002\u0002\u09b6\u0193",
    "\u0003\u0002\u0002\u0002\u09b7\u09b8\u0005:\u001e\u0002\u09b8\u09ba",
    "\u0007\\\u0002\u0002\u09b9\u09bb\u0005*\u0016\u0002\u09ba\u09b9\u0003",
    "\u0002\u0002\u0002\u09ba\u09bb\u0003\u0002\u0002\u0002\u09bb\u09bc\u0003",
    "\u0002\u0002\u0002\u09bc\u09bd\u0007h\u0002\u0002\u09bd\u09e0\u0003",
    "\u0002\u0002\u0002\u09be\u09bf\u0005\f\u0007\u0002\u09bf\u09c1\u0007",
    "\\\u0002\u0002\u09c0\u09c2\u0005*\u0016\u0002\u09c1\u09c0\u0003\u0002",
    "\u0002\u0002\u09c1\u09c2\u0003\u0002\u0002\u0002\u09c2\u09c3\u0003\u0002",
    "\u0002\u0002\u09c3\u09c4\u0007h\u0002\u0002\u09c4\u09e0\u0003\u0002",
    "\u0002\u0002\u09c5\u09c6\u0007*\u0002\u0002\u09c6\u09c8\u0007\\\u0002",
    "\u0002\u09c7\u09c9\u0005*\u0016\u0002\u09c8\u09c7\u0003\u0002\u0002",
    "\u0002\u09c8\u09c9\u0003\u0002\u0002\u0002\u09c9\u09ca\u0003\u0002\u0002",
    "\u0002\u09ca\u09e0\u0007h\u0002\u0002\u09cb\u09cc\u00056\u001c\u0002",
    "\u09cc\u09cd\u0007C\u0002\u0002\u09cd\u09ce\u0007*\u0002\u0002\u09ce",
    "\u09d0\u0007\\\u0002\u0002\u09cf\u09d1\u0005*\u0016\u0002\u09d0\u09cf",
    "\u0003\u0002\u0002\u0002\u09d0\u09d1\u0003\u0002\u0002\u0002\u09d1\u09d2",
    "\u0003\u0002\u0002\u0002\u09d2\u09d3\u0007h\u0002\u0002\u09d3\u09e0",
    "\u0003\u0002\u0002\u0002\u09d4\u09d5\u0005\u0010\t\u0002\u09d5\u09d7",
    "\u0007\\\u0002\u0002\u09d6\u09d8\u0005*\u0016\u0002\u09d7\u09d6\u0003",
    "\u0002\u0002\u0002\u09d7\u09d8\u0003\u0002\u0002\u0002\u09d8\u09d9\u0003",
    "\u0002\u0002\u0002\u09d9\u09da\u0007!\u0002\u0002\u09da\u09e0\u0003",
    "\u0002\u0002\u0002\u09db\u09dc\u0005\u001e\u0010\u0002\u09dc\u09dd\u0007",
    "\\\u0002\u0002\u09dd\u09de\u0007!\u0002\u0002\u09de\u09e0\u0003\u0002",
    "\u0002\u0002\u09df\u09b7\u0003\u0002\u0002\u0002\u09df\u09be\u0003\u0002",
    "\u0002\u0002\u09df\u09c5\u0003\u0002\u0002\u0002\u09df\u09cb\u0003\u0002",
    "\u0002\u0002\u09df\u09d4\u0003\u0002\u0002\u0002\u09df\u09db\u0003\u0002",
    "\u0002\u0002\u09e0\u0195\u0003\u0002\u0002\u0002\u09e1\u09e2\u0007!",
    "\u0002\u0002\u09e2\u09e3\u0005\u0004\u0003\u0002\u09e3\u09e5\u0005\u0198",
    "\u00cd\u0002\u09e4\u09e6\u0005 \u0011\u0002\u09e5\u09e4\u0003\u0002",
    "\u0002\u0002\u09e5\u09e6\u0003\u0002\u0002\u0002\u09e6\u09f8\u0003\u0002",
    "\u0002\u0002\u09e7\u09e8\u0007!\u0002\u0002\u09e8\u09e9\u0005\u000e",
    "\b\u0002\u09e9\u09eb\u0005\u0198\u00cd\u0002\u09ea\u09ec\u0005 \u0011",
    "\u0002\u09eb\u09ea\u0003\u0002\u0002\u0002\u09eb\u09ec\u0003\u0002\u0002",
    "\u0002\u09ec\u09f8\u0003\u0002\u0002\u0002\u09ed\u09ee\u0007!\u0002",
    "\u0002\u09ee\u09ef\u0005\u0004\u0003\u0002\u09ef\u09f0\u0005 \u0011",
    "\u0002\u09f0\u09f1\u0005\u00f8}\u0002\u09f1\u09f8\u0003\u0002\u0002",
    "\u0002\u09f2\u09f3\u0007!\u0002\u0002\u09f3\u09f4\u0005\u000e\b\u0002",
    "\u09f4\u09f5\u0005 \u0011\u0002\u09f5\u09f6\u0005\u00f8}\u0002\u09f6",
    "\u09f8\u0003\u0002\u0002\u0002\u09f7\u09e1\u0003\u0002\u0002\u0002\u09f7",
    "\u09e7\u0003\u0002\u0002\u0002\u09f7\u09ed\u0003\u0002\u0002\u0002\u09f7",
    "\u09f2\u0003\u0002\u0002\u0002\u09f8\u0197\u0003\u0002\u0002\u0002\u09f9",
    "\u09fd\u0005\u019a\u00ce\u0002\u09fa\u09fc\u0005\u019a\u00ce\u0002\u09fb",
    "\u09fa\u0003\u0002\u0002\u0002\u09fc\u09ff\u0003\u0002\u0002\u0002\u09fd",
    "\u09fb\u0003\u0002\u0002\u0002\u09fd\u09fe\u0003\u0002\u0002\u0002\u09fe",
    "\u0199\u0003\u0002\u0002\u0002\u09ff\u09fd\u0003\u0002\u0002\u0002\u0a00",
    "\u0a02\u0005\u00e6t\u0002\u0a01\u0a00\u0003\u0002\u0002\u0002\u0a02",
    "\u0a05\u0003\u0002\u0002\u0002\u0a03\u0a01\u0003\u0002\u0002\u0002\u0a03",
    "\u0a04\u0003\u0002\u0002\u0002\u0a04\u0a06\u0003\u0002\u0002\u0002\u0a05",
    "\u0a03\u0003\u0002\u0002\u0002\u0a06\u0a07\u0007?\u0002\u0002\u0a07",
    "\u0a08\u0005\u019e\u00d0\u0002\u0a08\u0a09\u0007@\u0002\u0002\u0a09",
    "\u019b\u0003\u0002\u0002\u0002\u0a0a\u0a0b\u0005\u019e\u00d0\u0002\u0a0b",
    "\u019d\u0003\u0002\u0002\u0002\u0a0c\u0a0f\u0005\u01a0\u00d1\u0002\u0a0d",
    "\u0a0f\u0005\u01a8\u00d5\u0002\u0a0e\u0a0c\u0003\u0002\u0002\u0002\u0a0e",
    "\u0a0d\u0003\u0002\u0002\u0002\u0a0f\u019f\u0003\u0002\u0002\u0002\u0a10",
    "\u0a11\u0005\u01a2\u00d2\u0002\u0a11\u0a12\u0007[\u0002\u0002\u0a12",
    "\u0a13\u0005\u01a6\u00d4\u0002\u0a13\u01a1\u0003\u0002\u0002\u0002\u0a14",
    "\u0a1f\u0007h\u0002\u0002\u0a15\u0a17\u0007;\u0002\u0002\u0a16\u0a18",
    "\u0005\u0096L\u0002\u0a17\u0a16\u0003\u0002\u0002\u0002\u0a17\u0a18",
    "\u0003\u0002\u0002\u0002\u0a18\u0a19\u0003\u0002\u0002\u0002\u0a19\u0a1f",
    "\u0007<\u0002\u0002\u0a1a\u0a1b\u0007;\u0002\u0002\u0a1b\u0a1c\u0005",
    "\u01a4\u00d3\u0002\u0a1c\u0a1d\u0007<\u0002\u0002\u0a1d\u0a1f\u0003",
    "\u0002\u0002\u0002\u0a1e\u0a14\u0003\u0002\u0002\u0002\u0a1e\u0a15\u0003",
    "\u0002\u0002\u0002\u0a1e\u0a1a\u0003\u0002\u0002\u0002\u0a1f\u01a3\u0003",
    "\u0002\u0002\u0002\u0a20\u0a25\u0007h\u0002\u0002\u0a21\u0a22\u0007",
    "B\u0002\u0002\u0a22\u0a24\u0007h\u0002\u0002\u0a23\u0a21\u0003\u0002",
    "\u0002\u0002\u0a24\u0a27\u0003\u0002\u0002\u0002\u0a25\u0a23\u0003\u0002",
    "\u0002\u0002\u0a25\u0a26\u0003\u0002\u0002\u0002\u0a26\u01a5\u0003\u0002",
    "\u0002\u0002\u0a27\u0a25\u0003\u0002\u0002\u0002\u0a28\u0a2b\u0005\u019e",
    "\u00d0\u0002\u0a29\u0a2b\u0005\u00fc\u007f\u0002\u0a2a\u0a28\u0003\u0002",
    "\u0002\u0002\u0a2a\u0a29\u0003\u0002\u0002\u0002\u0a2b\u01a7\u0003\u0002",
    "\u0002\u0002\u0a2c\u0a2f\u0005\u01b0\u00d9\u0002\u0a2d\u0a2f\u0005\u01aa",
    "\u00d6\u0002\u0a2e\u0a2c\u0003\u0002\u0002\u0002\u0a2e\u0a2d\u0003\u0002",
    "\u0002\u0002\u0a2f\u01a9\u0003\u0002\u0002\u0002\u0a30\u0a31\u0005\u01ac",
    "\u00d7\u0002\u0a31\u0a32\u0005\u01ae\u00d8\u0002\u0a32\u0a33\u0005\u019e",
    "\u00d0\u0002\u0a33\u01ab\u0003\u0002\u0002\u0002\u0a34\u0a38\u0005:",
    "\u001e\u0002\u0a35\u0a38\u0005\u017c\u00bf\u0002\u0a36\u0a38\u0005\u0182",
    "\u00c2\u0002\u0a37\u0a34\u0003\u0002\u0002\u0002\u0a37\u0a35\u0003\u0002",
    "\u0002\u0002\u0a37\u0a36\u0003\u0002\u0002\u0002\u0a38\u01ad\u0003\u0002",
    "\u0002\u0002\u0a39\u0a3a\t\u0005\u0002\u0002\u0a3a\u01af\u0003\u0002",
    "\u0002\u0002\u0a3b\u0a43\u0005\u01b2\u00da\u0002\u0a3c\u0a3d\u0005\u01b2",
    "\u00da\u0002\u0a3d\u0a3e\u0007I\u0002\u0002\u0a3e\u0a3f\u0005\u019e",
    "\u00d0\u0002\u0a3f\u0a40\u0007J\u0002\u0002\u0a40\u0a41\u0005\u01b0",
    "\u00d9\u0002\u0a41\u0a43\u0003\u0002\u0002\u0002\u0a42\u0a3b\u0003\u0002",
    "\u0002\u0002\u0a42\u0a3c\u0003\u0002\u0002\u0002\u0a43\u01b1\u0003\u0002",
    "\u0002\u0002\u0a44\u0a45\b\u00da\u0001\u0002\u0a45\u0a46\u0005\u01b4",
    "\u00db\u0002\u0a46\u0a4c\u0003\u0002\u0002\u0002\u0a47\u0a48\f\u0003",
    "\u0002\u0002\u0a48\u0a49\u0007P\u0002\u0002\u0a49\u0a4b\u0005\u01b4",
    "\u00db\u0002\u0a4a\u0a47\u0003\u0002\u0002\u0002\u0a4b\u0a4e\u0003\u0002",
    "\u0002\u0002\u0a4c\u0a4a\u0003\u0002\u0002\u0002\u0a4c\u0a4d\u0003\u0002",
    "\u0002\u0002\u0a4d\u01b3\u0003\u0002\u0002\u0002\u0a4e\u0a4c\u0003\u0002",
    "\u0002\u0002\u0a4f\u0a50\b\u00db\u0001\u0002\u0a50\u0a51\u0005\u01b6",
    "\u00dc\u0002\u0a51\u0a57\u0003\u0002\u0002\u0002\u0a52\u0a53\f\u0003",
    "\u0002\u0002\u0a53\u0a54\u0007O\u0002\u0002\u0a54\u0a56\u0005\u01b6",
    "\u00dc\u0002\u0a55\u0a52\u0003\u0002\u0002\u0002\u0a56\u0a59\u0003\u0002",
    "\u0002\u0002\u0a57\u0a55\u0003\u0002\u0002\u0002\u0a57\u0a58\u0003\u0002",
    "\u0002\u0002\u0a58\u01b5\u0003\u0002\u0002\u0002\u0a59\u0a57\u0003\u0002",
    "\u0002\u0002\u0a5a\u0a5b\b\u00dc\u0001\u0002\u0a5b\u0a5c\u0005\u01b8",
    "\u00dd\u0002\u0a5c\u0a62\u0003\u0002\u0002\u0002\u0a5d\u0a5e\f\u0003",
    "\u0002\u0002\u0a5e\u0a5f\u0007X\u0002\u0002\u0a5f\u0a61\u0005\u01b8",
    "\u00dd\u0002\u0a60\u0a5d\u0003\u0002\u0002\u0002\u0a61\u0a64\u0003\u0002",
    "\u0002\u0002\u0a62\u0a60\u0003\u0002\u0002\u0002\u0a62\u0a63\u0003\u0002",
    "\u0002\u0002\u0a63\u01b7\u0003\u0002\u0002\u0002\u0a64\u0a62\u0003\u0002",
    "\u0002\u0002\u0a65\u0a66\b\u00dd\u0001\u0002\u0a66\u0a67\u0005\u01ba",
    "\u00de\u0002\u0a67\u0a6d\u0003\u0002\u0002\u0002\u0a68\u0a69\f\u0003",
    "\u0002\u0002\u0a69\u0a6a\u0007Y\u0002\u0002\u0a6a\u0a6c\u0005\u01ba",
    "\u00de\u0002\u0a6b\u0a68\u0003\u0002\u0002\u0002\u0a6c\u0a6f\u0003\u0002",
    "\u0002\u0002\u0a6d\u0a6b\u0003\u0002\u0002\u0002\u0a6d\u0a6e\u0003\u0002",
    "\u0002\u0002\u0a6e\u01b9\u0003\u0002\u0002\u0002\u0a6f\u0a6d\u0003\u0002",
    "\u0002\u0002\u0a70\u0a71\b\u00de\u0001\u0002\u0a71\u0a72\u0005\u01bc",
    "\u00df\u0002\u0a72\u0a78\u0003\u0002\u0002\u0002\u0a73\u0a74\f\u0003",
    "\u0002\u0002\u0a74\u0a75\u0007W\u0002\u0002\u0a75\u0a77\u0005\u01bc",
    "\u00df\u0002\u0a76\u0a73\u0003\u0002\u0002\u0002\u0a77\u0a7a\u0003\u0002",
    "\u0002\u0002\u0a78\u0a76\u0003\u0002\u0002\u0002\u0a78\u0a79\u0003\u0002",
    "\u0002\u0002\u0a79\u01bb\u0003\u0002\u0002\u0002\u0a7a\u0a78\u0003\u0002",
    "\u0002\u0002\u0a7b\u0a7c\b\u00df\u0001\u0002\u0a7c\u0a7d\u0005\u01be",
    "\u00e0\u0002\u0a7d\u0a86\u0003\u0002\u0002\u0002\u0a7e\u0a7f\f\u0004",
    "\u0002\u0002\u0a7f\u0a80\u0007K\u0002\u0002\u0a80\u0a85\u0005\u01be",
    "\u00e0\u0002\u0a81\u0a82\f\u0003\u0002\u0002\u0a82\u0a83\u0007N\u0002",
    "\u0002\u0a83\u0a85\u0005\u01be\u00e0\u0002\u0a84\u0a7e\u0003\u0002\u0002",
    "\u0002\u0a84\u0a81\u0003\u0002\u0002\u0002\u0a85\u0a88\u0003\u0002\u0002",
    "\u0002\u0a86\u0a84\u0003\u0002\u0002\u0002\u0a86\u0a87\u0003\u0002\u0002",
    "\u0002\u0a87\u01bd\u0003\u0002\u0002\u0002\u0a88\u0a86\u0003\u0002\u0002",
    "\u0002\u0a89\u0a8a\b\u00e0\u0001\u0002\u0a8a\u0a8b\u0005\u01c0\u00e1",
    "\u0002\u0a8b\u0a9d\u0003\u0002\u0002\u0002\u0a8c\u0a8d\f\u0007\u0002",
    "\u0002\u0a8d\u0a8e\u0007F\u0002\u0002\u0a8e\u0a9c\u0005\u01c0\u00e1",
    "\u0002\u0a8f\u0a90\f\u0006\u0002\u0002\u0a90\u0a91\u0007E\u0002\u0002",
    "\u0a91\u0a9c\u0005\u01c0\u00e1\u0002\u0a92\u0a93\f\u0005\u0002\u0002",
    "\u0a93\u0a94\u0007L\u0002\u0002\u0a94\u0a9c\u0005\u01c0\u00e1\u0002",
    "\u0a95\u0a96\f\u0004\u0002\u0002\u0a96\u0a97\u0007M\u0002\u0002\u0a97",
    "\u0a9c\u0005\u01c0\u00e1\u0002\u0a98\u0a99\f\u0003\u0002\u0002\u0a99",
    "\u0a9a\u0007\u001c\u0002\u0002\u0a9a\u0a9c\u0005\f\u0007\u0002\u0a9b",
    "\u0a8c\u0003\u0002\u0002\u0002\u0a9b\u0a8f\u0003\u0002\u0002\u0002\u0a9b",
    "\u0a92\u0003\u0002\u0002\u0002\u0a9b\u0a95\u0003\u0002\u0002\u0002\u0a9b",
    "\u0a98\u0003\u0002\u0002\u0002\u0a9c\u0a9f\u0003\u0002\u0002\u0002\u0a9d",
    "\u0a9b\u0003\u0002\u0002\u0002\u0a9d\u0a9e\u0003\u0002\u0002\u0002\u0a9e",
    "\u01bf\u0003\u0002\u0002\u0002\u0a9f\u0a9d\u0003\u0002\u0002\u0002\u0aa0",
    "\u0aa1\b\u00e1\u0001\u0002\u0aa1\u0aa2\u0005\u01c2\u00e2\u0002\u0aa2",
    "\u0ab2\u0003\u0002\u0002\u0002\u0aa3\u0aa4\f\u0005\u0002\u0002\u0aa4",
    "\u0aa5\u0007F\u0002\u0002\u0aa5\u0aa6\u0007F\u0002\u0002\u0aa6\u0ab1",
    "\u0005\u01c2\u00e2\u0002\u0aa7\u0aa8\f\u0004\u0002\u0002\u0aa8\u0aa9",
    "\u0007E\u0002\u0002\u0aa9\u0aaa\u0007E\u0002\u0002\u0aaa\u0ab1\u0005",
    "\u01c2\u00e2\u0002\u0aab\u0aac\f\u0003\u0002\u0002\u0aac\u0aad\u0007",
    "E\u0002\u0002\u0aad\u0aae\u0007E\u0002\u0002\u0aae\u0aaf\u0007E\u0002",
    "\u0002\u0aaf\u0ab1\u0005\u01c2\u00e2\u0002\u0ab0\u0aa3\u0003\u0002\u0002",
    "\u0002\u0ab0\u0aa7\u0003\u0002\u0002\u0002\u0ab0\u0aab\u0003\u0002\u0002",
    "\u0002\u0ab1\u0ab4\u0003\u0002\u0002\u0002\u0ab2\u0ab0\u0003\u0002\u0002",
    "\u0002\u0ab2\u0ab3\u0003\u0002\u0002\u0002\u0ab3\u01c1\u0003\u0002\u0002",
    "\u0002\u0ab4\u0ab2\u0003\u0002\u0002\u0002\u0ab5\u0ab6\b\u00e2\u0001",
    "\u0002\u0ab6\u0ab7\u0005\u01c4\u00e3\u0002\u0ab7\u0ac0\u0003\u0002\u0002",
    "\u0002\u0ab8\u0ab9\f\u0004\u0002\u0002\u0ab9\u0aba\u0007S\u0002\u0002",
    "\u0aba\u0abf\u0005\u01c4\u00e3\u0002\u0abb\u0abc\f\u0003\u0002\u0002",
    "\u0abc\u0abd\u0007T\u0002\u0002\u0abd\u0abf\u0005\u01c4\u00e3\u0002",
    "\u0abe\u0ab8\u0003\u0002\u0002\u0002\u0abe\u0abb\u0003\u0002\u0002\u0002",
    "\u0abf\u0ac2\u0003\u0002\u0002\u0002\u0ac0\u0abe\u0003\u0002\u0002\u0002",
    "\u0ac0\u0ac1\u0003\u0002\u0002\u0002\u0ac1\u01c3\u0003\u0002\u0002\u0002",
    "\u0ac2\u0ac0\u0003\u0002\u0002\u0002\u0ac3\u0ac4\b\u00e3\u0001\u0002",
    "\u0ac4\u0ac5\u0005\u01c6\u00e4\u0002\u0ac5\u0ad1\u0003\u0002\u0002\u0002",
    "\u0ac6\u0ac7\f\u0005\u0002\u0002\u0ac7\u0ac8\u0007U\u0002\u0002\u0ac8",
    "\u0ad0\u0005\u01c6\u00e4\u0002\u0ac9\u0aca\f\u0004\u0002\u0002\u0aca",
    "\u0acb\u0007V\u0002\u0002\u0acb\u0ad0\u0005\u01c6\u00e4\u0002\u0acc",
    "\u0acd\f\u0003\u0002\u0002\u0acd\u0ace\u0007Z\u0002\u0002\u0ace\u0ad0",
    "\u0005\u01c6\u00e4\u0002\u0acf\u0ac6\u0003\u0002\u0002\u0002\u0acf\u0ac9",
    "\u0003\u0002\u0002\u0002\u0acf\u0acc\u0003\u0002\u0002\u0002\u0ad0\u0ad3",
    "\u0003\u0002\u0002\u0002\u0ad1\u0acf\u0003\u0002\u0002\u0002\u0ad1\u0ad2",
    "\u0003\u0002\u0002\u0002\u0ad2\u01c5\u0003\u0002\u0002\u0002\u0ad3\u0ad1",
    "\u0003\u0002\u0002\u0002\u0ad4\u0adc\u0005\u01c8\u00e5\u0002\u0ad5\u0adc",
    "\u0005\u01ca\u00e6\u0002\u0ad6\u0ad7\u0007S\u0002\u0002\u0ad7\u0adc",
    "\u0005\u01c6\u00e4\u0002\u0ad8\u0ad9\u0007T\u0002\u0002\u0ad9\u0adc",
    "\u0005\u01c6\u00e4\u0002\u0ada\u0adc\u0005\u01cc\u00e7\u0002\u0adb\u0ad4",
    "\u0003\u0002\u0002\u0002\u0adb\u0ad5\u0003\u0002\u0002\u0002\u0adb\u0ad6",
    "\u0003\u0002\u0002\u0002\u0adb\u0ad8\u0003\u0002\u0002\u0002\u0adb\u0ada",
    "\u0003\u0002\u0002\u0002\u0adc\u01c7\u0003\u0002\u0002\u0002\u0add\u0ade",
    "\u0007Q\u0002\u0002\u0ade\u0adf\u0005\u01c6\u00e4\u0002\u0adf\u01c9",
    "\u0003\u0002\u0002\u0002\u0ae0\u0ae1\u0007R\u0002\u0002\u0ae1\u0ae2",
    "\u0005\u01c6\u00e4\u0002\u0ae2\u01cb\u0003\u0002\u0002\u0002\u0ae3\u0aea",
    "\u0005\u01ce\u00e8\u0002\u0ae4\u0ae5\u0007H\u0002\u0002\u0ae5\u0aea",
    "\u0005\u01c6\u00e4\u0002\u0ae6\u0ae7\u0007G\u0002\u0002\u0ae7\u0aea",
    "\u0005\u01c6\u00e4\u0002\u0ae8\u0aea\u0005\u01d8\u00ed\u0002\u0ae9\u0ae3",
    "\u0003\u0002\u0002\u0002\u0ae9\u0ae4\u0003\u0002\u0002\u0002\u0ae9\u0ae6",
    "\u0003\u0002\u0002\u0002\u0ae9\u0ae8\u0003\u0002\u0002\u0002\u0aea\u01cd",
    "\u0003\u0002\u0002\u0002\u0aeb\u0aee\u0005\u0160\u00b1\u0002\u0aec\u0aee",
    "\u0005:\u001e\u0002\u0aed\u0aeb\u0003\u0002\u0002\u0002\u0aed\u0aec",
    "\u0003\u0002\u0002\u0002\u0aee\u0af3\u0003\u0002\u0002\u0002\u0aef\u0af2",
    "\u0005\u01d2\u00ea\u0002\u0af0\u0af2\u0005\u01d6\u00ec\u0002\u0af1\u0aef",
    "\u0003\u0002\u0002\u0002\u0af1\u0af0\u0003\u0002\u0002\u0002\u0af2\u0af5",
    "\u0003\u0002\u0002\u0002\u0af3\u0af1\u0003\u0002\u0002\u0002\u0af3\u0af4",
    "\u0003\u0002\u0002\u0002\u0af4\u01cf\u0003\u0002\u0002\u0002\u0af5\u0af3",
    "\u0003\u0002\u0002\u0002\u0af6\u0af7\u0005\u01ce\u00e8\u0002\u0af7\u0af8",
    "\u0007Q\u0002\u0002\u0af8\u01d1\u0003\u0002\u0002\u0002\u0af9\u0afa",
    "\u0007Q\u0002\u0002\u0afa\u01d3\u0003\u0002\u0002\u0002\u0afb\u0afc",
    "\u0005\u01ce\u00e8\u0002\u0afc\u0afd\u0007R\u0002\u0002\u0afd\u01d5",
    "\u0003\u0002\u0002\u0002\u0afe\u0aff\u0007R\u0002\u0002\u0aff\u01d7",
    "\u0003\u0002\u0002\u0002\u0b00\u0b01\u0007;\u0002\u0002\u0b01\u0b02",
    "\u0005\u0004\u0003\u0002\u0b02\u0b03\u0007<\u0002\u0002\u0b03\u0b04",
    "\u0005\u01c6\u00e4\u0002\u0b04\u0b1c\u0003\u0002\u0002\u0002\u0b05\u0b06",
    "\u0007;\u0002\u0002\u0b06\u0b0a\u0005\f\u0007\u0002\u0b07\u0b09\u0005",
    "(\u0015\u0002\u0b08\u0b07\u0003\u0002\u0002\u0002\u0b09\u0b0c\u0003",
    "\u0002\u0002\u0002\u0b0a\u0b08\u0003\u0002\u0002\u0002\u0b0a\u0b0b\u0003",
    "\u0002\u0002\u0002\u0b0b\u0b0d\u0003\u0002\u0002\u0002\u0b0c\u0b0a\u0003",
    "\u0002\u0002\u0002\u0b0d\u0b0e\u0007<\u0002\u0002\u0b0e\u0b0f\u0005",
    "\u01cc\u00e7\u0002\u0b0f\u0b1c\u0003\u0002\u0002\u0002\u0b10\u0b11\u0007",
    ";\u0002\u0002\u0b11\u0b15\u0005\f\u0007\u0002\u0b12\u0b14\u0005(\u0015",
    "\u0002\u0b13\u0b12\u0003\u0002\u0002\u0002\u0b14\u0b17\u0003\u0002\u0002",
    "\u0002\u0b15\u0b13\u0003\u0002\u0002\u0002\u0b15\u0b16\u0003\u0002\u0002",
    "\u0002\u0b16\u0b18\u0003\u0002\u0002\u0002\u0b17\u0b15\u0003\u0002\u0002",
    "\u0002\u0b18\u0b19\u0007<\u0002\u0002\u0b19\u0b1a\u0005\u01a0\u00d1",
    "\u0002\u0b1a\u0b1c\u0003\u0002\u0002\u0002\u0b1b\u0b00\u0003\u0002\u0002",
    "\u0002\u0b1b\u0b05\u0003\u0002\u0002\u0002\u0b1b\u0b10\u0003\u0002\u0002",
    "\u0002\u0b1c\u01d9\u0003\u0002\u0002\u0002\u0144\u01df\u01e6\u01ea\u01ee",
    "\u01f7\u01fb\u01ff\u0201\u0207\u020c\u0213\u0218\u021a\u0220\u0225\u022a",
    "\u022f\u023a\u0248\u024d\u0255\u025c\u0262\u0267\u0272\u0275\u0283\u0288",
    "\u028d\u0292\u0298\u02a2\u02aa\u02b4\u02bc\u02c8\u02cc\u02d1\u02d7\u02df",
    "\u02ec\u0309\u030d\u0312\u0318\u031b\u031e\u032a\u0335\u0343\u034a\u0353",
    "\u035a\u035f\u036e\u0375\u037b\u037f\u0383\u0387\u038b\u0390\u0394\u0398",
    "\u039a\u039f\u03a6\u03ab\u03ad\u03b3\u03b8\u03bc\u03cf\u03d4\u03e4\u03e9",
    "\u03ef\u03f5\u03f7\u03fb\u0400\u0404\u040c\u0413\u041b\u041e\u0423\u042b",
    "\u0430\u0437\u043e\u0443\u0449\u0455\u045a\u045e\u0468\u046d\u0475\u0478",
    "\u047d\u0485\u0488\u048d\u0492\u0497\u049c\u04a3\u04a8\u04b0\u04b5\u04ba",
    "\u04bf\u04c5\u04cb\u04ce\u04d1\u04da\u04e0\u04e6\u04e9\u04ec\u04f4\u04f9",
    "\u04fe\u0504\u0507\u0512\u051b\u0525\u052a\u0535\u053a\u0546\u054b\u0557",
    "\u0561\u0566\u056e\u0571\u0578\u0580\u0586\u058f\u0599\u059d\u05a0\u05a9",
    "\u05b7\u05ba\u05c3\u05c8\u05cf\u05d4\u05dc\u05e8\u05ef\u05fd\u0613\u0635",
    "\u0641\u0647\u0653\u0660\u067a\u067e\u0683\u0687\u068b\u0693\u0697\u069b",
    "\u06a2\u06ab\u06b3\u06c2\u06ce\u06d4\u06da\u06ef\u06f4\u06fa\u0706\u0711",
    "\u071b\u071e\u0723\u072c\u0732\u073c\u0741\u074a\u0761\u076b\u0781\u0788",
    "\u0790\u0798\u07a3\u07ba\u07c4\u07cf\u07e5\u07e9\u07ee\u07f6\u07fc\u0800",
    "\u0804\u0808\u080e\u0813\u0818\u081c\u0820\u0826\u082b\u0830\u0834\u0838",
    "\u083a\u083f\u0844\u0849\u084d\u0851\u0855\u085a\u0862\u0868\u086c\u0870",
    "\u0874\u087a\u087f\u0884\u0888\u088c\u088e\u0893\u08a2\u08b0\u08bc\u08c5",
    "\u08d4\u08e1\u08ea\u08f0\u08f7\u08fc\u0903\u0908\u090f\u0914\u091b\u0920",
    "\u0928\u092d\u0931\u0935\u093a\u0941\u0948\u094d\u0954\u0959\u0960\u0965",
    "\u096d\u0972\u0976\u097d\u0983\u098a\u0991\u0998\u09a0\u09a7\u09af\u09b3",
    "\u09ba\u09c1\u09c8\u09d0\u09d7\u09df\u09e5\u09eb\u09f7\u09fd\u0a03\u0a0e",
    "\u0a17\u0a1e\u0a25\u0a2a\u0a2e\u0a37\u0a42\u0a4c\u0a57\u0a62\u0a6d\u0a78",
    "\u0a84\u0a86\u0a9b\u0a9d\u0ab0\u0ab2\u0abe\u0ac0\u0acf\u0ad1\u0adb\u0ae9",
    "\u0aed\u0af1\u0af3\u0b0a\u0b15\u0b1b"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class Java8Parser extends antlr4.Parser {

    static grammarFileName = "Java8Parser.g4";
    static literalNames = [ null, "'abstract'", "'assert'", "'boolean'", 
                            "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                            "'class'", "'const'", "'continue'", "'default'", 
                            "'do'", "'double'", "'else'", "'enum'", "'extends'", 
                            "'final'", "'finally'", "'float'", "'for'", 
                            "'if'", "'goto'", "'implements'", "'import'", 
                            "'instanceof'", "'int'", "'interface'", "'long'", 
                            "'native'", "'new'", "'package'", "'private'", 
                            "'protected'", "'public'", "'return'", "'short'", 
                            "'static'", "'strictfp'", "'super'", "'switch'", 
                            "'synchronized'", "'this'", "'throw'", "'throws'", 
                            "'transient'", "'try'", "'void'", "'volatile'", 
                            "'while'", null, null, null, null, null, "'null'", 
                            "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
                            "','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", 
                            "'?'", "':'", "'=='", "'<='", "'>='", "'!='", 
                            "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
                            "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'->'", 
                            "'::'", "'+='", "'-='", "'*='", "'/='", "'&='", 
                            "'|='", "'^='", "'%='", "'<<='", "'>>='", "'>>>='", 
                            null, "'@'", "'...'" ];
    static symbolicNames = [ null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", 
                             "BYTE", "CASE", "CATCH", "CHAR", "CLASS", "CONST", 
                             "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
                             "ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", 
                             "FOR", "IF", "GOTO", "IMPLEMENTS", "IMPORT", 
                             "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", 
                             "NEW", "PACKAGE", "PRIVATE", "PROTECTED", "PUBLIC", 
                             "RETURN", "SHORT", "STATIC", "STRICTFP", "SUPER", 
                             "SWITCH", "SYNCHRONIZED", "THIS", "THROW", 
                             "THROWS", "TRANSIENT", "TRY", "VOID", "VOLATILE", 
                             "WHILE", "IntegerLiteral", "FloatingPointLiteral", 
                             "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
                             "NullLiteral", "LPAREN", "RPAREN", "LBRACE", 
                             "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
                             "DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", 
                             "QUESTION", "COLON", "EQUAL", "LE", "GE", "NOTEQUAL", 
                             "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
                             "DIV", "BITAND", "BITOR", "CARET", "MOD", "ARROW", 
                             "COLONCOLON", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
                             "DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                             "MOD_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                             "URSHIFT_ASSIGN", "Identifier", "AT", "ELLIPSIS", 
                             "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "literal", "primitiveType", "numericType", "integralType", 
                         "floatingPointType", "referenceType", "classOrInterfaceType", 
                         "classType", "classType_lf_classOrInterfaceType", 
                         "classType_lfno_classOrInterfaceType", "interfaceType", 
                         "interfaceType_lf_classOrInterfaceType", "interfaceType_lfno_classOrInterfaceType", 
                         "typeVariable", "arrayType", "dims", "typeParameter", 
                         "typeParameterModifier", "typeBound", "additionalBound", 
                         "typeArguments", "typeArgumentList", "typeArgument", 
                         "wildcard", "wildcardBounds", "packageName", "typeName", 
                         "packageOrTypeName", "expressionName", "methodName", 
                         "ambiguousName", "compilationUnit", "packageDeclaration", 
                         "packageModifier", "importDeclaration", "singleTypeImportDeclaration", 
                         "typeImportOnDemandDeclaration", "singleStaticImportDeclaration", 
                         "staticImportOnDemandDeclaration", "typeDeclaration", 
                         "classDeclaration", "normalClassDeclaration", "classModifier", 
                         "typeParameters", "typeParameterList", "superclass", 
                         "superinterfaces", "interfaceTypeList", "classBody", 
                         "classBodyDeclaration", "classMemberDeclaration", 
                         "fieldDeclaration", "fieldModifier", "variableDeclaratorList", 
                         "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                         "unannType", "unannPrimitiveType", "unannReferenceType", 
                         "unannClassOrInterfaceType", "unannClassType", 
                         "unannClassType_lf_unannClassOrInterfaceType", 
                         "unannClassType_lfno_unannClassOrInterfaceType", 
                         "unannInterfaceType", "unannInterfaceType_lf_unannClassOrInterfaceType", 
                         "unannInterfaceType_lfno_unannClassOrInterfaceType", 
                         "unannTypeVariable", "unannArrayType", "methodDeclaration", 
                         "methodModifier", "methodHeader", "result", "methodDeclarator", 
                         "formalParameterList", "formalParameters", "formalParameter", 
                         "variableModifier", "lastFormalParameter", "receiverParameter", 
                         "throws_", "exceptionTypeList", "exceptionType", 
                         "methodBody", "instanceInitializer", "staticInitializer", 
                         "constructorDeclaration", "constructorModifier", 
                         "constructorDeclarator", "simpleTypeName", "constructorBody", 
                         "explicitConstructorInvocation", "enumDeclaration", 
                         "enumBody", "enumConstantList", "enumConstant", 
                         "enumConstantModifier", "enumBodyDeclarations", 
                         "interfaceDeclaration", "normalInterfaceDeclaration", 
                         "interfaceModifier", "extendsInterfaces", "interfaceBody", 
                         "interfaceMemberDeclaration", "constantDeclaration", 
                         "constantModifier", "interfaceMethodDeclaration", 
                         "interfaceMethodModifier", "annotationTypeDeclaration", 
                         "annotationTypeBody", "annotationTypeMemberDeclaration", 
                         "annotationTypeElementDeclaration", "annotationTypeElementModifier", 
                         "defaultValue", "annotation", "normalAnnotation", 
                         "elementValuePairList", "elementValuePair", "elementValue", 
                         "elementValueArrayInitializer", "elementValueList", 
                         "markerAnnotation", "singleElementAnnotation", 
                         "arrayInitializer", "variableInitializerList", 
                         "block", "blockStatements", "blockStatement", "localVariableDeclarationStatement", 
                         "localVariableDeclaration", "statement", "statementNoShortIf", 
                         "statementWithoutTrailingSubstatement", "emptyStatement", 
                         "labeledStatement", "labeledStatementNoShortIf", 
                         "expressionStatement", "statementExpression", "ifThenStatement", 
                         "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
                         "assertStatement", "switchStatement", "switchBlock", 
                         "switchBlockStatementGroup", "switchLabels", "switchLabel", 
                         "enumConstantName", "whileStatement", "whileStatementNoShortIf", 
                         "doStatement", "forStatement", "forStatementNoShortIf", 
                         "basicForStatement", "basicForStatementNoShortIf", 
                         "forInit", "forUpdate", "statementExpressionList", 
                         "enhancedForStatement", "enhancedForStatementNoShortIf", 
                         "breakStatement", "continueStatement", "returnStatement", 
                         "throwStatement", "synchronizedStatement", "tryStatement", 
                         "catches", "catchClause", "catchFormalParameter", 
                         "catchType", "finally_", "tryWithResourcesStatement", 
                         "resourceSpecification", "resourceList", "resource", 
                         "primary", "primaryNoNewArray", "primaryNoNewArray_lf_arrayAccess", 
                         "primaryNoNewArray_lfno_arrayAccess", "primaryNoNewArray_lf_primary", 
                         "primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary", 
                         "primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary", 
                         "primaryNoNewArray_lfno_primary", "primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary", 
                         "primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary", 
                         "classInstanceCreationExpression", "classInstanceCreationExpression_lf_primary", 
                         "classInstanceCreationExpression_lfno_primary", 
                         "typeArgumentsOrDiamond", "fieldAccess", "fieldAccess_lf_primary", 
                         "fieldAccess_lfno_primary", "arrayAccess", "arrayAccess_lf_primary", 
                         "arrayAccess_lfno_primary", "methodInvocation", 
                         "methodInvocation_lf_primary", "methodInvocation_lfno_primary", 
                         "argumentList", "methodReference", "methodReference_lf_primary", 
                         "methodReference_lfno_primary", "arrayCreationExpression", 
                         "dimExprs", "dimExpr", "constantExpression", "expression", 
                         "lambdaExpression", "lambdaParameters", "inferredFormalParameterList", 
                         "lambdaBody", "assignmentExpression", "assignment", 
                         "leftHandSide", "assignmentOperator", "conditionalExpression", 
                         "conditionalOrExpression", "conditionalAndExpression", 
                         "inclusiveOrExpression", "exclusiveOrExpression", 
                         "andExpression", "equalityExpression", "relationalExpression", 
                         "shiftExpression", "additiveExpression", "multiplicativeExpression", 
                         "unaryExpression", "preIncrementExpression", "preDecrementExpression", 
                         "unaryExpressionNotPlusMinus", "postfixExpression", 
                         "postIncrementExpression", "postIncrementExpression_lf_postfixExpression", 
                         "postDecrementExpression", "postDecrementExpression_lf_postfixExpression", 
                         "castExpression" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Java8Parser.ruleNames;
        this.literalNames = Java8Parser.literalNames;
        this.symbolicNames = Java8Parser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 25:
    	    		return this.packageName_sempred(localctx, predIndex);
    	case 27:
    	    		return this.packageOrTypeName_sempred(localctx, predIndex);
    	case 30:
    	    		return this.ambiguousName_sempred(localctx, predIndex);
    	case 216:
    	    		return this.conditionalOrExpression_sempred(localctx, predIndex);
    	case 217:
    	    		return this.conditionalAndExpression_sempred(localctx, predIndex);
    	case 218:
    	    		return this.inclusiveOrExpression_sempred(localctx, predIndex);
    	case 219:
    	    		return this.exclusiveOrExpression_sempred(localctx, predIndex);
    	case 220:
    	    		return this.andExpression_sempred(localctx, predIndex);
    	case 221:
    	    		return this.equalityExpression_sempred(localctx, predIndex);
    	case 222:
    	    		return this.relationalExpression_sempred(localctx, predIndex);
    	case 223:
    	    		return this.shiftExpression_sempred(localctx, predIndex);
    	case 224:
    	    		return this.additiveExpression_sempred(localctx, predIndex);
    	case 225:
    	    		return this.multiplicativeExpression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    packageName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    packageOrTypeName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    ambiguousName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    conditionalOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    conditionalAndExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    inclusiveOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    exclusiveOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    andExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    equalityExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 2);
    		case 9:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    relationalExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 5);
    		case 11:
    			return this.precpred(this._ctx, 4);
    		case 12:
    			return this.precpred(this._ctx, 3);
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    shiftExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 3);
    		case 16:
    			return this.precpred(this._ctx, 2);
    		case 17:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    additiveExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 18:
    			return this.precpred(this._ctx, 2);
    		case 19:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    multiplicativeExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 20:
    			return this.precpred(this._ctx, 3);
    		case 21:
    			return this.precpred(this._ctx, 2);
    		case 22:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Java8Parser.RULE_literal);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 472;
	        _la = this._input.LA(1);
	        if(!(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & ((1 << (Java8Parser.IntegerLiteral - 51)) | (1 << (Java8Parser.FloatingPointLiteral - 51)) | (1 << (Java8Parser.BooleanLiteral - 51)) | (1 << (Java8Parser.CharacterLiteral - 51)) | (1 << (Java8Parser.StringLiteral - 51)) | (1 << (Java8Parser.NullLiteral - 51)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Java8Parser.RULE_primitiveType);
	    var _la = 0; // Token type
	    try {
	        this.state = 488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 474;
	                this.annotation();
	                this.state = 479;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 480;
	            this.numericType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 484;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 481;
	                this.annotation();
	                this.state = 486;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 487;
	            this.match(Java8Parser.BOOLEAN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Java8Parser.RULE_numericType);
	    try {
	        this.state = 492;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.BYTE:
	        case Java8Parser.CHAR:
	        case Java8Parser.INT:
	        case Java8Parser.LONG:
	        case Java8Parser.SHORT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 490;
	            this.integralType();
	            break;
	        case Java8Parser.DOUBLE:
	        case Java8Parser.FLOAT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 491;
	            this.floatingPointType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integralType() {
	    let localctx = new IntegralTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Java8Parser.RULE_integralType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la===Java8Parser.SHORT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatingPointType() {
	    let localctx = new FloatingPointTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Java8Parser.RULE_floatingPointType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 496;
	        _la = this._input.LA(1);
	        if(!(_la===Java8Parser.DOUBLE || _la===Java8Parser.FLOAT)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceType() {
	    let localctx = new ReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Java8Parser.RULE_referenceType);
	    try {
	        this.state = 501;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 498;
	            this.classOrInterfaceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 499;
	            this.typeVariable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 500;
	            this.arrayType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceType() {
	    let localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Java8Parser.RULE_classOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 505;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 503;
	            this.classType_lfno_classOrInterfaceType();
	            break;

	        case 2:
	            this.state = 504;
	            this.interfaceType_lfno_classOrInterfaceType();
	            break;

	        }
	        this.state = 511;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,7,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 509;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 507;
	                    this.classType_lf_classOrInterfaceType();
	                    break;

	                case 2:
	                    this.state = 508;
	                    this.interfaceType_lf_classOrInterfaceType();
	                    break;

	                } 
	            }
	            this.state = 513;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,7,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType() {
	    let localctx = new ClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Java8Parser.RULE_classType);
	    var _la = 0; // Token type
	    try {
	        this.state = 536;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 514;
	                this.annotation();
	                this.state = 519;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 520;
	            this.match(Java8Parser.Identifier);
	            this.state = 522;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 521;
	                this.typeArguments();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 524;
	            this.classOrInterfaceType();
	            this.state = 525;
	            this.match(Java8Parser.DOT);
	            this.state = 529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 526;
	                this.annotation();
	                this.state = 531;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 532;
	            this.match(Java8Parser.Identifier);
	            this.state = 534;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 533;
	                this.typeArguments();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType_lf_classOrInterfaceType() {
	    let localctx = new ClassType_lf_classOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Java8Parser.RULE_classType_lf_classOrInterfaceType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 538;
	        this.match(Java8Parser.DOT);
	        this.state = 542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 539;
	            this.annotation();
	            this.state = 544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 545;
	        this.match(Java8Parser.Identifier);
	        this.state = 547;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        if(la_===1) {
	            this.state = 546;
	            this.typeArguments();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType_lfno_classOrInterfaceType() {
	    let localctx = new ClassType_lfno_classOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Java8Parser.RULE_classType_lfno_classOrInterfaceType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 552;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 549;
	            this.annotation();
	            this.state = 554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 555;
	        this.match(Java8Parser.Identifier);
	        this.state = 557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	        if(la_===1) {
	            this.state = 556;
	            this.typeArguments();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType() {
	    let localctx = new InterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Java8Parser.RULE_interfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 559;
	        this.classType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType_lf_classOrInterfaceType() {
	    let localctx = new InterfaceType_lf_classOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Java8Parser.RULE_interfaceType_lf_classOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this.classType_lf_classOrInterfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType_lfno_classOrInterfaceType() {
	    let localctx = new InterfaceType_lfno_classOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 563;
	        this.classType_lfno_classOrInterfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeVariable() {
	    let localctx = new TypeVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Java8Parser.RULE_typeVariable);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 568;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 565;
	            this.annotation();
	            this.state = 570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 571;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Java8Parser.RULE_arrayType);
	    try {
	        this.state = 582;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 573;
	            this.primitiveType();
	            this.state = 574;
	            this.dims();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 576;
	            this.classOrInterfaceType();
	            this.state = 577;
	            this.dims();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 579;
	            this.typeVariable();
	            this.state = 580;
	            this.dims();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dims() {
	    let localctx = new DimsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Java8Parser.RULE_dims);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 584;
	            this.annotation();
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 590;
	        this.match(Java8Parser.LBRACK);
	        this.state = 591;
	        this.match(Java8Parser.RBRACK);
	        this.state = 602;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,21,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 595;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===Java8Parser.AT) {
	                    this.state = 592;
	                    this.annotation();
	                    this.state = 597;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 598;
	                this.match(Java8Parser.LBRACK);
	                this.state = 599;
	                this.match(Java8Parser.RBRACK); 
	            }
	            this.state = 604;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,21,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Java8Parser.RULE_typeParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 608;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 605;
	            this.typeParameterModifier();
	            this.state = 610;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 611;
	        this.match(Java8Parser.Identifier);
	        this.state = 613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.EXTENDS) {
	            this.state = 612;
	            this.typeBound();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterModifier() {
	    let localctx = new TypeParameterModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Java8Parser.RULE_typeParameterModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 615;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeBound() {
	    let localctx = new TypeBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Java8Parser.RULE_typeBound);
	    var _la = 0; // Token type
	    try {
	        this.state = 627;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 617;
	            this.match(Java8Parser.EXTENDS);
	            this.state = 618;
	            this.typeVariable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 619;
	            this.match(Java8Parser.EXTENDS);
	            this.state = 620;
	            this.classOrInterfaceType();
	            this.state = 624;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.BITAND) {
	                this.state = 621;
	                this.additionalBound();
	                this.state = 626;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additionalBound() {
	    let localctx = new AdditionalBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Java8Parser.RULE_additionalBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this.match(Java8Parser.BITAND);
	        this.state = 630;
	        this.interfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Java8Parser.RULE_typeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 632;
	        this.match(Java8Parser.LT);
	        this.state = 633;
	        this.typeArgumentList();
	        this.state = 634;
	        this.match(Java8Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentList() {
	    let localctx = new TypeArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Java8Parser.RULE_typeArgumentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 636;
	        this.typeArgument();
	        this.state = 641;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.COMMA) {
	            this.state = 637;
	            this.match(Java8Parser.COMMA);
	            this.state = 638;
	            this.typeArgument();
	            this.state = 643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgument() {
	    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Java8Parser.RULE_typeArgument);
	    try {
	        this.state = 646;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 644;
	            this.referenceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 645;
	            this.wildcard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard() {
	    let localctx = new WildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Java8Parser.RULE_wildcard);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 648;
	            this.annotation();
	            this.state = 653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 654;
	        this.match(Java8Parser.QUESTION);
	        this.state = 656;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.EXTENDS || _la===Java8Parser.SUPER) {
	            this.state = 655;
	            this.wildcardBounds();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcardBounds() {
	    let localctx = new WildcardBoundsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Java8Parser.RULE_wildcardBounds);
	    try {
	        this.state = 662;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.EXTENDS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 658;
	            this.match(Java8Parser.EXTENDS);
	            this.state = 659;
	            this.referenceType();
	            break;
	        case Java8Parser.SUPER:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 660;
	            this.match(Java8Parser.SUPER);
	            this.state = 661;
	            this.referenceType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	packageName(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PackageNameContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 50;
	    this.enterRecursionRule(localctx, 50, Java8Parser.RULE_packageName, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 665;
	        this.match(Java8Parser.Identifier);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 672;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PackageNameContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_packageName);
	                this.state = 667;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 668;
	                this.match(Java8Parser.DOT);
	                this.state = 669;
	                this.match(Java8Parser.Identifier); 
	            }
	            this.state = 674;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Java8Parser.RULE_typeName);
	    try {
	        this.state = 680;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 675;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 676;
	            this.packageOrTypeName(0);
	            this.state = 677;
	            this.match(Java8Parser.DOT);
	            this.state = 678;
	            this.match(Java8Parser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	packageOrTypeName(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new PackageOrTypeNameContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 54;
	    this.enterRecursionRule(localctx, 54, Java8Parser.RULE_packageOrTypeName, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 683;
	        this.match(Java8Parser.Identifier);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 690;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new PackageOrTypeNameContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_packageOrTypeName);
	                this.state = 685;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 686;
	                this.match(Java8Parser.DOT);
	                this.state = 687;
	                this.match(Java8Parser.Identifier); 
	            }
	            this.state = 692;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	expressionName() {
	    let localctx = new ExpressionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Java8Parser.RULE_expressionName);
	    try {
	        this.state = 698;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 693;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 694;
	            this.ambiguousName(0);
	            this.state = 695;
	            this.match(Java8Parser.DOT);
	            this.state = 696;
	            this.match(Java8Parser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodName() {
	    let localctx = new MethodNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Java8Parser.RULE_methodName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	ambiguousName(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AmbiguousNameContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 60;
	    this.enterRecursionRule(localctx, 60, Java8Parser.RULE_ambiguousName, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 703;
	        this.match(Java8Parser.Identifier);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 710;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new AmbiguousNameContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_ambiguousName);
	                this.state = 705;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 706;
	                this.match(Java8Parser.DOT);
	                this.state = 707;
	                this.match(Java8Parser.Identifier); 
	            }
	            this.state = 712;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Java8Parser.RULE_compilationUnit);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 713;
	            this.packageDeclaration();

	        }
	        this.state = 719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.IMPORT) {
	            this.state = 716;
	            this.importDeclaration();
	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.INTERFACE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.AT) {
	            this.state = 722;
	            this.typeDeclaration();
	            this.state = 727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 728;
	        this.match(Java8Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Java8Parser.RULE_packageDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 733;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 730;
	            this.packageModifier();
	            this.state = 735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 736;
	        this.match(Java8Parser.PACKAGE);
	        this.state = 737;
	        this.packageName(0);
	        this.state = 738;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageModifier() {
	    let localctx = new PackageModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Java8Parser.RULE_packageModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 740;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Java8Parser.RULE_importDeclaration);
	    try {
	        this.state = 746;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 742;
	            this.singleTypeImportDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 743;
	            this.typeImportOnDemandDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 744;
	            this.singleStaticImportDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 745;
	            this.staticImportOnDemandDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTypeImportDeclaration() {
	    let localctx = new SingleTypeImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Java8Parser.RULE_singleTypeImportDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 748;
	        this.match(Java8Parser.IMPORT);
	        this.state = 749;
	        this.typeName();
	        this.state = 750;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeImportOnDemandDeclaration() {
	    let localctx = new TypeImportOnDemandDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Java8Parser.RULE_typeImportOnDemandDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 752;
	        this.match(Java8Parser.IMPORT);
	        this.state = 753;
	        this.packageOrTypeName(0);
	        this.state = 754;
	        this.match(Java8Parser.DOT);
	        this.state = 755;
	        this.match(Java8Parser.MUL);
	        this.state = 756;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleStaticImportDeclaration() {
	    let localctx = new SingleStaticImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Java8Parser.RULE_singleStaticImportDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 758;
	        this.match(Java8Parser.IMPORT);
	        this.state = 759;
	        this.match(Java8Parser.STATIC);
	        this.state = 760;
	        this.typeName();
	        this.state = 761;
	        this.match(Java8Parser.DOT);
	        this.state = 762;
	        this.match(Java8Parser.Identifier);
	        this.state = 763;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticImportOnDemandDeclaration() {
	    let localctx = new StaticImportOnDemandDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Java8Parser.RULE_staticImportOnDemandDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 765;
	        this.match(Java8Parser.IMPORT);
	        this.state = 766;
	        this.match(Java8Parser.STATIC);
	        this.state = 767;
	        this.typeName();
	        this.state = 768;
	        this.match(Java8Parser.DOT);
	        this.state = 769;
	        this.match(Java8Parser.MUL);
	        this.state = 770;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDeclaration() {
	    let localctx = new TypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Java8Parser.RULE_typeDeclaration);
	    try {
	        this.state = 775;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 772;
	            this.classDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 773;
	            this.interfaceDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 774;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Java8Parser.RULE_classDeclaration);
	    try {
	        this.state = 779;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 777;
	            this.normalClassDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 778;
	            this.enumDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalClassDeclaration() {
	    let localctx = new NormalClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Java8Parser.RULE_normalClassDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.ABSTRACT || _la===Java8Parser.FINAL || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)))) !== 0) || _la===Java8Parser.AT) {
	            this.state = 781;
	            this.classModifier();
	            this.state = 786;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 787;
	        this.match(Java8Parser.CLASS);
	        this.state = 788;
	        this.match(Java8Parser.Identifier);
	        this.state = 790;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LT) {
	            this.state = 789;
	            this.typeParameters();
	        }

	        this.state = 793;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.EXTENDS) {
	            this.state = 792;
	            this.superclass();
	        }

	        this.state = 796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.IMPLEMENTS) {
	            this.state = 795;
	            this.superinterfaces();
	        }

	        this.state = 798;
	        this.classBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classModifier() {
	    let localctx = new ClassModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Java8Parser.RULE_classModifier);
	    try {
	        this.state = 808;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 800;
	            this.annotation();
	            break;
	        case Java8Parser.PUBLIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 801;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case Java8Parser.PROTECTED:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 802;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case Java8Parser.PRIVATE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 803;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        case Java8Parser.ABSTRACT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 804;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        case Java8Parser.STATIC:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 805;
	            this.match(Java8Parser.STATIC);
	            break;
	        case Java8Parser.FINAL:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 806;
	            this.match(Java8Parser.FINAL);
	            break;
	        case Java8Parser.STRICTFP:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 807;
	            this.match(Java8Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Java8Parser.RULE_typeParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 810;
	        this.match(Java8Parser.LT);
	        this.state = 811;
	        this.typeParameterList();
	        this.state = 812;
	        this.match(Java8Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterList() {
	    let localctx = new TypeParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Java8Parser.RULE_typeParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this.typeParameter();
	        this.state = 819;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.COMMA) {
	            this.state = 815;
	            this.match(Java8Parser.COMMA);
	            this.state = 816;
	            this.typeParameter();
	            this.state = 821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superclass() {
	    let localctx = new SuperclassContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Java8Parser.RULE_superclass);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 822;
	        this.match(Java8Parser.EXTENDS);
	        this.state = 823;
	        this.classType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	superinterfaces() {
	    let localctx = new SuperinterfacesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Java8Parser.RULE_superinterfaces);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 825;
	        this.match(Java8Parser.IMPLEMENTS);
	        this.state = 826;
	        this.interfaceTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceTypeList() {
	    let localctx = new InterfaceTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Java8Parser.RULE_interfaceTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        this.interfaceType();
	        this.state = 833;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.COMMA) {
	            this.state = 829;
	            this.match(Java8Parser.COMMA);
	            this.state = 830;
	            this.interfaceType();
	            this.state = 835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBody() {
	    let localctx = new ClassBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Java8Parser.RULE_classBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 836;
	        this.match(Java8Parser.LBRACE);
	        this.state = 840;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NATIVE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.TRANSIENT - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.VOLATILE - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.LT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 837;
	            this.classBodyDeclaration();
	            this.state = 842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 843;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBodyDeclaration() {
	    let localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Java8Parser.RULE_classBodyDeclaration);
	    try {
	        this.state = 849;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 845;
	            this.classMemberDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 846;
	            this.instanceInitializer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 847;
	            this.staticInitializer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 848;
	            this.constructorDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classMemberDeclaration() {
	    let localctx = new ClassMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Java8Parser.RULE_classMemberDeclaration);
	    try {
	        this.state = 856;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 851;
	            this.fieldDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 852;
	            this.methodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 853;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 854;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 855;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDeclaration() {
	    let localctx = new FieldDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Java8Parser.RULE_fieldDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 861;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (Java8Parser.FINAL - 18)) | (1 << (Java8Parser.PRIVATE - 18)) | (1 << (Java8Parser.PROTECTED - 18)) | (1 << (Java8Parser.PUBLIC - 18)) | (1 << (Java8Parser.STATIC - 18)) | (1 << (Java8Parser.TRANSIENT - 18)) | (1 << (Java8Parser.VOLATILE - 18)))) !== 0) || _la===Java8Parser.AT) {
	            this.state = 858;
	            this.fieldModifier();
	            this.state = 863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 864;
	        this.unannType();
	        this.state = 865;
	        this.variableDeclaratorList();
	        this.state = 866;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldModifier() {
	    let localctx = new FieldModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Java8Parser.RULE_fieldModifier);
	    try {
	        this.state = 876;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 868;
	            this.annotation();
	            break;
	        case Java8Parser.PUBLIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 869;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case Java8Parser.PROTECTED:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 870;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case Java8Parser.PRIVATE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 871;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        case Java8Parser.STATIC:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 872;
	            this.match(Java8Parser.STATIC);
	            break;
	        case Java8Parser.FINAL:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 873;
	            this.match(Java8Parser.FINAL);
	            break;
	        case Java8Parser.TRANSIENT:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 874;
	            this.match(Java8Parser.TRANSIENT);
	            break;
	        case Java8Parser.VOLATILE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 875;
	            this.match(Java8Parser.VOLATILE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorList() {
	    let localctx = new VariableDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Java8Parser.RULE_variableDeclaratorList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 878;
	        this.variableDeclarator();
	        this.state = 883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.COMMA) {
	            this.state = 879;
	            this.match(Java8Parser.COMMA);
	            this.state = 880;
	            this.variableDeclarator();
	            this.state = 885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Java8Parser.RULE_variableDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 886;
	        this.variableDeclaratorId();
	        this.state = 889;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.ASSIGN) {
	            this.state = 887;
	            this.match(Java8Parser.ASSIGN);
	            this.state = 888;
	            this.variableInitializer();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorId() {
	    let localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Java8Parser.RULE_variableDeclaratorId);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 891;
	        this.match(Java8Parser.Identifier);
	        this.state = 893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LBRACK || _la===Java8Parser.AT) {
	            this.state = 892;
	            this.dims();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Java8Parser.RULE_variableInitializer);
	    try {
	        this.state = 897;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.BOOLEAN:
	        case Java8Parser.BYTE:
	        case Java8Parser.CHAR:
	        case Java8Parser.DOUBLE:
	        case Java8Parser.FLOAT:
	        case Java8Parser.INT:
	        case Java8Parser.LONG:
	        case Java8Parser.NEW:
	        case Java8Parser.SHORT:
	        case Java8Parser.SUPER:
	        case Java8Parser.THIS:
	        case Java8Parser.VOID:
	        case Java8Parser.IntegerLiteral:
	        case Java8Parser.FloatingPointLiteral:
	        case Java8Parser.BooleanLiteral:
	        case Java8Parser.CharacterLiteral:
	        case Java8Parser.StringLiteral:
	        case Java8Parser.NullLiteral:
	        case Java8Parser.LPAREN:
	        case Java8Parser.BANG:
	        case Java8Parser.TILDE:
	        case Java8Parser.INC:
	        case Java8Parser.DEC:
	        case Java8Parser.ADD:
	        case Java8Parser.SUB:
	        case Java8Parser.Identifier:
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 895;
	            this.expression();
	            break;
	        case Java8Parser.LBRACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 896;
	            this.arrayInitializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannType() {
	    let localctx = new UnannTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Java8Parser.RULE_unannType);
	    try {
	        this.state = 901;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 899;
	            this.unannPrimitiveType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 900;
	            this.unannReferenceType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannPrimitiveType() {
	    let localctx = new UnannPrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Java8Parser.RULE_unannPrimitiveType);
	    try {
	        this.state = 905;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.BYTE:
	        case Java8Parser.CHAR:
	        case Java8Parser.DOUBLE:
	        case Java8Parser.FLOAT:
	        case Java8Parser.INT:
	        case Java8Parser.LONG:
	        case Java8Parser.SHORT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 903;
	            this.numericType();
	            break;
	        case Java8Parser.BOOLEAN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 904;
	            this.match(Java8Parser.BOOLEAN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannReferenceType() {
	    let localctx = new UnannReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Java8Parser.RULE_unannReferenceType);
	    try {
	        this.state = 910;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 907;
	            this.unannClassOrInterfaceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 908;
	            this.unannTypeVariable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 909;
	            this.unannArrayType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassOrInterfaceType() {
	    let localctx = new UnannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Java8Parser.RULE_unannClassOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 912;
	            this.unannClassType_lfno_unannClassOrInterfaceType();
	            break;

	        case 2:
	            this.state = 913;
	            this.unannInterfaceType_lfno_unannClassOrInterfaceType();
	            break;

	        }
	        this.state = 920;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,64,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 918;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 916;
	                    this.unannClassType_lf_unannClassOrInterfaceType();
	                    break;

	                case 2:
	                    this.state = 917;
	                    this.unannInterfaceType_lf_unannClassOrInterfaceType();
	                    break;

	                } 
	            }
	            this.state = 922;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,64,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassType() {
	    let localctx = new UnannClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Java8Parser.RULE_unannClassType);
	    var _la = 0; // Token type
	    try {
	        this.state = 939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 923;
	            this.match(Java8Parser.Identifier);
	            this.state = 925;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 924;
	                this.typeArguments();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 927;
	            this.unannClassOrInterfaceType();
	            this.state = 928;
	            this.match(Java8Parser.DOT);
	            this.state = 932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 929;
	                this.annotation();
	                this.state = 934;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 935;
	            this.match(Java8Parser.Identifier);
	            this.state = 937;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 936;
	                this.typeArguments();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassType_lf_unannClassOrInterfaceType() {
	    let localctx = new UnannClassType_lf_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 941;
	        this.match(Java8Parser.DOT);
	        this.state = 945;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 942;
	            this.annotation();
	            this.state = 947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 948;
	        this.match(Java8Parser.Identifier);
	        this.state = 950;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LT) {
	            this.state = 949;
	            this.typeArguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassType_lfno_unannClassOrInterfaceType() {
	    let localctx = new UnannClassType_lfno_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this.match(Java8Parser.Identifier);
	        this.state = 954;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LT) {
	            this.state = 953;
	            this.typeArguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannInterfaceType() {
	    let localctx = new UnannInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Java8Parser.RULE_unannInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.unannClassType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannInterfaceType_lf_unannClassOrInterfaceType() {
	    let localctx = new UnannInterfaceType_lf_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 958;
	        this.unannClassType_lf_unannClassOrInterfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannInterfaceType_lfno_unannClassOrInterfaceType() {
	    let localctx = new UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 960;
	        this.unannClassType_lfno_unannClassOrInterfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannTypeVariable() {
	    let localctx = new UnannTypeVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Java8Parser.RULE_unannTypeVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 962;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannArrayType() {
	    let localctx = new UnannArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Java8Parser.RULE_unannArrayType);
	    try {
	        this.state = 973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 964;
	            this.unannPrimitiveType();
	            this.state = 965;
	            this.dims();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 967;
	            this.unannClassOrInterfaceType();
	            this.state = 968;
	            this.dims();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 970;
	            this.unannTypeVariable();
	            this.state = 971;
	            this.dims();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Java8Parser.RULE_methodDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.NATIVE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)))) !== 0) || _la===Java8Parser.AT) {
	            this.state = 975;
	            this.methodModifier();
	            this.state = 980;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 981;
	        this.methodHeader();
	        this.state = 982;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodModifier() {
	    let localctx = new MethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Java8Parser.RULE_methodModifier);
	    try {
	        this.state = 994;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 984;
	            this.annotation();
	            break;
	        case Java8Parser.PUBLIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 985;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case Java8Parser.PROTECTED:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 986;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case Java8Parser.PRIVATE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 987;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        case Java8Parser.ABSTRACT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 988;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        case Java8Parser.STATIC:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 989;
	            this.match(Java8Parser.STATIC);
	            break;
	        case Java8Parser.FINAL:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 990;
	            this.match(Java8Parser.FINAL);
	            break;
	        case Java8Parser.SYNCHRONIZED:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 991;
	            this.match(Java8Parser.SYNCHRONIZED);
	            break;
	        case Java8Parser.NATIVE:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 992;
	            this.match(Java8Parser.NATIVE);
	            break;
	        case Java8Parser.STRICTFP:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 993;
	            this.match(Java8Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodHeader() {
	    let localctx = new MethodHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Java8Parser.RULE_methodHeader);
	    var _la = 0; // Token type
	    try {
	        this.state = 1013;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.BOOLEAN:
	        case Java8Parser.BYTE:
	        case Java8Parser.CHAR:
	        case Java8Parser.DOUBLE:
	        case Java8Parser.FLOAT:
	        case Java8Parser.INT:
	        case Java8Parser.LONG:
	        case Java8Parser.SHORT:
	        case Java8Parser.VOID:
	        case Java8Parser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 996;
	            this.result();
	            this.state = 997;
	            this.methodDeclarator();
	            this.state = 999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.THROWS) {
	                this.state = 998;
	                this.throws_();
	            }

	            break;
	        case Java8Parser.LT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1001;
	            this.typeParameters();
	            this.state = 1005;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 1002;
	                this.annotation();
	                this.state = 1007;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1008;
	            this.result();
	            this.state = 1009;
	            this.methodDeclarator();
	            this.state = 1011;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.THROWS) {
	                this.state = 1010;
	                this.throws_();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Java8Parser.RULE_result);
	    try {
	        this.state = 1017;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.BOOLEAN:
	        case Java8Parser.BYTE:
	        case Java8Parser.CHAR:
	        case Java8Parser.DOUBLE:
	        case Java8Parser.FLOAT:
	        case Java8Parser.INT:
	        case Java8Parser.LONG:
	        case Java8Parser.SHORT:
	        case Java8Parser.Identifier:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1015;
	            this.unannType();
	            break;
	        case Java8Parser.VOID:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1016;
	            this.match(Java8Parser.VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclarator() {
	    let localctx = new MethodDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Java8Parser.RULE_methodDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1019;
	        this.match(Java8Parser.Identifier);
	        this.state = 1020;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1022;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la===Java8Parser.SHORT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1021;
	            this.formalParameterList();
	        }

	        this.state = 1024;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1026;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LBRACK || _la===Java8Parser.AT) {
	            this.state = 1025;
	            this.dims();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Java8Parser.RULE_formalParameterList);
	    try {
	        this.state = 1034;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1028;
	            this.receiverParameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1029;
	            this.formalParameters();
	            this.state = 1030;
	            this.match(Java8Parser.COMMA);
	            this.state = 1031;
	            this.lastFormalParameter();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1033;
	            this.lastFormalParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameters() {
	    let localctx = new FormalParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Java8Parser.RULE_formalParameters);
	    try {
	        this.state = 1052;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1036;
	            this.formalParameter();
	            this.state = 1041;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1037;
	                    this.match(Java8Parser.COMMA);
	                    this.state = 1038;
	                    this.formalParameter(); 
	                }
	                this.state = 1043;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1044;
	            this.receiverParameter();
	            this.state = 1049;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1045;
	                    this.match(Java8Parser.COMMA);
	                    this.state = 1046;
	                    this.formalParameter(); 
	                }
	                this.state = 1051;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Java8Parser.RULE_formalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1057;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
	            this.state = 1054;
	            this.variableModifier();
	            this.state = 1059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1060;
	        this.unannType();
	        this.state = 1061;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableModifier() {
	    let localctx = new VariableModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Java8Parser.RULE_variableModifier);
	    try {
	        this.state = 1065;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1063;
	            this.annotation();
	            break;
	        case Java8Parser.FINAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1064;
	            this.match(Java8Parser.FINAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastFormalParameter() {
	    let localctx = new LastFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Java8Parser.RULE_lastFormalParameter);
	    var _la = 0; // Token type
	    try {
	        this.state = 1084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1070;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
	                this.state = 1067;
	                this.variableModifier();
	                this.state = 1072;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1073;
	            this.unannType();
	            this.state = 1077;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 1074;
	                this.annotation();
	                this.state = 1079;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1080;
	            this.match(Java8Parser.ELLIPSIS);
	            this.state = 1081;
	            this.variableDeclaratorId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1083;
	            this.formalParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiverParameter() {
	    let localctx = new ReceiverParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Java8Parser.RULE_receiverParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1089;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 1086;
	            this.annotation();
	            this.state = 1091;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1092;
	        this.unannType();
	        this.state = 1095;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.Identifier) {
	            this.state = 1093;
	            this.match(Java8Parser.Identifier);
	            this.state = 1094;
	            this.match(Java8Parser.DOT);
	        }

	        this.state = 1097;
	        this.match(Java8Parser.THIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throws_() {
	    let localctx = new Throws_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Java8Parser.RULE_throws_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1099;
	        this.match(Java8Parser.THROWS);
	        this.state = 1100;
	        this.exceptionTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionTypeList() {
	    let localctx = new ExceptionTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Java8Parser.RULE_exceptionTypeList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1102;
	        this.exceptionType();
	        this.state = 1107;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.COMMA) {
	            this.state = 1103;
	            this.match(Java8Parser.COMMA);
	            this.state = 1104;
	            this.exceptionType();
	            this.state = 1109;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionType() {
	    let localctx = new ExceptionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Java8Parser.RULE_exceptionType);
	    try {
	        this.state = 1112;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1110;
	            this.classType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1111;
	            this.typeVariable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodBody() {
	    let localctx = new MethodBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Java8Parser.RULE_methodBody);
	    try {
	        this.state = 1116;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.LBRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1114;
	            this.block();
	            break;
	        case Java8Parser.SEMI:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1115;
	            this.match(Java8Parser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instanceInitializer() {
	    let localctx = new InstanceInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Java8Parser.RULE_instanceInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1118;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticInitializer() {
	    let localctx = new StaticInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Java8Parser.RULE_staticInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1120;
	        this.match(Java8Parser.STATIC);
	        this.state = 1121;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclaration() {
	    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Java8Parser.RULE_constructorDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1126;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)))) !== 0) || _la===Java8Parser.AT) {
	            this.state = 1123;
	            this.constructorModifier();
	            this.state = 1128;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1129;
	        this.constructorDeclarator();
	        this.state = 1131;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.THROWS) {
	            this.state = 1130;
	            this.throws_();
	        }

	        this.state = 1133;
	        this.constructorBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorModifier() {
	    let localctx = new ConstructorModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Java8Parser.RULE_constructorModifier);
	    try {
	        this.state = 1139;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1135;
	            this.annotation();
	            break;
	        case Java8Parser.PUBLIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1136;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case Java8Parser.PROTECTED:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1137;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case Java8Parser.PRIVATE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1138;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclarator() {
	    let localctx = new ConstructorDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Java8Parser.RULE_constructorDeclarator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1142;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LT) {
	            this.state = 1141;
	            this.typeParameters();
	        }

	        this.state = 1144;
	        this.simpleTypeName();
	        this.state = 1145;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1147;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la===Java8Parser.SHORT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1146;
	            this.formalParameterList();
	        }

	        this.state = 1149;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeName() {
	    let localctx = new SimpleTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Java8Parser.RULE_simpleTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1151;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorBody() {
	    let localctx = new ConstructorBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Java8Parser.RULE_constructorBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1153;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1155;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        if(la_===1) {
	            this.state = 1154;
	            this.explicitConstructorInvocation();

	        }
	        this.state = 1158;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.ASSERT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BREAK) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.CONTINUE) | (1 << Java8Parser.DO) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.FOR) | (1 << Java8Parser.IF) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.RETURN - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SUPER - 33)) | (1 << (Java8Parser.SWITCH - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.THIS - 33)) | (1 << (Java8Parser.THROW - 33)) | (1 << (Java8Parser.TRY - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.WHILE - 33)) | (1 << (Java8Parser.IntegerLiteral - 33)) | (1 << (Java8Parser.FloatingPointLiteral - 33)) | (1 << (Java8Parser.BooleanLiteral - 33)) | (1 << (Java8Parser.CharacterLiteral - 33)) | (1 << (Java8Parser.StringLiteral - 33)) | (1 << (Java8Parser.NullLiteral - 33)) | (1 << (Java8Parser.LPAREN - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
	            this.state = 1157;
	            this.blockStatements();
	        }

	        this.state = 1160;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitConstructorInvocation() {
	    let localctx = new ExplicitConstructorInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Java8Parser.RULE_explicitConstructorInvocation);
	    var _la = 0; // Token type
	    try {
	        this.state = 1208;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 1162;
	                this.typeArguments();
	            }

	            this.state = 1165;
	            this.match(Java8Parser.THIS);
	            this.state = 1166;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 1167;
	                this.argumentList();
	            }

	            this.state = 1170;
	            this.match(Java8Parser.RPAREN);
	            this.state = 1171;
	            this.match(Java8Parser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 1172;
	                this.typeArguments();
	            }

	            this.state = 1175;
	            this.match(Java8Parser.SUPER);
	            this.state = 1176;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1178;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 1177;
	                this.argumentList();
	            }

	            this.state = 1180;
	            this.match(Java8Parser.RPAREN);
	            this.state = 1181;
	            this.match(Java8Parser.SEMI);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1182;
	            this.expressionName();
	            this.state = 1183;
	            this.match(Java8Parser.DOT);
	            this.state = 1185;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 1184;
	                this.typeArguments();
	            }

	            this.state = 1187;
	            this.match(Java8Parser.SUPER);
	            this.state = 1188;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1190;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 1189;
	                this.argumentList();
	            }

	            this.state = 1192;
	            this.match(Java8Parser.RPAREN);
	            this.state = 1193;
	            this.match(Java8Parser.SEMI);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1195;
	            this.primary();
	            this.state = 1196;
	            this.match(Java8Parser.DOT);
	            this.state = 1198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 1197;
	                this.typeArguments();
	            }

	            this.state = 1200;
	            this.match(Java8Parser.SUPER);
	            this.state = 1201;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 1202;
	                this.argumentList();
	            }

	            this.state = 1205;
	            this.match(Java8Parser.RPAREN);
	            this.state = 1206;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDeclaration() {
	    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Java8Parser.RULE_enumDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1213;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.ABSTRACT || _la===Java8Parser.FINAL || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)))) !== 0) || _la===Java8Parser.AT) {
	            this.state = 1210;
	            this.classModifier();
	            this.state = 1215;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1216;
	        this.match(Java8Parser.ENUM);
	        this.state = 1217;
	        this.match(Java8Parser.Identifier);
	        this.state = 1219;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.IMPLEMENTS) {
	            this.state = 1218;
	            this.superinterfaces();
	        }

	        this.state = 1221;
	        this.enumBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBody() {
	    let localctx = new EnumBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Java8Parser.RULE_enumBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1223;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1224;
	            this.enumConstantList();
	        }

	        this.state = 1228;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.COMMA) {
	            this.state = 1227;
	            this.match(Java8Parser.COMMA);
	        }

	        this.state = 1231;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.SEMI) {
	            this.state = 1230;
	            this.enumBodyDeclarations();
	        }

	        this.state = 1233;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantList() {
	    let localctx = new EnumConstantListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Java8Parser.RULE_enumConstantList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1235;
	        this.enumConstant();
	        this.state = 1240;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,117,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1236;
	                this.match(Java8Parser.COMMA);
	                this.state = 1237;
	                this.enumConstant(); 
	            }
	            this.state = 1242;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,117,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstant() {
	    let localctx = new EnumConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Java8Parser.RULE_enumConstant);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 1243;
	            this.enumConstantModifier();
	            this.state = 1248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1249;
	        this.match(Java8Parser.Identifier);
	        this.state = 1255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LPAREN) {
	            this.state = 1250;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1252;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 1251;
	                this.argumentList();
	            }

	            this.state = 1254;
	            this.match(Java8Parser.RPAREN);
	        }

	        this.state = 1258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LBRACE) {
	            this.state = 1257;
	            this.classBody();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantModifier() {
	    let localctx = new EnumConstantModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Java8Parser.RULE_enumConstantModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1260;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBodyDeclarations() {
	    let localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, Java8Parser.RULE_enumBodyDeclarations);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1262;
	        this.match(Java8Parser.SEMI);
	        this.state = 1266;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NATIVE))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.TRANSIENT - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.VOLATILE - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.LT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1263;
	            this.classBodyDeclaration();
	            this.state = 1268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceDeclaration() {
	    let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Java8Parser.RULE_interfaceDeclaration);
	    try {
	        this.state = 1271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1269;
	            this.normalInterfaceDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1270;
	            this.annotationTypeDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalInterfaceDeclaration() {
	    let localctx = new NormalInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Java8Parser.RULE_normalInterfaceDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1276;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.ABSTRACT || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)))) !== 0) || _la===Java8Parser.AT) {
	            this.state = 1273;
	            this.interfaceModifier();
	            this.state = 1278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1279;
	        this.match(Java8Parser.INTERFACE);
	        this.state = 1280;
	        this.match(Java8Parser.Identifier);
	        this.state = 1282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LT) {
	            this.state = 1281;
	            this.typeParameters();
	        }

	        this.state = 1285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.EXTENDS) {
	            this.state = 1284;
	            this.extendsInterfaces();
	        }

	        this.state = 1287;
	        this.interfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceModifier() {
	    let localctx = new InterfaceModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Java8Parser.RULE_interfaceModifier);
	    try {
	        this.state = 1296;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1289;
	            this.annotation();
	            break;
	        case Java8Parser.PUBLIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1290;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case Java8Parser.PROTECTED:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1291;
	            this.match(Java8Parser.PROTECTED);
	            break;
	        case Java8Parser.PRIVATE:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1292;
	            this.match(Java8Parser.PRIVATE);
	            break;
	        case Java8Parser.ABSTRACT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1293;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        case Java8Parser.STATIC:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1294;
	            this.match(Java8Parser.STATIC);
	            break;
	        case Java8Parser.STRICTFP:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1295;
	            this.match(Java8Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extendsInterfaces() {
	    let localctx = new ExtendsInterfacesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Java8Parser.RULE_extendsInterfaces);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1298;
	        this.match(Java8Parser.EXTENDS);
	        this.state = 1299;
	        this.interfaceTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBody() {
	    let localctx = new InterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Java8Parser.RULE_interfaceBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1301;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1305;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DEFAULT) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.LT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1302;
	            this.interfaceMemberDeclaration();
	            this.state = 1307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1308;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMemberDeclaration() {
	    let localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Java8Parser.RULE_interfaceMemberDeclaration);
	    try {
	        this.state = 1315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1310;
	            this.constantDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1311;
	            this.interfaceMethodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1312;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1313;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1314;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclaration() {
	    let localctx = new ConstantDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Java8Parser.RULE_constantDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 18)) & ~0x1f) == 0 && ((1 << (_la - 18)) & ((1 << (Java8Parser.FINAL - 18)) | (1 << (Java8Parser.PUBLIC - 18)) | (1 << (Java8Parser.STATIC - 18)))) !== 0) || _la===Java8Parser.AT) {
	            this.state = 1317;
	            this.constantModifier();
	            this.state = 1322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1323;
	        this.unannType();
	        this.state = 1324;
	        this.variableDeclaratorList();
	        this.state = 1325;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantModifier() {
	    let localctx = new ConstantModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Java8Parser.RULE_constantModifier);
	    try {
	        this.state = 1331;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1327;
	            this.annotation();
	            break;
	        case Java8Parser.PUBLIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1328;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case Java8Parser.STATIC:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1329;
	            this.match(Java8Parser.STATIC);
	            break;
	        case Java8Parser.FINAL:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1330;
	            this.match(Java8Parser.FINAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodDeclaration() {
	    let localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Java8Parser.RULE_interfaceMethodDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.ABSTRACT || _la===Java8Parser.DEFAULT || ((((_la - 35)) & ~0x1f) == 0 && ((1 << (_la - 35)) & ((1 << (Java8Parser.PUBLIC - 35)) | (1 << (Java8Parser.STATIC - 35)) | (1 << (Java8Parser.STRICTFP - 35)))) !== 0) || _la===Java8Parser.AT) {
	            this.state = 1333;
	            this.interfaceMethodModifier();
	            this.state = 1338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1339;
	        this.methodHeader();
	        this.state = 1340;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodModifier() {
	    let localctx = new InterfaceMethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Java8Parser.RULE_interfaceMethodModifier);
	    try {
	        this.state = 1348;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1342;
	            this.annotation();
	            break;
	        case Java8Parser.PUBLIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1343;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case Java8Parser.ABSTRACT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1344;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        case Java8Parser.DEFAULT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1345;
	            this.match(Java8Parser.DEFAULT);
	            break;
	        case Java8Parser.STATIC:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1346;
	            this.match(Java8Parser.STATIC);
	            break;
	        case Java8Parser.STRICTFP:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1347;
	            this.match(Java8Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeDeclaration() {
	    let localctx = new AnnotationTypeDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Java8Parser.RULE_annotationTypeDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1353;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1350;
	                this.interfaceModifier(); 
	            }
	            this.state = 1355;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
	        }

	        this.state = 1356;
	        this.match(Java8Parser.AT);
	        this.state = 1357;
	        this.match(Java8Parser.INTERFACE);
	        this.state = 1358;
	        this.match(Java8Parser.Identifier);
	        this.state = 1359;
	        this.annotationTypeBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeBody() {
	    let localctx = new AnnotationTypeBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Java8Parser.RULE_annotationTypeBody);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1361;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1365;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.INTERFACE) | (1 << Java8Parser.LONG))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1362;
	            this.annotationTypeMemberDeclaration();
	            this.state = 1367;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1368;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeMemberDeclaration() {
	    let localctx = new AnnotationTypeMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Java8Parser.RULE_annotationTypeMemberDeclaration);
	    try {
	        this.state = 1375;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1370;
	            this.annotationTypeElementDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1371;
	            this.constantDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1372;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1373;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1374;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementDeclaration() {
	    let localctx = new AnnotationTypeElementDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Java8Parser.RULE_annotationTypeElementDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1380;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.ABSTRACT || _la===Java8Parser.PUBLIC || _la===Java8Parser.AT) {
	            this.state = 1377;
	            this.annotationTypeElementModifier();
	            this.state = 1382;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1383;
	        this.unannType();
	        this.state = 1384;
	        this.match(Java8Parser.Identifier);
	        this.state = 1385;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1386;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1388;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LBRACK || _la===Java8Parser.AT) {
	            this.state = 1387;
	            this.dims();
	        }

	        this.state = 1391;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.DEFAULT) {
	            this.state = 1390;
	            this.defaultValue();
	        }

	        this.state = 1393;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationTypeElementModifier() {
	    let localctx = new AnnotationTypeElementModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Java8Parser.RULE_annotationTypeElementModifier);
	    try {
	        this.state = 1398;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1395;
	            this.annotation();
	            break;
	        case Java8Parser.PUBLIC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1396;
	            this.match(Java8Parser.PUBLIC);
	            break;
	        case Java8Parser.ABSTRACT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1397;
	            this.match(Java8Parser.ABSTRACT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Java8Parser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1400;
	        this.match(Java8Parser.DEFAULT);
	        this.state = 1401;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Java8Parser.RULE_annotation);
	    try {
	        this.state = 1406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1403;
	            this.normalAnnotation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1404;
	            this.markerAnnotation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1405;
	            this.singleElementAnnotation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalAnnotation() {
	    let localctx = new NormalAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Java8Parser.RULE_normalAnnotation);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1408;
	        this.match(Java8Parser.AT);
	        this.state = 1409;
	        this.typeName();
	        this.state = 1410;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1412;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.Identifier) {
	            this.state = 1411;
	            this.elementValuePairList();
	        }

	        this.state = 1414;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePairList() {
	    let localctx = new ElementValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Java8Parser.RULE_elementValuePairList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1416;
	        this.elementValuePair();
	        this.state = 1421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.COMMA) {
	            this.state = 1417;
	            this.match(Java8Parser.COMMA);
	            this.state = 1418;
	            this.elementValuePair();
	            this.state = 1423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePair() {
	    let localctx = new ElementValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Java8Parser.RULE_elementValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1424;
	        this.match(Java8Parser.Identifier);
	        this.state = 1425;
	        this.match(Java8Parser.ASSIGN);
	        this.state = 1426;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValue() {
	    let localctx = new ElementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Java8Parser.RULE_elementValue);
	    try {
	        this.state = 1431;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1428;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1429;
	            this.elementValueArrayInitializer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1430;
	            this.annotation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueArrayInitializer() {
	    let localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, Java8Parser.RULE_elementValueArrayInitializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1433;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)) | (1 << (Java8Parser.LBRACE - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1434;
	            this.elementValueList();
	        }

	        this.state = 1438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.COMMA) {
	            this.state = 1437;
	            this.match(Java8Parser.COMMA);
	        }

	        this.state = 1440;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueList() {
	    let localctx = new ElementValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, Java8Parser.RULE_elementValueList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1442;
	        this.elementValue();
	        this.state = 1447;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,147,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1443;
	                this.match(Java8Parser.COMMA);
	                this.state = 1444;
	                this.elementValue(); 
	            }
	            this.state = 1449;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,147,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	markerAnnotation() {
	    let localctx = new MarkerAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, Java8Parser.RULE_markerAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1450;
	        this.match(Java8Parser.AT);
	        this.state = 1451;
	        this.typeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleElementAnnotation() {
	    let localctx = new SingleElementAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, Java8Parser.RULE_singleElementAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1453;
	        this.match(Java8Parser.AT);
	        this.state = 1454;
	        this.typeName();
	        this.state = 1455;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1456;
	        this.elementValue();
	        this.state = 1457;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayInitializer() {
	    let localctx = new ArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, Java8Parser.RULE_arrayInitializer);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1459;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1461;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)) | (1 << (Java8Parser.LBRACE - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1460;
	            this.variableInitializerList();
	        }

	        this.state = 1464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.COMMA) {
	            this.state = 1463;
	            this.match(Java8Parser.COMMA);
	        }

	        this.state = 1466;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializerList() {
	    let localctx = new VariableInitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, Java8Parser.RULE_variableInitializerList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1468;
	        this.variableInitializer();
	        this.state = 1473;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,150,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1469;
	                this.match(Java8Parser.COMMA);
	                this.state = 1470;
	                this.variableInitializer(); 
	            }
	            this.state = 1475;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,150,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, Java8Parser.RULE_block);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1476;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.ASSERT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BREAK) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.CONTINUE) | (1 << Java8Parser.DO) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.FOR) | (1 << Java8Parser.IF) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.RETURN - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SUPER - 33)) | (1 << (Java8Parser.SWITCH - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.THIS - 33)) | (1 << (Java8Parser.THROW - 33)) | (1 << (Java8Parser.TRY - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.WHILE - 33)) | (1 << (Java8Parser.IntegerLiteral - 33)) | (1 << (Java8Parser.FloatingPointLiteral - 33)) | (1 << (Java8Parser.BooleanLiteral - 33)) | (1 << (Java8Parser.CharacterLiteral - 33)) | (1 << (Java8Parser.StringLiteral - 33)) | (1 << (Java8Parser.NullLiteral - 33)) | (1 << (Java8Parser.LPAREN - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
	            this.state = 1477;
	            this.blockStatements();
	        }

	        this.state = 1480;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatements() {
	    let localctx = new BlockStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, Java8Parser.RULE_blockStatements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1483; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1482;
	            this.blockStatement();
	            this.state = 1485; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.ABSTRACT) | (1 << Java8Parser.ASSERT) | (1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BREAK) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.CLASS) | (1 << Java8Parser.CONTINUE) | (1 << Java8Parser.DO) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.ENUM) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.FOR) | (1 << Java8Parser.IF) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (Java8Parser.PRIVATE - 33)) | (1 << (Java8Parser.PROTECTED - 33)) | (1 << (Java8Parser.PUBLIC - 33)) | (1 << (Java8Parser.RETURN - 33)) | (1 << (Java8Parser.SHORT - 33)) | (1 << (Java8Parser.STATIC - 33)) | (1 << (Java8Parser.STRICTFP - 33)) | (1 << (Java8Parser.SUPER - 33)) | (1 << (Java8Parser.SWITCH - 33)) | (1 << (Java8Parser.SYNCHRONIZED - 33)) | (1 << (Java8Parser.THIS - 33)) | (1 << (Java8Parser.THROW - 33)) | (1 << (Java8Parser.TRY - 33)) | (1 << (Java8Parser.VOID - 33)) | (1 << (Java8Parser.WHILE - 33)) | (1 << (Java8Parser.IntegerLiteral - 33)) | (1 << (Java8Parser.FloatingPointLiteral - 33)) | (1 << (Java8Parser.BooleanLiteral - 33)) | (1 << (Java8Parser.CharacterLiteral - 33)) | (1 << (Java8Parser.StringLiteral - 33)) | (1 << (Java8Parser.NullLiteral - 33)) | (1 << (Java8Parser.LPAREN - 33)) | (1 << (Java8Parser.LBRACE - 33)) | (1 << (Java8Parser.SEMI - 33)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, Java8Parser.RULE_blockStatement);
	    try {
	        this.state = 1490;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1487;
	            this.localVariableDeclarationStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1488;
	            this.classDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1489;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclarationStatement() {
	    let localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, Java8Parser.RULE_localVariableDeclarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1492;
	        this.localVariableDeclaration();
	        this.state = 1493;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, Java8Parser.RULE_localVariableDeclaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
	            this.state = 1495;
	            this.variableModifier();
	            this.state = 1500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1501;
	        this.unannType();
	        this.state = 1502;
	        this.variableDeclaratorList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, Java8Parser.RULE_statement);
	    try {
	        this.state = 1510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1504;
	            this.statementWithoutTrailingSubstatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1505;
	            this.labeledStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1506;
	            this.ifThenStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1507;
	            this.ifThenElseStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1508;
	            this.whileStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1509;
	            this.forStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementNoShortIf() {
	    let localctx = new StatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, Java8Parser.RULE_statementNoShortIf);
	    try {
	        this.state = 1517;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1512;
	            this.statementWithoutTrailingSubstatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1513;
	            this.labeledStatementNoShortIf();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1514;
	            this.ifThenElseStatementNoShortIf();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1515;
	            this.whileStatementNoShortIf();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1516;
	            this.forStatementNoShortIf();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementWithoutTrailingSubstatement() {
	    let localctx = new StatementWithoutTrailingSubstatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, Java8Parser.RULE_statementWithoutTrailingSubstatement);
	    try {
	        this.state = 1531;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.LBRACE:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1519;
	            this.block();
	            break;
	        case Java8Parser.SEMI:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1520;
	            this.emptyStatement();
	            break;
	        case Java8Parser.BOOLEAN:
	        case Java8Parser.BYTE:
	        case Java8Parser.CHAR:
	        case Java8Parser.DOUBLE:
	        case Java8Parser.FLOAT:
	        case Java8Parser.INT:
	        case Java8Parser.LONG:
	        case Java8Parser.NEW:
	        case Java8Parser.SHORT:
	        case Java8Parser.SUPER:
	        case Java8Parser.THIS:
	        case Java8Parser.VOID:
	        case Java8Parser.IntegerLiteral:
	        case Java8Parser.FloatingPointLiteral:
	        case Java8Parser.BooleanLiteral:
	        case Java8Parser.CharacterLiteral:
	        case Java8Parser.StringLiteral:
	        case Java8Parser.NullLiteral:
	        case Java8Parser.LPAREN:
	        case Java8Parser.INC:
	        case Java8Parser.DEC:
	        case Java8Parser.Identifier:
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1521;
	            this.expressionStatement();
	            break;
	        case Java8Parser.ASSERT:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1522;
	            this.assertStatement();
	            break;
	        case Java8Parser.SWITCH:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1523;
	            this.switchStatement();
	            break;
	        case Java8Parser.DO:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1524;
	            this.doStatement();
	            break;
	        case Java8Parser.BREAK:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1525;
	            this.breakStatement();
	            break;
	        case Java8Parser.CONTINUE:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1526;
	            this.continueStatement();
	            break;
	        case Java8Parser.RETURN:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1527;
	            this.returnStatement();
	            break;
	        case Java8Parser.SYNCHRONIZED:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1528;
	            this.synchronizedStatement();
	            break;
	        case Java8Parser.THROW:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1529;
	            this.throwStatement();
	            break;
	        case Java8Parser.TRY:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1530;
	            this.tryStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement() {
	    let localctx = new EmptyStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, Java8Parser.RULE_emptyStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1533;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, Java8Parser.RULE_labeledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1535;
	        this.match(Java8Parser.Identifier);
	        this.state = 1536;
	        this.match(Java8Parser.COLON);
	        this.state = 1537;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatementNoShortIf() {
	    let localctx = new LabeledStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, Java8Parser.RULE_labeledStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1539;
	        this.match(Java8Parser.Identifier);
	        this.state = 1540;
	        this.match(Java8Parser.COLON);
	        this.state = 1541;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, Java8Parser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1543;
	        this.statementExpression();
	        this.state = 1544;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpression() {
	    let localctx = new StatementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, Java8Parser.RULE_statementExpression);
	    try {
	        this.state = 1553;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1546;
	            this.assignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1547;
	            this.preIncrementExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1548;
	            this.preDecrementExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1549;
	            this.postIncrementExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1550;
	            this.postDecrementExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1551;
	            this.methodInvocation();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1552;
	            this.classInstanceCreationExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenStatement() {
	    let localctx = new IfThenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, Java8Parser.RULE_ifThenStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1555;
	        this.match(Java8Parser.IF);
	        this.state = 1556;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1557;
	        this.expression();
	        this.state = 1558;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1559;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStatement() {
	    let localctx = new IfThenElseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, Java8Parser.RULE_ifThenElseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1561;
	        this.match(Java8Parser.IF);
	        this.state = 1562;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1563;
	        this.expression();
	        this.state = 1564;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1565;
	        this.statementNoShortIf();
	        this.state = 1566;
	        this.match(Java8Parser.ELSE);
	        this.state = 1567;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStatementNoShortIf() {
	    let localctx = new IfThenElseStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, Java8Parser.RULE_ifThenElseStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1569;
	        this.match(Java8Parser.IF);
	        this.state = 1570;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1571;
	        this.expression();
	        this.state = 1572;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1573;
	        this.statementNoShortIf();
	        this.state = 1574;
	        this.match(Java8Parser.ELSE);
	        this.state = 1575;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertStatement() {
	    let localctx = new AssertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, Java8Parser.RULE_assertStatement);
	    try {
	        this.state = 1587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,159,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1577;
	            this.match(Java8Parser.ASSERT);
	            this.state = 1578;
	            this.expression();
	            this.state = 1579;
	            this.match(Java8Parser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1581;
	            this.match(Java8Parser.ASSERT);
	            this.state = 1582;
	            this.expression();
	            this.state = 1583;
	            this.match(Java8Parser.COLON);
	            this.state = 1584;
	            this.expression();
	            this.state = 1585;
	            this.match(Java8Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, Java8Parser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1589;
	        this.match(Java8Parser.SWITCH);
	        this.state = 1590;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1591;
	        this.expression();
	        this.state = 1592;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1593;
	        this.switchBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlock() {
	    let localctx = new SwitchBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, Java8Parser.RULE_switchBlock);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1595;
	        this.match(Java8Parser.LBRACE);
	        this.state = 1599;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,160,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1596;
	                this.switchBlockStatementGroup(); 
	            }
	            this.state = 1601;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,160,this._ctx);
	        }

	        this.state = 1605;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.CASE || _la===Java8Parser.DEFAULT) {
	            this.state = 1602;
	            this.switchLabel();
	            this.state = 1607;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1608;
	        this.match(Java8Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlockStatementGroup() {
	    let localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, Java8Parser.RULE_switchBlockStatementGroup);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1610;
	        this.switchLabels();
	        this.state = 1611;
	        this.blockStatements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabels() {
	    let localctx = new SwitchLabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, Java8Parser.RULE_switchLabels);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1613;
	        this.switchLabel();
	        this.state = 1617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.CASE || _la===Java8Parser.DEFAULT) {
	            this.state = 1614;
	            this.switchLabel();
	            this.state = 1619;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabel() {
	    let localctx = new SwitchLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, Java8Parser.RULE_switchLabel);
	    try {
	        this.state = 1630;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1620;
	            this.match(Java8Parser.CASE);
	            this.state = 1621;
	            this.constantExpression();
	            this.state = 1622;
	            this.match(Java8Parser.COLON);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1624;
	            this.match(Java8Parser.CASE);
	            this.state = 1625;
	            this.enumConstantName();
	            this.state = 1626;
	            this.match(Java8Parser.COLON);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1628;
	            this.match(Java8Parser.DEFAULT);
	            this.state = 1629;
	            this.match(Java8Parser.COLON);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantName() {
	    let localctx = new EnumConstantNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, Java8Parser.RULE_enumConstantName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1632;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, Java8Parser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1634;
	        this.match(Java8Parser.WHILE);
	        this.state = 1635;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1636;
	        this.expression();
	        this.state = 1637;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1638;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatementNoShortIf() {
	    let localctx = new WhileStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, Java8Parser.RULE_whileStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1640;
	        this.match(Java8Parser.WHILE);
	        this.state = 1641;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1642;
	        this.expression();
	        this.state = 1643;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1644;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, Java8Parser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1646;
	        this.match(Java8Parser.DO);
	        this.state = 1647;
	        this.statement();
	        this.state = 1648;
	        this.match(Java8Parser.WHILE);
	        this.state = 1649;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1650;
	        this.expression();
	        this.state = 1651;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1652;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, Java8Parser.RULE_forStatement);
	    try {
	        this.state = 1656;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1654;
	            this.basicForStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1655;
	            this.enhancedForStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatementNoShortIf() {
	    let localctx = new ForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, Java8Parser.RULE_forStatementNoShortIf);
	    try {
	        this.state = 1660;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1658;
	            this.basicForStatementNoShortIf();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1659;
	            this.enhancedForStatementNoShortIf();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicForStatement() {
	    let localctx = new BasicForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, Java8Parser.RULE_basicForStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1662;
	        this.match(Java8Parser.FOR);
	        this.state = 1663;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1665;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
	            this.state = 1664;
	            this.forInit();
	        }

	        this.state = 1667;
	        this.match(Java8Parser.SEMI);
	        this.state = 1669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1668;
	            this.expression();
	        }

	        this.state = 1671;
	        this.match(Java8Parser.SEMI);
	        this.state = 1673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
	            this.state = 1672;
	            this.forUpdate();
	        }

	        this.state = 1675;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1676;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicForStatementNoShortIf() {
	    let localctx = new BasicForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, Java8Parser.RULE_basicForStatementNoShortIf);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1678;
	        this.match(Java8Parser.FOR);
	        this.state = 1679;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1681;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
	            this.state = 1680;
	            this.forInit();
	        }

	        this.state = 1683;
	        this.match(Java8Parser.SEMI);
	        this.state = 1685;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1684;
	            this.expression();
	        }

	        this.state = 1687;
	        this.match(Java8Parser.SEMI);
	        this.state = 1689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 79)) & ~0x1f) == 0 && ((1 << (_la - 79)) & ((1 << (Java8Parser.INC - 79)) | (1 << (Java8Parser.DEC - 79)) | (1 << (Java8Parser.Identifier - 79)) | (1 << (Java8Parser.AT - 79)))) !== 0)) {
	            this.state = 1688;
	            this.forUpdate();
	        }

	        this.state = 1691;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1692;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInit() {
	    let localctx = new ForInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, Java8Parser.RULE_forInit);
	    try {
	        this.state = 1696;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,172,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1694;
	            this.statementExpressionList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1695;
	            this.localVariableDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forUpdate() {
	    let localctx = new ForUpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, Java8Parser.RULE_forUpdate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1698;
	        this.statementExpressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpressionList() {
	    let localctx = new StatementExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, Java8Parser.RULE_statementExpressionList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1700;
	        this.statementExpression();
	        this.state = 1705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.COMMA) {
	            this.state = 1701;
	            this.match(Java8Parser.COMMA);
	            this.state = 1702;
	            this.statementExpression();
	            this.state = 1707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForStatement() {
	    let localctx = new EnhancedForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, Java8Parser.RULE_enhancedForStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1708;
	        this.match(Java8Parser.FOR);
	        this.state = 1709;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1713;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
	            this.state = 1710;
	            this.variableModifier();
	            this.state = 1715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1716;
	        this.unannType();
	        this.state = 1717;
	        this.variableDeclaratorId();
	        this.state = 1718;
	        this.match(Java8Parser.COLON);
	        this.state = 1719;
	        this.expression();
	        this.state = 1720;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1721;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForStatementNoShortIf() {
	    let localctx = new EnhancedForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, Java8Parser.RULE_enhancedForStatementNoShortIf);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1723;
	        this.match(Java8Parser.FOR);
	        this.state = 1724;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
	            this.state = 1725;
	            this.variableModifier();
	            this.state = 1730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1731;
	        this.unannType();
	        this.state = 1732;
	        this.variableDeclaratorId();
	        this.state = 1733;
	        this.match(Java8Parser.COLON);
	        this.state = 1734;
	        this.expression();
	        this.state = 1735;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1736;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, Java8Parser.RULE_breakStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1738;
	        this.match(Java8Parser.BREAK);
	        this.state = 1740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.Identifier) {
	            this.state = 1739;
	            this.match(Java8Parser.Identifier);
	        }

	        this.state = 1742;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, Java8Parser.RULE_continueStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1744;
	        this.match(Java8Parser.CONTINUE);
	        this.state = 1746;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.Identifier) {
	            this.state = 1745;
	            this.match(Java8Parser.Identifier);
	        }

	        this.state = 1748;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, Java8Parser.RULE_returnStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1750;
	        this.match(Java8Parser.RETURN);
	        this.state = 1752;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 1751;
	            this.expression();
	        }

	        this.state = 1754;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, Java8Parser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1756;
	        this.match(Java8Parser.THROW);
	        this.state = 1757;
	        this.expression();
	        this.state = 1758;
	        this.match(Java8Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	synchronizedStatement() {
	    let localctx = new SynchronizedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, Java8Parser.RULE_synchronizedStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1760;
	        this.match(Java8Parser.SYNCHRONIZED);
	        this.state = 1761;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1762;
	        this.expression();
	        this.state = 1763;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1764;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, Java8Parser.RULE_tryStatement);
	    var _la = 0; // Token type
	    try {
	        this.state = 1778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1766;
	            this.match(Java8Parser.TRY);
	            this.state = 1767;
	            this.block();
	            this.state = 1768;
	            this.catches();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1770;
	            this.match(Java8Parser.TRY);
	            this.state = 1771;
	            this.block();
	            this.state = 1773;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.CATCH) {
	                this.state = 1772;
	                this.catches();
	            }

	            this.state = 1775;
	            this.finally_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1777;
	            this.tryWithResourcesStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catches() {
	    let localctx = new CatchesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, Java8Parser.RULE_catches);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1780;
	        this.catchClause();
	        this.state = 1784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.CATCH) {
	            this.state = 1781;
	            this.catchClause();
	            this.state = 1786;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, Java8Parser.RULE_catchClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1787;
	        this.match(Java8Parser.CATCH);
	        this.state = 1788;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1789;
	        this.catchFormalParameter();
	        this.state = 1790;
	        this.match(Java8Parser.RPAREN);
	        this.state = 1791;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchFormalParameter() {
	    let localctx = new CatchFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, Java8Parser.RULE_catchFormalParameter);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1796;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
	            this.state = 1793;
	            this.variableModifier();
	            this.state = 1798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1799;
	        this.catchType();
	        this.state = 1800;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchType() {
	    let localctx = new CatchTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, Java8Parser.RULE_catchType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1802;
	        this.unannClassType();
	        this.state = 1807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.BITOR) {
	            this.state = 1803;
	            this.match(Java8Parser.BITOR);
	            this.state = 1804;
	            this.classType();
	            this.state = 1809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finally_() {
	    let localctx = new Finally_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, Java8Parser.RULE_finally_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1810;
	        this.match(Java8Parser.FINALLY);
	        this.state = 1811;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryWithResourcesStatement() {
	    let localctx = new TryWithResourcesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, Java8Parser.RULE_tryWithResourcesStatement);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1813;
	        this.match(Java8Parser.TRY);
	        this.state = 1814;
	        this.resourceSpecification();
	        this.state = 1815;
	        this.block();
	        this.state = 1817;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.CATCH) {
	            this.state = 1816;
	            this.catches();
	        }

	        this.state = 1820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.FINALLY) {
	            this.state = 1819;
	            this.finally_();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceSpecification() {
	    let localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, Java8Parser.RULE_resourceSpecification);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1822;
	        this.match(Java8Parser.LPAREN);
	        this.state = 1823;
	        this.resourceList();
	        this.state = 1825;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.SEMI) {
	            this.state = 1824;
	            this.match(Java8Parser.SEMI);
	        }

	        this.state = 1827;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceList() {
	    let localctx = new ResourceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, Java8Parser.RULE_resourceList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1829;
	        this.resource();
	        this.state = 1834;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,187,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1830;
	                this.match(Java8Parser.SEMI);
	                this.state = 1831;
	                this.resource(); 
	            }
	            this.state = 1836;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,187,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, Java8Parser.RULE_resource);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1840;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.FINAL || _la===Java8Parser.AT) {
	            this.state = 1837;
	            this.variableModifier();
	            this.state = 1842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1843;
	        this.unannType();
	        this.state = 1844;
	        this.variableDeclaratorId();
	        this.state = 1845;
	        this.match(Java8Parser.ASSIGN);
	        this.state = 1846;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, Java8Parser.RULE_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1850;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1848;
	            this.primaryNoNewArray_lfno_primary();
	            break;

	        case 2:
	            this.state = 1849;
	            this.arrayCreationExpression();
	            break;

	        }
	        this.state = 1855;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,190,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1852;
	                this.primaryNoNewArray_lf_primary(); 
	            }
	            this.state = 1857;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,190,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray() {
	    let localctx = new PrimaryNoNewArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, Java8Parser.RULE_primaryNoNewArray);
	    var _la = 0; // Token type
	    try {
	        this.state = 1887;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1858;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1859;
	            this.typeName();
	            this.state = 1864;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.LBRACK) {
	                this.state = 1860;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1861;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1866;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1867;
	            this.match(Java8Parser.DOT);
	            this.state = 1868;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1870;
	            this.match(Java8Parser.VOID);
	            this.state = 1871;
	            this.match(Java8Parser.DOT);
	            this.state = 1872;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1873;
	            this.match(Java8Parser.THIS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1874;
	            this.typeName();
	            this.state = 1875;
	            this.match(Java8Parser.DOT);
	            this.state = 1876;
	            this.match(Java8Parser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1878;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1879;
	            this.expression();
	            this.state = 1880;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1882;
	            this.classInstanceCreationExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1883;
	            this.fieldAccess();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1884;
	            this.arrayAccess();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1885;
	            this.methodInvocation();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1886;
	            this.methodReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lf_arrayAccess() {
	    let localctx = new PrimaryNoNewArray_lf_arrayAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lfno_arrayAccess() {
	    let localctx = new PrimaryNoNewArray_lfno_arrayAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess);
	    var _la = 0; // Token type
	    try {
	        this.state = 1919;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1891;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1892;
	            this.typeName();
	            this.state = 1897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.LBRACK) {
	                this.state = 1893;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1894;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1899;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1900;
	            this.match(Java8Parser.DOT);
	            this.state = 1901;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1903;
	            this.match(Java8Parser.VOID);
	            this.state = 1904;
	            this.match(Java8Parser.DOT);
	            this.state = 1905;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1906;
	            this.match(Java8Parser.THIS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1907;
	            this.typeName();
	            this.state = 1908;
	            this.match(Java8Parser.DOT);
	            this.state = 1909;
	            this.match(Java8Parser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1911;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1912;
	            this.expression();
	            this.state = 1913;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1915;
	            this.classInstanceCreationExpression();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1916;
	            this.fieldAccess();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1917;
	            this.methodInvocation();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1918;
	            this.methodReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lf_primary() {
	    let localctx = new PrimaryNoNewArray_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, Java8Parser.RULE_primaryNoNewArray_lf_primary);
	    try {
	        this.state = 1926;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1921;
	            this.classInstanceCreationExpression_lf_primary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1922;
	            this.fieldAccess_lf_primary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1923;
	            this.arrayAccess_lf_primary();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1924;
	            this.methodInvocation_lf_primary();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1925;
	            this.methodReference_lf_primary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary() {
	    let localctx = new PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
	    let localctx = new PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary);
	    try {
	        this.state = 1934;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1930;
	            this.classInstanceCreationExpression_lf_primary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1931;
	            this.fieldAccess_lf_primary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1932;
	            this.methodInvocation_lf_primary();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1933;
	            this.methodReference_lf_primary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lfno_primary() {
	    let localctx = new PrimaryNoNewArray_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, Java8Parser.RULE_primaryNoNewArray_lfno_primary);
	    var _la = 0; // Token type
	    try {
	        this.state = 1976;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,199,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1936;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1937;
	            this.typeName();
	            this.state = 1942;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.LBRACK) {
	                this.state = 1938;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1939;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1944;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1945;
	            this.match(Java8Parser.DOT);
	            this.state = 1946;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1948;
	            this.unannPrimitiveType();
	            this.state = 1953;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.LBRACK) {
	                this.state = 1949;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1950;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1955;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1956;
	            this.match(Java8Parser.DOT);
	            this.state = 1957;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1959;
	            this.match(Java8Parser.VOID);
	            this.state = 1960;
	            this.match(Java8Parser.DOT);
	            this.state = 1961;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1962;
	            this.match(Java8Parser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1963;
	            this.typeName();
	            this.state = 1964;
	            this.match(Java8Parser.DOT);
	            this.state = 1965;
	            this.match(Java8Parser.THIS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1967;
	            this.match(Java8Parser.LPAREN);
	            this.state = 1968;
	            this.expression();
	            this.state = 1969;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1971;
	            this.classInstanceCreationExpression_lfno_primary();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1972;
	            this.fieldAccess_lfno_primary();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1973;
	            this.arrayAccess_lfno_primary();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1974;
	            this.methodInvocation_lfno_primary();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1975;
	            this.methodReference_lfno_primary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary() {
	    let localctx = new PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
	    let localctx = new PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary);
	    var _la = 0; // Token type
	    try {
	        this.state = 2019;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1980;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1981;
	            this.typeName();
	            this.state = 1986;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.LBRACK) {
	                this.state = 1982;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1983;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1988;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1989;
	            this.match(Java8Parser.DOT);
	            this.state = 1990;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1992;
	            this.unannPrimitiveType();
	            this.state = 1997;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.LBRACK) {
	                this.state = 1993;
	                this.match(Java8Parser.LBRACK);
	                this.state = 1994;
	                this.match(Java8Parser.RBRACK);
	                this.state = 1999;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2000;
	            this.match(Java8Parser.DOT);
	            this.state = 2001;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2003;
	            this.match(Java8Parser.VOID);
	            this.state = 2004;
	            this.match(Java8Parser.DOT);
	            this.state = 2005;
	            this.match(Java8Parser.CLASS);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2006;
	            this.match(Java8Parser.THIS);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2007;
	            this.typeName();
	            this.state = 2008;
	            this.match(Java8Parser.DOT);
	            this.state = 2009;
	            this.match(Java8Parser.THIS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2011;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2012;
	            this.expression();
	            this.state = 2013;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2015;
	            this.classInstanceCreationExpression_lfno_primary();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2016;
	            this.fieldAccess_lfno_primary();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2017;
	            this.methodInvocation_lfno_primary();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2018;
	            this.methodReference_lfno_primary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classInstanceCreationExpression() {
	    let localctx = new ClassInstanceCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, Java8Parser.RULE_classInstanceCreationExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 2104;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2021;
	            this.match(Java8Parser.NEW);
	            this.state = 2023;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2022;
	                this.typeArguments();
	            }

	            this.state = 2028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 2025;
	                this.annotation();
	                this.state = 2030;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2031;
	            this.match(Java8Parser.Identifier);
	            this.state = 2042;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.DOT) {
	                this.state = 2032;
	                this.match(Java8Parser.DOT);
	                this.state = 2036;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===Java8Parser.AT) {
	                    this.state = 2033;
	                    this.annotation();
	                    this.state = 2038;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2039;
	                this.match(Java8Parser.Identifier);
	                this.state = 2044;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2046;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2045;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2048;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2050;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2049;
	                this.argumentList();
	            }

	            this.state = 2052;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LBRACE) {
	                this.state = 2053;
	                this.classBody();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2056;
	            this.expressionName();
	            this.state = 2057;
	            this.match(Java8Parser.DOT);
	            this.state = 2058;
	            this.match(Java8Parser.NEW);
	            this.state = 2060;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2059;
	                this.typeArguments();
	            }

	            this.state = 2065;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 2062;
	                this.annotation();
	                this.state = 2067;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2068;
	            this.match(Java8Parser.Identifier);
	            this.state = 2070;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2069;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2072;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2074;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2073;
	                this.argumentList();
	            }

	            this.state = 2076;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LBRACE) {
	                this.state = 2077;
	                this.classBody();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2080;
	            this.primary();
	            this.state = 2081;
	            this.match(Java8Parser.DOT);
	            this.state = 2082;
	            this.match(Java8Parser.NEW);
	            this.state = 2084;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2083;
	                this.typeArguments();
	            }

	            this.state = 2089;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 2086;
	                this.annotation();
	                this.state = 2091;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2092;
	            this.match(Java8Parser.Identifier);
	            this.state = 2094;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2093;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2096;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2098;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2097;
	                this.argumentList();
	            }

	            this.state = 2100;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2102;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LBRACE) {
	                this.state = 2101;
	                this.classBody();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classInstanceCreationExpression_lf_primary() {
	    let localctx = new ClassInstanceCreationExpression_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, Java8Parser.RULE_classInstanceCreationExpression_lf_primary);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2106;
	        this.match(Java8Parser.DOT);
	        this.state = 2107;
	        this.match(Java8Parser.NEW);
	        this.state = 2109;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LT) {
	            this.state = 2108;
	            this.typeArguments();
	        }

	        this.state = 2114;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 2111;
	            this.annotation();
	            this.state = 2116;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2117;
	        this.match(Java8Parser.Identifier);
	        this.state = 2119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LT) {
	            this.state = 2118;
	            this.typeArgumentsOrDiamond();
	        }

	        this.state = 2121;
	        this.match(Java8Parser.LPAREN);
	        this.state = 2123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 2122;
	            this.argumentList();
	        }

	        this.state = 2125;
	        this.match(Java8Parser.RPAREN);
	        this.state = 2127;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        if(la_===1) {
	            this.state = 2126;
	            this.classBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classInstanceCreationExpression_lfno_primary() {
	    let localctx = new ClassInstanceCreationExpression_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, Java8Parser.RULE_classInstanceCreationExpression_lfno_primary);
	    var _la = 0; // Token type
	    try {
	        this.state = 2188;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.NEW:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2129;
	            this.match(Java8Parser.NEW);
	            this.state = 2131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2130;
	                this.typeArguments();
	            }

	            this.state = 2136;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 2133;
	                this.annotation();
	                this.state = 2138;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2139;
	            this.match(Java8Parser.Identifier);
	            this.state = 2150;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.DOT) {
	                this.state = 2140;
	                this.match(Java8Parser.DOT);
	                this.state = 2144;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===Java8Parser.AT) {
	                    this.state = 2141;
	                    this.annotation();
	                    this.state = 2146;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 2147;
	                this.match(Java8Parser.Identifier);
	                this.state = 2152;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2154;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2153;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2156;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2158;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2157;
	                this.argumentList();
	            }

	            this.state = 2160;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2162;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	            if(la_===1) {
	                this.state = 2161;
	                this.classBody();

	            }
	            break;
	        case Java8Parser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2164;
	            this.expressionName();
	            this.state = 2165;
	            this.match(Java8Parser.DOT);
	            this.state = 2166;
	            this.match(Java8Parser.NEW);
	            this.state = 2168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2167;
	                this.typeArguments();
	            }

	            this.state = 2173;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.AT) {
	                this.state = 2170;
	                this.annotation();
	                this.state = 2175;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2176;
	            this.match(Java8Parser.Identifier);
	            this.state = 2178;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2177;
	                this.typeArgumentsOrDiamond();
	            }

	            this.state = 2180;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2181;
	                this.argumentList();
	            }

	            this.state = 2184;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2186;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	            if(la_===1) {
	                this.state = 2185;
	                this.classBody();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentsOrDiamond() {
	    let localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, Java8Parser.RULE_typeArgumentsOrDiamond);
	    try {
	        this.state = 2193;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2190;
	            this.typeArguments();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2191;
	            this.match(Java8Parser.LT);
	            this.state = 2192;
	            this.match(Java8Parser.GT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldAccess() {
	    let localctx = new FieldAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, Java8Parser.RULE_fieldAccess);
	    try {
	        this.state = 2208;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2195;
	            this.primary();
	            this.state = 2196;
	            this.match(Java8Parser.DOT);
	            this.state = 2197;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2199;
	            this.match(Java8Parser.SUPER);
	            this.state = 2200;
	            this.match(Java8Parser.DOT);
	            this.state = 2201;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2202;
	            this.typeName();
	            this.state = 2203;
	            this.match(Java8Parser.DOT);
	            this.state = 2204;
	            this.match(Java8Parser.SUPER);
	            this.state = 2205;
	            this.match(Java8Parser.DOT);
	            this.state = 2206;
	            this.match(Java8Parser.Identifier);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldAccess_lf_primary() {
	    let localctx = new FieldAccess_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, Java8Parser.RULE_fieldAccess_lf_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2210;
	        this.match(Java8Parser.DOT);
	        this.state = 2211;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldAccess_lfno_primary() {
	    let localctx = new FieldAccess_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, Java8Parser.RULE_fieldAccess_lfno_primary);
	    try {
	        this.state = 2222;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.SUPER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2213;
	            this.match(Java8Parser.SUPER);
	            this.state = 2214;
	            this.match(Java8Parser.DOT);
	            this.state = 2215;
	            this.match(Java8Parser.Identifier);
	            break;
	        case Java8Parser.Identifier:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2216;
	            this.typeName();
	            this.state = 2217;
	            this.match(Java8Parser.DOT);
	            this.state = 2218;
	            this.match(Java8Parser.SUPER);
	            this.state = 2219;
	            this.match(Java8Parser.DOT);
	            this.state = 2220;
	            this.match(Java8Parser.Identifier);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayAccess() {
	    let localctx = new ArrayAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, Java8Parser.RULE_arrayAccess);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2234;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2224;
	            this.expressionName();
	            this.state = 2225;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2226;
	            this.expression();
	            this.state = 2227;
	            this.match(Java8Parser.RBRACK);
	            break;

	        case 2:
	            this.state = 2229;
	            this.primaryNoNewArray_lfno_arrayAccess();
	            this.state = 2230;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2231;
	            this.expression();
	            this.state = 2232;
	            this.match(Java8Parser.RBRACK);
	            break;

	        }
	        this.state = 2243;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.LBRACK) {
	            this.state = 2236;
	            this.primaryNoNewArray_lf_arrayAccess();
	            this.state = 2237;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2238;
	            this.expression();
	            this.state = 2239;
	            this.match(Java8Parser.RBRACK);
	            this.state = 2245;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayAccess_lf_primary() {
	    let localctx = new ArrayAccess_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, Java8Parser.RULE_arrayAccess_lf_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2246;
	        this.primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary();
	        this.state = 2247;
	        this.match(Java8Parser.LBRACK);
	        this.state = 2248;
	        this.expression();
	        this.state = 2249;
	        this.match(Java8Parser.RBRACK);
	        this.state = 2258;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,244,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2251;
	                this.primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary();
	                this.state = 2252;
	                this.match(Java8Parser.LBRACK);
	                this.state = 2253;
	                this.expression();
	                this.state = 2254;
	                this.match(Java8Parser.RBRACK); 
	            }
	            this.state = 2260;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,244,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayAccess_lfno_primary() {
	    let localctx = new ArrayAccess_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, Java8Parser.RULE_arrayAccess_lfno_primary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2271;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2261;
	            this.expressionName();
	            this.state = 2262;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2263;
	            this.expression();
	            this.state = 2264;
	            this.match(Java8Parser.RBRACK);
	            break;

	        case 2:
	            this.state = 2266;
	            this.primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary();
	            this.state = 2267;
	            this.match(Java8Parser.LBRACK);
	            this.state = 2268;
	            this.expression();
	            this.state = 2269;
	            this.match(Java8Parser.RBRACK);
	            break;

	        }
	        this.state = 2280;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,246,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2273;
	                this.primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary();
	                this.state = 2274;
	                this.match(Java8Parser.LBRACK);
	                this.state = 2275;
	                this.expression();
	                this.state = 2276;
	                this.match(Java8Parser.RBRACK); 
	            }
	            this.state = 2282;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,246,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodInvocation() {
	    let localctx = new MethodInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, Java8Parser.RULE_methodInvocation);
	    var _la = 0; // Token type
	    try {
	        this.state = 2351;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2283;
	            this.methodName();
	            this.state = 2284;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2286;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2285;
	                this.argumentList();
	            }

	            this.state = 2288;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2290;
	            this.typeName();
	            this.state = 2291;
	            this.match(Java8Parser.DOT);
	            this.state = 2293;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2292;
	                this.typeArguments();
	            }

	            this.state = 2295;
	            this.match(Java8Parser.Identifier);
	            this.state = 2296;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2297;
	                this.argumentList();
	            }

	            this.state = 2300;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2302;
	            this.expressionName();
	            this.state = 2303;
	            this.match(Java8Parser.DOT);
	            this.state = 2305;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2304;
	                this.typeArguments();
	            }

	            this.state = 2307;
	            this.match(Java8Parser.Identifier);
	            this.state = 2308;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2310;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2309;
	                this.argumentList();
	            }

	            this.state = 2312;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2314;
	            this.primary();
	            this.state = 2315;
	            this.match(Java8Parser.DOT);
	            this.state = 2317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2316;
	                this.typeArguments();
	            }

	            this.state = 2319;
	            this.match(Java8Parser.Identifier);
	            this.state = 2320;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2322;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2321;
	                this.argumentList();
	            }

	            this.state = 2324;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2326;
	            this.match(Java8Parser.SUPER);
	            this.state = 2327;
	            this.match(Java8Parser.DOT);
	            this.state = 2329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2328;
	                this.typeArguments();
	            }

	            this.state = 2331;
	            this.match(Java8Parser.Identifier);
	            this.state = 2332;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2334;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2333;
	                this.argumentList();
	            }

	            this.state = 2336;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2337;
	            this.typeName();
	            this.state = 2338;
	            this.match(Java8Parser.DOT);
	            this.state = 2339;
	            this.match(Java8Parser.SUPER);
	            this.state = 2340;
	            this.match(Java8Parser.DOT);
	            this.state = 2342;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2341;
	                this.typeArguments();
	            }

	            this.state = 2344;
	            this.match(Java8Parser.Identifier);
	            this.state = 2345;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2346;
	                this.argumentList();
	            }

	            this.state = 2349;
	            this.match(Java8Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodInvocation_lf_primary() {
	    let localctx = new MethodInvocation_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, Java8Parser.RULE_methodInvocation_lf_primary);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2353;
	        this.match(Java8Parser.DOT);
	        this.state = 2355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LT) {
	            this.state = 2354;
	            this.typeArguments();
	        }

	        this.state = 2357;
	        this.match(Java8Parser.Identifier);
	        this.state = 2358;
	        this.match(Java8Parser.LPAREN);
	        this.state = 2360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	            this.state = 2359;
	            this.argumentList();
	        }

	        this.state = 2362;
	        this.match(Java8Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodInvocation_lfno_primary() {
	    let localctx = new MethodInvocation_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, Java8Parser.RULE_methodInvocation_lfno_primary);
	    var _la = 0; // Token type
	    try {
	        this.state = 2420;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2364;
	            this.methodName();
	            this.state = 2365;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2367;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2366;
	                this.argumentList();
	            }

	            this.state = 2369;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2371;
	            this.typeName();
	            this.state = 2372;
	            this.match(Java8Parser.DOT);
	            this.state = 2374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2373;
	                this.typeArguments();
	            }

	            this.state = 2376;
	            this.match(Java8Parser.Identifier);
	            this.state = 2377;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2379;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2378;
	                this.argumentList();
	            }

	            this.state = 2381;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2383;
	            this.expressionName();
	            this.state = 2384;
	            this.match(Java8Parser.DOT);
	            this.state = 2386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2385;
	                this.typeArguments();
	            }

	            this.state = 2388;
	            this.match(Java8Parser.Identifier);
	            this.state = 2389;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2391;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2390;
	                this.argumentList();
	            }

	            this.state = 2393;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2395;
	            this.match(Java8Parser.SUPER);
	            this.state = 2396;
	            this.match(Java8Parser.DOT);
	            this.state = 2398;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2397;
	                this.typeArguments();
	            }

	            this.state = 2400;
	            this.match(Java8Parser.Identifier);
	            this.state = 2401;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2402;
	                this.argumentList();
	            }

	            this.state = 2405;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2406;
	            this.typeName();
	            this.state = 2407;
	            this.match(Java8Parser.DOT);
	            this.state = 2408;
	            this.match(Java8Parser.SUPER);
	            this.state = 2409;
	            this.match(Java8Parser.DOT);
	            this.state = 2411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2410;
	                this.typeArguments();
	            }

	            this.state = 2413;
	            this.match(Java8Parser.Identifier);
	            this.state = 2414;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2416;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG) | (1 << Java8Parser.NEW))) !== 0) || ((((_la - 37)) & ~0x1f) == 0 && ((1 << (_la - 37)) & ((1 << (Java8Parser.SHORT - 37)) | (1 << (Java8Parser.SUPER - 37)) | (1 << (Java8Parser.THIS - 37)) | (1 << (Java8Parser.VOID - 37)) | (1 << (Java8Parser.IntegerLiteral - 37)) | (1 << (Java8Parser.FloatingPointLiteral - 37)) | (1 << (Java8Parser.BooleanLiteral - 37)) | (1 << (Java8Parser.CharacterLiteral - 37)) | (1 << (Java8Parser.StringLiteral - 37)) | (1 << (Java8Parser.NullLiteral - 37)) | (1 << (Java8Parser.LPAREN - 37)))) !== 0) || ((((_la - 69)) & ~0x1f) == 0 && ((1 << (_la - 69)) & ((1 << (Java8Parser.BANG - 69)) | (1 << (Java8Parser.TILDE - 69)) | (1 << (Java8Parser.INC - 69)) | (1 << (Java8Parser.DEC - 69)) | (1 << (Java8Parser.ADD - 69)) | (1 << (Java8Parser.SUB - 69)))) !== 0) || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2415;
	                this.argumentList();
	            }

	            this.state = 2418;
	            this.match(Java8Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, Java8Parser.RULE_argumentList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2422;
	        this.expression();
	        this.state = 2427;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.COMMA) {
	            this.state = 2423;
	            this.match(Java8Parser.COMMA);
	            this.state = 2424;
	            this.expression();
	            this.state = 2429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodReference() {
	    let localctx = new MethodReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, Java8Parser.RULE_methodReference);
	    var _la = 0; // Token type
	    try {
	        this.state = 2477;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2430;
	            this.expressionName();
	            this.state = 2431;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2432;
	                this.typeArguments();
	            }

	            this.state = 2435;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2437;
	            this.referenceType();
	            this.state = 2438;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2439;
	                this.typeArguments();
	            }

	            this.state = 2442;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2444;
	            this.primary();
	            this.state = 2445;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2446;
	                this.typeArguments();
	            }

	            this.state = 2449;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2451;
	            this.match(Java8Parser.SUPER);
	            this.state = 2452;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2454;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2453;
	                this.typeArguments();
	            }

	            this.state = 2456;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2457;
	            this.typeName();
	            this.state = 2458;
	            this.match(Java8Parser.DOT);
	            this.state = 2459;
	            this.match(Java8Parser.SUPER);
	            this.state = 2460;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2461;
	                this.typeArguments();
	            }

	            this.state = 2464;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2466;
	            this.classType();
	            this.state = 2467;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2468;
	                this.typeArguments();
	            }

	            this.state = 2471;
	            this.match(Java8Parser.NEW);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2473;
	            this.arrayType();
	            this.state = 2474;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2475;
	            this.match(Java8Parser.NEW);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodReference_lf_primary() {
	    let localctx = new MethodReference_lf_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, Java8Parser.RULE_methodReference_lf_primary);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2479;
	        this.match(Java8Parser.COLONCOLON);
	        this.state = 2481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===Java8Parser.LT) {
	            this.state = 2480;
	            this.typeArguments();
	        }

	        this.state = 2483;
	        this.match(Java8Parser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodReference_lfno_primary() {
	    let localctx = new MethodReference_lfno_primaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, Java8Parser.RULE_methodReference_lfno_primary);
	    var _la = 0; // Token type
	    try {
	        this.state = 2525;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2485;
	            this.expressionName();
	            this.state = 2486;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2487;
	                this.typeArguments();
	            }

	            this.state = 2490;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2492;
	            this.referenceType();
	            this.state = 2493;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2494;
	                this.typeArguments();
	            }

	            this.state = 2497;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2499;
	            this.match(Java8Parser.SUPER);
	            this.state = 2500;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2501;
	                this.typeArguments();
	            }

	            this.state = 2504;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2505;
	            this.typeName();
	            this.state = 2506;
	            this.match(Java8Parser.DOT);
	            this.state = 2507;
	            this.match(Java8Parser.SUPER);
	            this.state = 2508;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2510;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2509;
	                this.typeArguments();
	            }

	            this.state = 2512;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2514;
	            this.classType();
	            this.state = 2515;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===Java8Parser.LT) {
	                this.state = 2516;
	                this.typeArguments();
	            }

	            this.state = 2519;
	            this.match(Java8Parser.NEW);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2521;
	            this.arrayType();
	            this.state = 2522;
	            this.match(Java8Parser.COLONCOLON);
	            this.state = 2523;
	            this.match(Java8Parser.NEW);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreationExpression() {
	    let localctx = new ArrayCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, Java8Parser.RULE_arrayCreationExpression);
	    try {
	        this.state = 2549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2527;
	            this.match(Java8Parser.NEW);
	            this.state = 2528;
	            this.primitiveType();
	            this.state = 2529;
	            this.dimExprs();
	            this.state = 2531;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	            if(la_===1) {
	                this.state = 2530;
	                this.dims();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2533;
	            this.match(Java8Parser.NEW);
	            this.state = 2534;
	            this.classOrInterfaceType();
	            this.state = 2535;
	            this.dimExprs();
	            this.state = 2537;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	            if(la_===1) {
	                this.state = 2536;
	                this.dims();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2539;
	            this.match(Java8Parser.NEW);
	            this.state = 2540;
	            this.primitiveType();
	            this.state = 2541;
	            this.dims();
	            this.state = 2542;
	            this.arrayInitializer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2544;
	            this.match(Java8Parser.NEW);
	            this.state = 2545;
	            this.classOrInterfaceType();
	            this.state = 2546;
	            this.dims();
	            this.state = 2547;
	            this.arrayInitializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimExprs() {
	    let localctx = new DimExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, Java8Parser.RULE_dimExprs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2551;
	        this.dimExpr();
	        this.state = 2555;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,289,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2552;
	                this.dimExpr(); 
	            }
	            this.state = 2557;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,289,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimExpr() {
	    let localctx = new DimExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, Java8Parser.RULE_dimExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2561;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.AT) {
	            this.state = 2558;
	            this.annotation();
	            this.state = 2563;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2564;
	        this.match(Java8Parser.LBRACK);
	        this.state = 2565;
	        this.expression();
	        this.state = 2566;
	        this.match(Java8Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, Java8Parser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2568;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, Java8Parser.RULE_expression);
	    try {
	        this.state = 2572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2570;
	            this.lambdaExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2571;
	            this.assignmentExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaExpression() {
	    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, Java8Parser.RULE_lambdaExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2574;
	        this.lambdaParameters();
	        this.state = 2575;
	        this.match(Java8Parser.ARROW);
	        this.state = 2576;
	        this.lambdaBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameters() {
	    let localctx = new LambdaParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, Java8Parser.RULE_lambdaParameters);
	    var _la = 0; // Token type
	    try {
	        this.state = 2588;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2578;
	            this.match(Java8Parser.Identifier);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2579;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << Java8Parser.BOOLEAN) | (1 << Java8Parser.BYTE) | (1 << Java8Parser.CHAR) | (1 << Java8Parser.DOUBLE) | (1 << Java8Parser.FINAL) | (1 << Java8Parser.FLOAT) | (1 << Java8Parser.INT) | (1 << Java8Parser.LONG))) !== 0) || _la===Java8Parser.SHORT || _la===Java8Parser.Identifier || _la===Java8Parser.AT) {
	                this.state = 2580;
	                this.formalParameterList();
	            }

	            this.state = 2583;
	            this.match(Java8Parser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2584;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2585;
	            this.inferredFormalParameterList();
	            this.state = 2586;
	            this.match(Java8Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inferredFormalParameterList() {
	    let localctx = new InferredFormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, Java8Parser.RULE_inferredFormalParameterList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2590;
	        this.match(Java8Parser.Identifier);
	        this.state = 2595;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===Java8Parser.COMMA) {
	            this.state = 2591;
	            this.match(Java8Parser.COMMA);
	            this.state = 2592;
	            this.match(Java8Parser.Identifier);
	            this.state = 2597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaBody() {
	    let localctx = new LambdaBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, Java8Parser.RULE_lambdaBody);
	    try {
	        this.state = 2600;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.BOOLEAN:
	        case Java8Parser.BYTE:
	        case Java8Parser.CHAR:
	        case Java8Parser.DOUBLE:
	        case Java8Parser.FLOAT:
	        case Java8Parser.INT:
	        case Java8Parser.LONG:
	        case Java8Parser.NEW:
	        case Java8Parser.SHORT:
	        case Java8Parser.SUPER:
	        case Java8Parser.THIS:
	        case Java8Parser.VOID:
	        case Java8Parser.IntegerLiteral:
	        case Java8Parser.FloatingPointLiteral:
	        case Java8Parser.BooleanLiteral:
	        case Java8Parser.CharacterLiteral:
	        case Java8Parser.StringLiteral:
	        case Java8Parser.NullLiteral:
	        case Java8Parser.LPAREN:
	        case Java8Parser.BANG:
	        case Java8Parser.TILDE:
	        case Java8Parser.INC:
	        case Java8Parser.DEC:
	        case Java8Parser.ADD:
	        case Java8Parser.SUB:
	        case Java8Parser.Identifier:
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2598;
	            this.expression();
	            break;
	        case Java8Parser.LBRACE:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2599;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpression() {
	    let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, Java8Parser.RULE_assignmentExpression);
	    try {
	        this.state = 2604;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2602;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2603;
	            this.assignment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, Java8Parser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2606;
	        this.leftHandSide();
	        this.state = 2607;
	        this.assignmentOperator();
	        this.state = 2608;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leftHandSide() {
	    let localctx = new LeftHandSideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, Java8Parser.RULE_leftHandSide);
	    try {
	        this.state = 2613;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2610;
	            this.expressionName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2611;
	            this.fieldAccess();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2612;
	            this.arrayAccess();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, Java8Parser.RULE_assignmentOperator);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2615;
	        _la = this._input.LA(1);
	        if(!(((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (Java8Parser.ASSIGN - 66)) | (1 << (Java8Parser.ADD_ASSIGN - 66)) | (1 << (Java8Parser.SUB_ASSIGN - 66)) | (1 << (Java8Parser.MUL_ASSIGN - 66)) | (1 << (Java8Parser.DIV_ASSIGN - 66)) | (1 << (Java8Parser.AND_ASSIGN - 66)) | (1 << (Java8Parser.OR_ASSIGN - 66)) | (1 << (Java8Parser.XOR_ASSIGN - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (Java8Parser.MOD_ASSIGN - 98)) | (1 << (Java8Parser.LSHIFT_ASSIGN - 98)) | (1 << (Java8Parser.RSHIFT_ASSIGN - 98)) | (1 << (Java8Parser.URSHIFT_ASSIGN - 98)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, Java8Parser.RULE_conditionalExpression);
	    try {
	        this.state = 2624;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2617;
	            this.conditionalOrExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2618;
	            this.conditionalOrExpression(0);
	            this.state = 2619;
	            this.match(Java8Parser.QUESTION);
	            this.state = 2620;
	            this.expression();
	            this.state = 2621;
	            this.match(Java8Parser.COLON);
	            this.state = 2622;
	            this.conditionalExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	conditionalOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 432;
	    this.enterRecursionRule(localctx, 432, Java8Parser.RULE_conditionalOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2627;
	        this.conditionalAndExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2634;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,299,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ConditionalOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_conditionalOrExpression);
	                this.state = 2629;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2630;
	                this.match(Java8Parser.OR);
	                this.state = 2631;
	                this.conditionalAndExpression(0); 
	            }
	            this.state = 2636;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,299,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	conditionalAndExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 434;
	    this.enterRecursionRule(localctx, 434, Java8Parser.RULE_conditionalAndExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2638;
	        this.inclusiveOrExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2645;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,300,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ConditionalAndExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_conditionalAndExpression);
	                this.state = 2640;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2641;
	                this.match(Java8Parser.AND);
	                this.state = 2642;
	                this.inclusiveOrExpression(0); 
	            }
	            this.state = 2647;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,300,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	inclusiveOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new InclusiveOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 436;
	    this.enterRecursionRule(localctx, 436, Java8Parser.RULE_inclusiveOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2649;
	        this.exclusiveOrExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2656;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,301,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new InclusiveOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_inclusiveOrExpression);
	                this.state = 2651;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2652;
	                this.match(Java8Parser.BITOR);
	                this.state = 2653;
	                this.exclusiveOrExpression(0); 
	            }
	            this.state = 2658;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,301,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	exclusiveOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExclusiveOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 438;
	    this.enterRecursionRule(localctx, 438, Java8Parser.RULE_exclusiveOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2660;
	        this.andExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2667;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,302,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ExclusiveOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_exclusiveOrExpression);
	                this.state = 2662;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2663;
	                this.match(Java8Parser.CARET);
	                this.state = 2664;
	                this.andExpression(0); 
	            }
	            this.state = 2669;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,302,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	andExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AndExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 440;
	    this.enterRecursionRule(localctx, 440, Java8Parser.RULE_andExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2671;
	        this.equalityExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2678;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,303,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new AndExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_andExpression);
	                this.state = 2673;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2674;
	                this.match(Java8Parser.BITAND);
	                this.state = 2675;
	                this.equalityExpression(0); 
	            }
	            this.state = 2680;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,303,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	equalityExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new EqualityExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 442;
	    this.enterRecursionRule(localctx, 442, Java8Parser.RULE_equalityExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2682;
	        this.relationalExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2692;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,305,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2690;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_equalityExpression);
	                    this.state = 2684;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2685;
	                    this.match(Java8Parser.EQUAL);
	                    this.state = 2686;
	                    this.relationalExpression(0);
	                    break;

	                case 2:
	                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_equalityExpression);
	                    this.state = 2687;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2688;
	                    this.match(Java8Parser.NOTEQUAL);
	                    this.state = 2689;
	                    this.relationalExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2694;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,305,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	relationalExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new RelationalExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 444;
	    this.enterRecursionRule(localctx, 444, Java8Parser.RULE_relationalExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2696;
	        this.shiftExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2715;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,307,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2713;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2698;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2699;
	                    this.match(Java8Parser.LT);
	                    this.state = 2700;
	                    this.shiftExpression(0);
	                    break;

	                case 2:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2701;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2702;
	                    this.match(Java8Parser.GT);
	                    this.state = 2703;
	                    this.shiftExpression(0);
	                    break;

	                case 3:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2704;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2705;
	                    this.match(Java8Parser.LE);
	                    this.state = 2706;
	                    this.shiftExpression(0);
	                    break;

	                case 4:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2707;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2708;
	                    this.match(Java8Parser.GE);
	                    this.state = 2709;
	                    this.shiftExpression(0);
	                    break;

	                case 5:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_relationalExpression);
	                    this.state = 2710;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2711;
	                    this.match(Java8Parser.INSTANCEOF);
	                    this.state = 2712;
	                    this.referenceType();
	                    break;

	                } 
	            }
	            this.state = 2717;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,307,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	shiftExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ShiftExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 446;
	    this.enterRecursionRule(localctx, 446, Java8Parser.RULE_shiftExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2719;
	        this.additiveExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2736;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,309,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2734;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_shiftExpression);
	                    this.state = 2721;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2722;
	                    this.match(Java8Parser.LT);
	                    this.state = 2723;
	                    this.match(Java8Parser.LT);
	                    this.state = 2724;
	                    this.additiveExpression(0);
	                    break;

	                case 2:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_shiftExpression);
	                    this.state = 2725;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2726;
	                    this.match(Java8Parser.GT);
	                    this.state = 2727;
	                    this.match(Java8Parser.GT);
	                    this.state = 2728;
	                    this.additiveExpression(0);
	                    break;

	                case 3:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_shiftExpression);
	                    this.state = 2729;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2730;
	                    this.match(Java8Parser.GT);
	                    this.state = 2731;
	                    this.match(Java8Parser.GT);
	                    this.state = 2732;
	                    this.match(Java8Parser.GT);
	                    this.state = 2733;
	                    this.additiveExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2738;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,309,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	additiveExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AdditiveExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 448;
	    this.enterRecursionRule(localctx, 448, Java8Parser.RULE_additiveExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2740;
	        this.multiplicativeExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2750;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,311,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2748;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_additiveExpression);
	                    this.state = 2742;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2743;
	                    this.match(Java8Parser.ADD);
	                    this.state = 2744;
	                    this.multiplicativeExpression(0);
	                    break;

	                case 2:
	                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_additiveExpression);
	                    this.state = 2745;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2746;
	                    this.match(Java8Parser.SUB);
	                    this.state = 2747;
	                    this.multiplicativeExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2752;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,311,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	multiplicativeExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 450;
	    this.enterRecursionRule(localctx, 450, Java8Parser.RULE_multiplicativeExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2754;
	        this.unaryExpression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2767;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,313,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2765;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
	                    this.state = 2756;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2757;
	                    this.match(Java8Parser.MUL);
	                    this.state = 2758;
	                    this.unaryExpression();
	                    break;

	                case 2:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
	                    this.state = 2759;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2760;
	                    this.match(Java8Parser.DIV);
	                    this.state = 2761;
	                    this.unaryExpression();
	                    break;

	                case 3:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java8Parser.RULE_multiplicativeExpression);
	                    this.state = 2762;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2763;
	                    this.match(Java8Parser.MOD);
	                    this.state = 2764;
	                    this.unaryExpression();
	                    break;

	                } 
	            }
	            this.state = 2769;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,313,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, Java8Parser.RULE_unaryExpression);
	    try {
	        this.state = 2777;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case Java8Parser.INC:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2770;
	            this.preIncrementExpression();
	            break;
	        case Java8Parser.DEC:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2771;
	            this.preDecrementExpression();
	            break;
	        case Java8Parser.ADD:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2772;
	            this.match(Java8Parser.ADD);
	            this.state = 2773;
	            this.unaryExpression();
	            break;
	        case Java8Parser.SUB:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2774;
	            this.match(Java8Parser.SUB);
	            this.state = 2775;
	            this.unaryExpression();
	            break;
	        case Java8Parser.BOOLEAN:
	        case Java8Parser.BYTE:
	        case Java8Parser.CHAR:
	        case Java8Parser.DOUBLE:
	        case Java8Parser.FLOAT:
	        case Java8Parser.INT:
	        case Java8Parser.LONG:
	        case Java8Parser.NEW:
	        case Java8Parser.SHORT:
	        case Java8Parser.SUPER:
	        case Java8Parser.THIS:
	        case Java8Parser.VOID:
	        case Java8Parser.IntegerLiteral:
	        case Java8Parser.FloatingPointLiteral:
	        case Java8Parser.BooleanLiteral:
	        case Java8Parser.CharacterLiteral:
	        case Java8Parser.StringLiteral:
	        case Java8Parser.NullLiteral:
	        case Java8Parser.LPAREN:
	        case Java8Parser.BANG:
	        case Java8Parser.TILDE:
	        case Java8Parser.Identifier:
	        case Java8Parser.AT:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2776;
	            this.unaryExpressionNotPlusMinus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preIncrementExpression() {
	    let localctx = new PreIncrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, Java8Parser.RULE_preIncrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2779;
	        this.match(Java8Parser.INC);
	        this.state = 2780;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preDecrementExpression() {
	    let localctx = new PreDecrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, Java8Parser.RULE_preDecrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2782;
	        this.match(Java8Parser.DEC);
	        this.state = 2783;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpressionNotPlusMinus() {
	    let localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, Java8Parser.RULE_unaryExpressionNotPlusMinus);
	    try {
	        this.state = 2791;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2785;
	            this.postfixExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2786;
	            this.match(Java8Parser.TILDE);
	            this.state = 2787;
	            this.unaryExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2788;
	            this.match(Java8Parser.BANG);
	            this.state = 2789;
	            this.unaryExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2790;
	            this.castExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpression() {
	    let localctx = new PostfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, Java8Parser.RULE_postfixExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2795;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,316,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2793;
	            this.primary();
	            break;

	        case 2:
	            this.state = 2794;
	            this.expressionName();
	            break;

	        }
	        this.state = 2801;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,318,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2799;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case Java8Parser.INC:
	                    this.state = 2797;
	                    this.postIncrementExpression_lf_postfixExpression();
	                    break;
	                case Java8Parser.DEC:
	                    this.state = 2798;
	                    this.postDecrementExpression_lf_postfixExpression();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 2803;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,318,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postIncrementExpression() {
	    let localctx = new PostIncrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, Java8Parser.RULE_postIncrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2804;
	        this.postfixExpression();
	        this.state = 2805;
	        this.match(Java8Parser.INC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postIncrementExpression_lf_postfixExpression() {
	    let localctx = new PostIncrementExpression_lf_postfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, Java8Parser.RULE_postIncrementExpression_lf_postfixExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2807;
	        this.match(Java8Parser.INC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postDecrementExpression() {
	    let localctx = new PostDecrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, Java8Parser.RULE_postDecrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2809;
	        this.postfixExpression();
	        this.state = 2810;
	        this.match(Java8Parser.DEC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postDecrementExpression_lf_postfixExpression() {
	    let localctx = new PostDecrementExpression_lf_postfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, Java8Parser.RULE_postDecrementExpression_lf_postfixExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2812;
	        this.match(Java8Parser.DEC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, Java8Parser.RULE_castExpression);
	    var _la = 0; // Token type
	    try {
	        this.state = 2841;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2814;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2815;
	            this.primitiveType();
	            this.state = 2816;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2817;
	            this.unaryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2819;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2820;
	            this.referenceType();
	            this.state = 2824;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.BITAND) {
	                this.state = 2821;
	                this.additionalBound();
	                this.state = 2826;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2827;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2828;
	            this.unaryExpressionNotPlusMinus();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2830;
	            this.match(Java8Parser.LPAREN);
	            this.state = 2831;
	            this.referenceType();
	            this.state = 2835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===Java8Parser.BITAND) {
	                this.state = 2832;
	                this.additionalBound();
	                this.state = 2837;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2838;
	            this.match(Java8Parser.RPAREN);
	            this.state = 2839;
	            this.lambdaExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Java8Parser.EOF = antlr4.Token.EOF;
Java8Parser.ABSTRACT = 1;
Java8Parser.ASSERT = 2;
Java8Parser.BOOLEAN = 3;
Java8Parser.BREAK = 4;
Java8Parser.BYTE = 5;
Java8Parser.CASE = 6;
Java8Parser.CATCH = 7;
Java8Parser.CHAR = 8;
Java8Parser.CLASS = 9;
Java8Parser.CONST = 10;
Java8Parser.CONTINUE = 11;
Java8Parser.DEFAULT = 12;
Java8Parser.DO = 13;
Java8Parser.DOUBLE = 14;
Java8Parser.ELSE = 15;
Java8Parser.ENUM = 16;
Java8Parser.EXTENDS = 17;
Java8Parser.FINAL = 18;
Java8Parser.FINALLY = 19;
Java8Parser.FLOAT = 20;
Java8Parser.FOR = 21;
Java8Parser.IF = 22;
Java8Parser.GOTO = 23;
Java8Parser.IMPLEMENTS = 24;
Java8Parser.IMPORT = 25;
Java8Parser.INSTANCEOF = 26;
Java8Parser.INT = 27;
Java8Parser.INTERFACE = 28;
Java8Parser.LONG = 29;
Java8Parser.NATIVE = 30;
Java8Parser.NEW = 31;
Java8Parser.PACKAGE = 32;
Java8Parser.PRIVATE = 33;
Java8Parser.PROTECTED = 34;
Java8Parser.PUBLIC = 35;
Java8Parser.RETURN = 36;
Java8Parser.SHORT = 37;
Java8Parser.STATIC = 38;
Java8Parser.STRICTFP = 39;
Java8Parser.SUPER = 40;
Java8Parser.SWITCH = 41;
Java8Parser.SYNCHRONIZED = 42;
Java8Parser.THIS = 43;
Java8Parser.THROW = 44;
Java8Parser.THROWS = 45;
Java8Parser.TRANSIENT = 46;
Java8Parser.TRY = 47;
Java8Parser.VOID = 48;
Java8Parser.VOLATILE = 49;
Java8Parser.WHILE = 50;
Java8Parser.IntegerLiteral = 51;
Java8Parser.FloatingPointLiteral = 52;
Java8Parser.BooleanLiteral = 53;
Java8Parser.CharacterLiteral = 54;
Java8Parser.StringLiteral = 55;
Java8Parser.NullLiteral = 56;
Java8Parser.LPAREN = 57;
Java8Parser.RPAREN = 58;
Java8Parser.LBRACE = 59;
Java8Parser.RBRACE = 60;
Java8Parser.LBRACK = 61;
Java8Parser.RBRACK = 62;
Java8Parser.SEMI = 63;
Java8Parser.COMMA = 64;
Java8Parser.DOT = 65;
Java8Parser.ASSIGN = 66;
Java8Parser.GT = 67;
Java8Parser.LT = 68;
Java8Parser.BANG = 69;
Java8Parser.TILDE = 70;
Java8Parser.QUESTION = 71;
Java8Parser.COLON = 72;
Java8Parser.EQUAL = 73;
Java8Parser.LE = 74;
Java8Parser.GE = 75;
Java8Parser.NOTEQUAL = 76;
Java8Parser.AND = 77;
Java8Parser.OR = 78;
Java8Parser.INC = 79;
Java8Parser.DEC = 80;
Java8Parser.ADD = 81;
Java8Parser.SUB = 82;
Java8Parser.MUL = 83;
Java8Parser.DIV = 84;
Java8Parser.BITAND = 85;
Java8Parser.BITOR = 86;
Java8Parser.CARET = 87;
Java8Parser.MOD = 88;
Java8Parser.ARROW = 89;
Java8Parser.COLONCOLON = 90;
Java8Parser.ADD_ASSIGN = 91;
Java8Parser.SUB_ASSIGN = 92;
Java8Parser.MUL_ASSIGN = 93;
Java8Parser.DIV_ASSIGN = 94;
Java8Parser.AND_ASSIGN = 95;
Java8Parser.OR_ASSIGN = 96;
Java8Parser.XOR_ASSIGN = 97;
Java8Parser.MOD_ASSIGN = 98;
Java8Parser.LSHIFT_ASSIGN = 99;
Java8Parser.RSHIFT_ASSIGN = 100;
Java8Parser.URSHIFT_ASSIGN = 101;
Java8Parser.Identifier = 102;
Java8Parser.AT = 103;
Java8Parser.ELLIPSIS = 104;
Java8Parser.WS = 105;
Java8Parser.COMMENT = 106;
Java8Parser.LINE_COMMENT = 107;

Java8Parser.RULE_literal = 0;
Java8Parser.RULE_primitiveType = 1;
Java8Parser.RULE_numericType = 2;
Java8Parser.RULE_integralType = 3;
Java8Parser.RULE_floatingPointType = 4;
Java8Parser.RULE_referenceType = 5;
Java8Parser.RULE_classOrInterfaceType = 6;
Java8Parser.RULE_classType = 7;
Java8Parser.RULE_classType_lf_classOrInterfaceType = 8;
Java8Parser.RULE_classType_lfno_classOrInterfaceType = 9;
Java8Parser.RULE_interfaceType = 10;
Java8Parser.RULE_interfaceType_lf_classOrInterfaceType = 11;
Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType = 12;
Java8Parser.RULE_typeVariable = 13;
Java8Parser.RULE_arrayType = 14;
Java8Parser.RULE_dims = 15;
Java8Parser.RULE_typeParameter = 16;
Java8Parser.RULE_typeParameterModifier = 17;
Java8Parser.RULE_typeBound = 18;
Java8Parser.RULE_additionalBound = 19;
Java8Parser.RULE_typeArguments = 20;
Java8Parser.RULE_typeArgumentList = 21;
Java8Parser.RULE_typeArgument = 22;
Java8Parser.RULE_wildcard = 23;
Java8Parser.RULE_wildcardBounds = 24;
Java8Parser.RULE_packageName = 25;
Java8Parser.RULE_typeName = 26;
Java8Parser.RULE_packageOrTypeName = 27;
Java8Parser.RULE_expressionName = 28;
Java8Parser.RULE_methodName = 29;
Java8Parser.RULE_ambiguousName = 30;
Java8Parser.RULE_compilationUnit = 31;
Java8Parser.RULE_packageDeclaration = 32;
Java8Parser.RULE_packageModifier = 33;
Java8Parser.RULE_importDeclaration = 34;
Java8Parser.RULE_singleTypeImportDeclaration = 35;
Java8Parser.RULE_typeImportOnDemandDeclaration = 36;
Java8Parser.RULE_singleStaticImportDeclaration = 37;
Java8Parser.RULE_staticImportOnDemandDeclaration = 38;
Java8Parser.RULE_typeDeclaration = 39;
Java8Parser.RULE_classDeclaration = 40;
Java8Parser.RULE_normalClassDeclaration = 41;
Java8Parser.RULE_classModifier = 42;
Java8Parser.RULE_typeParameters = 43;
Java8Parser.RULE_typeParameterList = 44;
Java8Parser.RULE_superclass = 45;
Java8Parser.RULE_superinterfaces = 46;
Java8Parser.RULE_interfaceTypeList = 47;
Java8Parser.RULE_classBody = 48;
Java8Parser.RULE_classBodyDeclaration = 49;
Java8Parser.RULE_classMemberDeclaration = 50;
Java8Parser.RULE_fieldDeclaration = 51;
Java8Parser.RULE_fieldModifier = 52;
Java8Parser.RULE_variableDeclaratorList = 53;
Java8Parser.RULE_variableDeclarator = 54;
Java8Parser.RULE_variableDeclaratorId = 55;
Java8Parser.RULE_variableInitializer = 56;
Java8Parser.RULE_unannType = 57;
Java8Parser.RULE_unannPrimitiveType = 58;
Java8Parser.RULE_unannReferenceType = 59;
Java8Parser.RULE_unannClassOrInterfaceType = 60;
Java8Parser.RULE_unannClassType = 61;
Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType = 62;
Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType = 63;
Java8Parser.RULE_unannInterfaceType = 64;
Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType = 65;
Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType = 66;
Java8Parser.RULE_unannTypeVariable = 67;
Java8Parser.RULE_unannArrayType = 68;
Java8Parser.RULE_methodDeclaration = 69;
Java8Parser.RULE_methodModifier = 70;
Java8Parser.RULE_methodHeader = 71;
Java8Parser.RULE_result = 72;
Java8Parser.RULE_methodDeclarator = 73;
Java8Parser.RULE_formalParameterList = 74;
Java8Parser.RULE_formalParameters = 75;
Java8Parser.RULE_formalParameter = 76;
Java8Parser.RULE_variableModifier = 77;
Java8Parser.RULE_lastFormalParameter = 78;
Java8Parser.RULE_receiverParameter = 79;
Java8Parser.RULE_throws_ = 80;
Java8Parser.RULE_exceptionTypeList = 81;
Java8Parser.RULE_exceptionType = 82;
Java8Parser.RULE_methodBody = 83;
Java8Parser.RULE_instanceInitializer = 84;
Java8Parser.RULE_staticInitializer = 85;
Java8Parser.RULE_constructorDeclaration = 86;
Java8Parser.RULE_constructorModifier = 87;
Java8Parser.RULE_constructorDeclarator = 88;
Java8Parser.RULE_simpleTypeName = 89;
Java8Parser.RULE_constructorBody = 90;
Java8Parser.RULE_explicitConstructorInvocation = 91;
Java8Parser.RULE_enumDeclaration = 92;
Java8Parser.RULE_enumBody = 93;
Java8Parser.RULE_enumConstantList = 94;
Java8Parser.RULE_enumConstant = 95;
Java8Parser.RULE_enumConstantModifier = 96;
Java8Parser.RULE_enumBodyDeclarations = 97;
Java8Parser.RULE_interfaceDeclaration = 98;
Java8Parser.RULE_normalInterfaceDeclaration = 99;
Java8Parser.RULE_interfaceModifier = 100;
Java8Parser.RULE_extendsInterfaces = 101;
Java8Parser.RULE_interfaceBody = 102;
Java8Parser.RULE_interfaceMemberDeclaration = 103;
Java8Parser.RULE_constantDeclaration = 104;
Java8Parser.RULE_constantModifier = 105;
Java8Parser.RULE_interfaceMethodDeclaration = 106;
Java8Parser.RULE_interfaceMethodModifier = 107;
Java8Parser.RULE_annotationTypeDeclaration = 108;
Java8Parser.RULE_annotationTypeBody = 109;
Java8Parser.RULE_annotationTypeMemberDeclaration = 110;
Java8Parser.RULE_annotationTypeElementDeclaration = 111;
Java8Parser.RULE_annotationTypeElementModifier = 112;
Java8Parser.RULE_defaultValue = 113;
Java8Parser.RULE_annotation = 114;
Java8Parser.RULE_normalAnnotation = 115;
Java8Parser.RULE_elementValuePairList = 116;
Java8Parser.RULE_elementValuePair = 117;
Java8Parser.RULE_elementValue = 118;
Java8Parser.RULE_elementValueArrayInitializer = 119;
Java8Parser.RULE_elementValueList = 120;
Java8Parser.RULE_markerAnnotation = 121;
Java8Parser.RULE_singleElementAnnotation = 122;
Java8Parser.RULE_arrayInitializer = 123;
Java8Parser.RULE_variableInitializerList = 124;
Java8Parser.RULE_block = 125;
Java8Parser.RULE_blockStatements = 126;
Java8Parser.RULE_blockStatement = 127;
Java8Parser.RULE_localVariableDeclarationStatement = 128;
Java8Parser.RULE_localVariableDeclaration = 129;
Java8Parser.RULE_statement = 130;
Java8Parser.RULE_statementNoShortIf = 131;
Java8Parser.RULE_statementWithoutTrailingSubstatement = 132;
Java8Parser.RULE_emptyStatement = 133;
Java8Parser.RULE_labeledStatement = 134;
Java8Parser.RULE_labeledStatementNoShortIf = 135;
Java8Parser.RULE_expressionStatement = 136;
Java8Parser.RULE_statementExpression = 137;
Java8Parser.RULE_ifThenStatement = 138;
Java8Parser.RULE_ifThenElseStatement = 139;
Java8Parser.RULE_ifThenElseStatementNoShortIf = 140;
Java8Parser.RULE_assertStatement = 141;
Java8Parser.RULE_switchStatement = 142;
Java8Parser.RULE_switchBlock = 143;
Java8Parser.RULE_switchBlockStatementGroup = 144;
Java8Parser.RULE_switchLabels = 145;
Java8Parser.RULE_switchLabel = 146;
Java8Parser.RULE_enumConstantName = 147;
Java8Parser.RULE_whileStatement = 148;
Java8Parser.RULE_whileStatementNoShortIf = 149;
Java8Parser.RULE_doStatement = 150;
Java8Parser.RULE_forStatement = 151;
Java8Parser.RULE_forStatementNoShortIf = 152;
Java8Parser.RULE_basicForStatement = 153;
Java8Parser.RULE_basicForStatementNoShortIf = 154;
Java8Parser.RULE_forInit = 155;
Java8Parser.RULE_forUpdate = 156;
Java8Parser.RULE_statementExpressionList = 157;
Java8Parser.RULE_enhancedForStatement = 158;
Java8Parser.RULE_enhancedForStatementNoShortIf = 159;
Java8Parser.RULE_breakStatement = 160;
Java8Parser.RULE_continueStatement = 161;
Java8Parser.RULE_returnStatement = 162;
Java8Parser.RULE_throwStatement = 163;
Java8Parser.RULE_synchronizedStatement = 164;
Java8Parser.RULE_tryStatement = 165;
Java8Parser.RULE_catches = 166;
Java8Parser.RULE_catchClause = 167;
Java8Parser.RULE_catchFormalParameter = 168;
Java8Parser.RULE_catchType = 169;
Java8Parser.RULE_finally_ = 170;
Java8Parser.RULE_tryWithResourcesStatement = 171;
Java8Parser.RULE_resourceSpecification = 172;
Java8Parser.RULE_resourceList = 173;
Java8Parser.RULE_resource = 174;
Java8Parser.RULE_primary = 175;
Java8Parser.RULE_primaryNoNewArray = 176;
Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess = 177;
Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess = 178;
Java8Parser.RULE_primaryNoNewArray_lf_primary = 179;
Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = 180;
Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary = 181;
Java8Parser.RULE_primaryNoNewArray_lfno_primary = 182;
Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = 183;
Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary = 184;
Java8Parser.RULE_classInstanceCreationExpression = 185;
Java8Parser.RULE_classInstanceCreationExpression_lf_primary = 186;
Java8Parser.RULE_classInstanceCreationExpression_lfno_primary = 187;
Java8Parser.RULE_typeArgumentsOrDiamond = 188;
Java8Parser.RULE_fieldAccess = 189;
Java8Parser.RULE_fieldAccess_lf_primary = 190;
Java8Parser.RULE_fieldAccess_lfno_primary = 191;
Java8Parser.RULE_arrayAccess = 192;
Java8Parser.RULE_arrayAccess_lf_primary = 193;
Java8Parser.RULE_arrayAccess_lfno_primary = 194;
Java8Parser.RULE_methodInvocation = 195;
Java8Parser.RULE_methodInvocation_lf_primary = 196;
Java8Parser.RULE_methodInvocation_lfno_primary = 197;
Java8Parser.RULE_argumentList = 198;
Java8Parser.RULE_methodReference = 199;
Java8Parser.RULE_methodReference_lf_primary = 200;
Java8Parser.RULE_methodReference_lfno_primary = 201;
Java8Parser.RULE_arrayCreationExpression = 202;
Java8Parser.RULE_dimExprs = 203;
Java8Parser.RULE_dimExpr = 204;
Java8Parser.RULE_constantExpression = 205;
Java8Parser.RULE_expression = 206;
Java8Parser.RULE_lambdaExpression = 207;
Java8Parser.RULE_lambdaParameters = 208;
Java8Parser.RULE_inferredFormalParameterList = 209;
Java8Parser.RULE_lambdaBody = 210;
Java8Parser.RULE_assignmentExpression = 211;
Java8Parser.RULE_assignment = 212;
Java8Parser.RULE_leftHandSide = 213;
Java8Parser.RULE_assignmentOperator = 214;
Java8Parser.RULE_conditionalExpression = 215;
Java8Parser.RULE_conditionalOrExpression = 216;
Java8Parser.RULE_conditionalAndExpression = 217;
Java8Parser.RULE_inclusiveOrExpression = 218;
Java8Parser.RULE_exclusiveOrExpression = 219;
Java8Parser.RULE_andExpression = 220;
Java8Parser.RULE_equalityExpression = 221;
Java8Parser.RULE_relationalExpression = 222;
Java8Parser.RULE_shiftExpression = 223;
Java8Parser.RULE_additiveExpression = 224;
Java8Parser.RULE_multiplicativeExpression = 225;
Java8Parser.RULE_unaryExpression = 226;
Java8Parser.RULE_preIncrementExpression = 227;
Java8Parser.RULE_preDecrementExpression = 228;
Java8Parser.RULE_unaryExpressionNotPlusMinus = 229;
Java8Parser.RULE_postfixExpression = 230;
Java8Parser.RULE_postIncrementExpression = 231;
Java8Parser.RULE_postIncrementExpression_lf_postfixExpression = 232;
Java8Parser.RULE_postDecrementExpression = 233;
Java8Parser.RULE_postDecrementExpression_lf_postfixExpression = 234;
Java8Parser.RULE_castExpression = 235;

class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_literal;
    }

	IntegerLiteral() {
	    return this.getToken(Java8Parser.IntegerLiteral, 0);
	};

	FloatingPointLiteral() {
	    return this.getToken(Java8Parser.FloatingPointLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(Java8Parser.BooleanLiteral, 0);
	};

	CharacterLiteral() {
	    return this.getToken(Java8Parser.CharacterLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(Java8Parser.StringLiteral, 0);
	};

	NullLiteral() {
	    return this.getToken(Java8Parser.NullLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primitiveType;
    }

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	BOOLEAN() {
	    return this.getToken(Java8Parser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimitiveType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimitiveType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_numericType;
    }

	integralType() {
	    return this.getTypedRuleContext(IntegralTypeContext,0);
	};

	floatingPointType() {
	    return this.getTypedRuleContext(FloatingPointTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitNumericType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitNumericType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntegralTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_integralType;
    }

	BYTE() {
	    return this.getToken(Java8Parser.BYTE, 0);
	};

	SHORT() {
	    return this.getToken(Java8Parser.SHORT, 0);
	};

	INT() {
	    return this.getToken(Java8Parser.INT, 0);
	};

	LONG() {
	    return this.getToken(Java8Parser.LONG, 0);
	};

	CHAR() {
	    return this.getToken(Java8Parser.CHAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterIntegralType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitIntegralType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitIntegralType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloatingPointTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_floatingPointType;
    }

	FLOAT() {
	    return this.getToken(Java8Parser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(Java8Parser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFloatingPointType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFloatingPointType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFloatingPointType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_referenceType;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitReferenceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitReferenceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classOrInterfaceType;
    }

	classType_lfno_classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassType_lfno_classOrInterfaceTypeContext,0);
	};

	interfaceType_lfno_classOrInterfaceType() {
	    return this.getTypedRuleContext(InterfaceType_lfno_classOrInterfaceTypeContext,0);
	};

	classType_lf_classOrInterfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassType_lf_classOrInterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(ClassType_lf_classOrInterfaceTypeContext,i);
	    }
	};

	interfaceType_lf_classOrInterfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceType_lf_classOrInterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceType_lf_classOrInterfaceTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classType;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassType_lf_classOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classType_lf_classOrInterfaceType;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassType_lf_classOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassType_lf_classOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassType_lf_classOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassType_lfno_classOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classType_lfno_classOrInterfaceType;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassType_lfno_classOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassType_lfno_classOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassType_lfno_classOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceType;
    }

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceType_lf_classOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceType_lf_classOrInterfaceType;
    }

	classType_lf_classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassType_lf_classOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceType_lf_classOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceType_lf_classOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceType_lf_classOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceType_lfno_classOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceType_lfno_classOrInterfaceType;
    }

	classType_lfno_classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassType_lfno_classOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceType_lfno_classOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceType_lfno_classOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceType_lfno_classOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeVariable;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayType;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitArrayType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitArrayType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DimsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_dims;
    }

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterDims(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitDims(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitDims(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeParameter;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeParameterModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterModifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterModifierContext,i);
	    }
	};

	typeBound() {
	    return this.getTypedRuleContext(TypeBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeParameterModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeParameterModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeParameterModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeParameterModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeBound;
    }

	EXTENDS() {
	    return this.getToken(Java8Parser.EXTENDS, 0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	additionalBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditionalBoundContext);
	    } else {
	        return this.getTypedRuleContext(AdditionalBoundContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdditionalBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_additionalBound;
    }

	BITAND() {
	    return this.getToken(Java8Parser.BITAND, 0);
	};

	interfaceType() {
	    return this.getTypedRuleContext(InterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAdditionalBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAdditionalBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAdditionalBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeArguments;
    }

	LT() {
	    return this.getToken(Java8Parser.LT, 0);
	};

	typeArgumentList() {
	    return this.getTypedRuleContext(TypeArgumentListContext,0);
	};

	GT() {
	    return this.getToken(Java8Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeArguments(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeArguments(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeArgumentList;
    }

	typeArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeArgumentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeArgumentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeArgument;
    }

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	wildcard() {
	    return this.getTypedRuleContext(WildcardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_wildcard;
    }

	QUESTION() {
	    return this.getToken(Java8Parser.QUESTION, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	wildcardBounds() {
	    return this.getTypedRuleContext(WildcardBoundsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterWildcard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitWildcard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitWildcard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WildcardBoundsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_wildcardBounds;
    }

	EXTENDS() {
	    return this.getToken(Java8Parser.EXTENDS, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterWildcardBounds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitWildcardBounds(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitWildcardBounds(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_packageName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPackageName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPackageName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPackageName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageOrTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_packageOrTypeName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPackageOrTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPackageOrTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPackageOrTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_expressionName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	ambiguousName() {
	    return this.getTypedRuleContext(AmbiguousNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterExpressionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitExpressionName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitExpressionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AmbiguousNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_ambiguousName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	ambiguousName() {
	    return this.getTypedRuleContext(AmbiguousNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAmbiguousName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAmbiguousName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAmbiguousName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_compilationUnit;
    }

	EOF() {
	    return this.getToken(Java8Parser.EOF, 0);
	};

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	typeDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(TypeDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterCompilationUnit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitCompilationUnit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitCompilationUnit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_packageDeclaration;
    }

	PACKAGE() {
	    return this.getToken(Java8Parser.PACKAGE, 0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	packageModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PackageModifierContext);
	    } else {
	        return this.getTypedRuleContext(PackageModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPackageDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPackageDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPackageDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PackageModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_packageModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPackageModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPackageModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPackageModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_importDeclaration;
    }

	singleTypeImportDeclaration() {
	    return this.getTypedRuleContext(SingleTypeImportDeclarationContext,0);
	};

	typeImportOnDemandDeclaration() {
	    return this.getTypedRuleContext(TypeImportOnDemandDeclarationContext,0);
	};

	singleStaticImportDeclaration() {
	    return this.getTypedRuleContext(SingleStaticImportDeclarationContext,0);
	};

	staticImportOnDemandDeclaration() {
	    return this.getTypedRuleContext(StaticImportOnDemandDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitImportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitImportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleTypeImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_singleTypeImportDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java8Parser.IMPORT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSingleTypeImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSingleTypeImportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSingleTypeImportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeImportOnDemandDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeImportOnDemandDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java8Parser.IMPORT, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	MUL() {
	    return this.getToken(Java8Parser.MUL, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeImportOnDemandDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeImportOnDemandDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeImportOnDemandDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleStaticImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_singleStaticImportDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java8Parser.IMPORT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSingleStaticImportDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSingleStaticImportDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSingleStaticImportDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StaticImportOnDemandDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_staticImportOnDemandDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java8Parser.IMPORT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	MUL() {
	    return this.getToken(Java8Parser.MUL, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterStaticImportOnDemandDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitStaticImportOnDemandDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitStaticImportOnDemandDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classDeclaration;
    }

	normalClassDeclaration() {
	    return this.getTypedRuleContext(NormalClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_normalClassDeclaration;
    }

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	superclass() {
	    return this.getTypedRuleContext(SuperclassContext,0);
	};

	superinterfaces() {
	    return this.getTypedRuleContext(SuperinterfacesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterNormalClassDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitNormalClassDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitNormalClassDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	STRICTFP() {
	    return this.getToken(Java8Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeParameters;
    }

	LT() {
	    return this.getToken(Java8Parser.LT, 0);
	};

	typeParameterList() {
	    return this.getTypedRuleContext(TypeParameterListContext,0);
	};

	GT() {
	    return this.getToken(Java8Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeParameterList;
    }

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SuperclassContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_superclass;
    }

	EXTENDS() {
	    return this.getToken(Java8Parser.EXTENDS, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSuperclass(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSuperclass(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSuperclass(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SuperinterfacesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_superinterfaces;
    }

	IMPLEMENTS() {
	    return this.getToken(Java8Parser.IMPLEMENTS, 0);
	};

	interfaceTypeList() {
	    return this.getTypedRuleContext(InterfaceTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSuperinterfaces(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSuperinterfaces(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSuperinterfaces(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceTypeList;
    }

	interfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classBodyDeclaration;
    }

	classMemberDeclaration() {
	    return this.getTypedRuleContext(ClassMemberDeclarationContext,0);
	};

	instanceInitializer() {
	    return this.getTypedRuleContext(InstanceInitializerContext,0);
	};

	staticInitializer() {
	    return this.getTypedRuleContext(StaticInitializerContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassBodyDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassBodyDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassBodyDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classMemberDeclaration;
    }

	fieldDeclaration() {
	    return this.getTypedRuleContext(FieldDeclarationContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	fieldModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldModifierContext);
	    } else {
	        return this.getTypedRuleContext(FieldModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFieldDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFieldDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFieldDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	TRANSIENT() {
	    return this.getToken(Java8Parser.TRANSIENT, 0);
	};

	VOLATILE() {
	    return this.getToken(Java8Parser.VOLATILE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFieldModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFieldModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFieldModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableDeclaratorList;
    }

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterVariableDeclaratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitVariableDeclaratorList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitVariableDeclaratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableDeclarator;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(Java8Parser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterVariableDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitVariableDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitVariableDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclaratorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableDeclaratorId;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterVariableDeclaratorId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitVariableDeclaratorId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitVariableDeclaratorId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterVariableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitVariableInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitVariableInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannType;
    }

	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	unannReferenceType() {
	    return this.getTypedRuleContext(UnannReferenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannPrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannPrimitiveType;
    }

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	BOOLEAN() {
	    return this.getToken(Java8Parser.BOOLEAN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannPrimitiveType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannPrimitiveType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannPrimitiveType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannReferenceType;
    }

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	unannTypeVariable() {
	    return this.getTypedRuleContext(UnannTypeVariableContext,0);
	};

	unannArrayType() {
	    return this.getTypedRuleContext(UnannArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannReferenceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannReferenceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannClassOrInterfaceType;
    }

	unannClassType_lfno_unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassType_lfno_unannClassOrInterfaceTypeContext,0);
	};

	unannInterfaceType_lfno_unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext,0);
	};

	unannClassType_lf_unannClassOrInterfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnannClassType_lf_unannClassOrInterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(UnannClassType_lf_unannClassOrInterfaceTypeContext,i);
	    }
	};

	unannInterfaceType_lf_unannClassOrInterfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(UnannInterfaceType_lf_unannClassOrInterfaceTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannClassType;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannClassType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannClassType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannClassType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannClassType_lf_unannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannClassType_lf_unannClassOrInterfaceType;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannClassType_lf_unannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannClassType_lf_unannClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannClassType_lf_unannClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannClassType_lfno_unannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannClassType_lfno_unannClassOrInterfaceType;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannClassType_lfno_unannClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannClassType_lfno_unannClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannInterfaceType;
    }

	unannClassType() {
	    return this.getTypedRuleContext(UnannClassTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannInterfaceType_lf_unannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannInterfaceType_lf_unannClassOrInterfaceType;
    }

	unannClassType_lf_unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassType_lf_unannClassOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannInterfaceType_lf_unannClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannInterfaceType_lfno_unannClassOrInterfaceType;
    }

	unannClassType_lfno_unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassType_lfno_unannClassOrInterfaceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannInterfaceType_lfno_unannClassOrInterfaceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannTypeVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannTypeVariable;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannTypeVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannTypeVariable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannTypeVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnannArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unannArrayType;
    }

	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	unannTypeVariable() {
	    return this.getTypedRuleContext(UnannTypeVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnannArrayType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnannArrayType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnannArrayType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodDeclaration;
    }

	methodHeader() {
	    return this.getTypedRuleContext(MethodHeaderContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	methodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(MethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	SYNCHRONIZED() {
	    return this.getToken(Java8Parser.SYNCHRONIZED, 0);
	};

	NATIVE() {
	    return this.getToken(Java8Parser.NATIVE, 0);
	};

	STRICTFP() {
	    return this.getToken(Java8Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodHeader;
    }

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	methodDeclarator() {
	    return this.getTypedRuleContext(MethodDeclaratorContext,0);
	};

	throws_() {
	    return this.getTypedRuleContext(Throws_Context,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodHeader(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodHeader(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodHeader(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_result;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterResult(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitResult(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitResult(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodDeclarator;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_formalParameterList;
    }

	receiverParameter() {
	    return this.getTypedRuleContext(ReceiverParameterContext,0);
	};

	formalParameters() {
	    return this.getTypedRuleContext(FormalParametersContext,0);
	};

	COMMA() {
	    return this.getToken(Java8Parser.COMMA, 0);
	};

	lastFormalParameter() {
	    return this.getTypedRuleContext(LastFormalParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_formalParameters;
    }

	formalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	receiverParameter() {
	    return this.getTypedRuleContext(ReceiverParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFormalParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFormalParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFormalParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_formalParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFormalParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFormalParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterVariableModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitVariableModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitVariableModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LastFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_lastFormalParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(Java8Parser.ELLIPSIS, 0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	formalParameter() {
	    return this.getTypedRuleContext(FormalParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLastFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLastFormalParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLastFormalParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReceiverParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_receiverParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterReceiverParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitReceiverParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitReceiverParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Throws_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_throws_;
    }

	THROWS() {
	    return this.getToken(Java8Parser.THROWS, 0);
	};

	exceptionTypeList() {
	    return this.getTypedRuleContext(ExceptionTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterThrows_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitThrows_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitThrows_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_exceptionTypeList;
    }

	exceptionType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExceptionTypeContext);
	    } else {
	        return this.getTypedRuleContext(ExceptionTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterExceptionTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitExceptionTypeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitExceptionTypeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_exceptionType;
    }

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterExceptionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitExceptionType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitExceptionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InstanceInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_instanceInitializer;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInstanceInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInstanceInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInstanceInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StaticInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_staticInitializer;
    }

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterStaticInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitStaticInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitStaticInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constructorDeclaration;
    }

	constructorDeclarator() {
	    return this.getTypedRuleContext(ConstructorDeclaratorContext,0);
	};

	constructorBody() {
	    return this.getTypedRuleContext(ConstructorBodyContext,0);
	};

	constructorModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructorModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstructorModifierContext,i);
	    }
	};

	throws_() {
	    return this.getTypedRuleContext(Throws_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConstructorDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConstructorDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConstructorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constructorModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConstructorModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConstructorModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConstructorModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constructorDeclarator;
    }

	simpleTypeName() {
	    return this.getTypedRuleContext(SimpleTypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConstructorDeclarator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConstructorDeclarator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConstructorDeclarator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_simpleTypeName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSimpleTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSimpleTypeName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSimpleTypeName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstructorBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constructorBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	explicitConstructorInvocation() {
	    return this.getTypedRuleContext(ExplicitConstructorInvocationContext,0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConstructorBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConstructorBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConstructorBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitConstructorInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_explicitConstructorInvocation;
    }

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterExplicitConstructorInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitExplicitConstructorInvocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitExplicitConstructorInvocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumDeclaration;
    }

	ENUM() {
	    return this.getToken(Java8Parser.ENUM, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enumBody() {
	    return this.getTypedRuleContext(EnumBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	superinterfaces() {
	    return this.getTypedRuleContext(SuperinterfacesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEnumDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEnumDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEnumDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	enumConstantList() {
	    return this.getTypedRuleContext(EnumConstantListContext,0);
	};

	COMMA() {
	    return this.getToken(Java8Parser.COMMA, 0);
	};

	enumBodyDeclarations() {
	    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEnumBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEnumBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEnumBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumConstantList;
    }

	enumConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEnumConstantList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEnumConstantList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEnumConstantList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumConstant;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enumConstantModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantModifierContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantModifierContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEnumConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEnumConstant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEnumConstant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumConstantModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEnumConstantModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEnumConstantModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEnumConstantModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumBodyDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumBodyDeclarations;
    }

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEnumBodyDeclarations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEnumBodyDeclarations(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEnumBodyDeclarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceDeclaration;
    }

	normalInterfaceDeclaration() {
	    return this.getTypedRuleContext(NormalInterfaceDeclarationContext,0);
	};

	annotationTypeDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_normalInterfaceDeclaration;
    }

	INTERFACE() {
	    return this.getToken(Java8Parser.INTERFACE, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	interfaceBody() {
	    return this.getTypedRuleContext(InterfaceBodyContext,0);
	};

	interfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	extendsInterfaces() {
	    return this.getTypedRuleContext(ExtendsInterfacesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterNormalInterfaceDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitNormalInterfaceDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitNormalInterfaceDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java8Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java8Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	STRICTFP() {
	    return this.getToken(Java8Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExtendsInterfacesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_extendsInterfaces;
    }

	EXTENDS() {
	    return this.getToken(Java8Parser.EXTENDS, 0);
	};

	interfaceTypeList() {
	    return this.getTypedRuleContext(InterfaceTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterExtendsInterfaces(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitExtendsInterfaces(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitExtendsInterfaces(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	interfaceMemberDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMemberDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMemberDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceMemberDeclaration;
    }

	constantDeclaration() {
	    return this.getTypedRuleContext(ConstantDeclarationContext,0);
	};

	interfaceMethodDeclaration() {
	    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constantDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	constantModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstantModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConstantDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConstantDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConstantDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constantModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java8Parser.FINAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConstantModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConstantModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConstantModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceMethodDeclaration;
    }

	methodHeader() {
	    return this.getTypedRuleContext(MethodHeaderContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	interfaceMethodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceMethodDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceMethodDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceMethodDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InterfaceMethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_interfaceMethodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	DEFAULT() {
	    return this.getToken(Java8Parser.DEFAULT, 0);
	};

	STATIC() {
	    return this.getToken(Java8Parser.STATIC, 0);
	};

	STRICTFP() {
	    return this.getToken(Java8Parser.STRICTFP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInterfaceMethodModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInterfaceMethodModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInterfaceMethodModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeDeclaration;
    }

	AT() {
	    return this.getToken(Java8Parser.AT, 0);
	};

	INTERFACE() {
	    return this.getToken(Java8Parser.INTERFACE, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	annotationTypeBody() {
	    return this.getTypedRuleContext(AnnotationTypeBodyContext,0);
	};

	interfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAnnotationTypeDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAnnotationTypeDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAnnotationTypeDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeBody;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	annotationTypeMemberDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationTypeMemberDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationTypeMemberDeclarationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAnnotationTypeBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAnnotationTypeBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAnnotationTypeBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeMemberDeclaration;
    }

	annotationTypeElementDeclaration() {
	    return this.getTypedRuleContext(AnnotationTypeElementDeclarationContext,0);
	};

	constantDeclaration() {
	    return this.getTypedRuleContext(ConstantDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAnnotationTypeMemberDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAnnotationTypeMemberDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAnnotationTypeMemberDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeElementDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeElementDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	annotationTypeElementModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationTypeElementModifierContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationTypeElementModifierContext,i);
	    }
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAnnotationTypeElementDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAnnotationTypeElementDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAnnotationTypeElementDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationTypeElementModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotationTypeElementModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java8Parser.PUBLIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java8Parser.ABSTRACT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAnnotationTypeElementModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAnnotationTypeElementModifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAnnotationTypeElementModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_defaultValue;
    }

	DEFAULT() {
	    return this.getToken(Java8Parser.DEFAULT, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterDefaultValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitDefaultValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitDefaultValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_annotation;
    }

	normalAnnotation() {
	    return this.getTypedRuleContext(NormalAnnotationContext,0);
	};

	markerAnnotation() {
	    return this.getTypedRuleContext(MarkerAnnotationContext,0);
	};

	singleElementAnnotation() {
	    return this.getTypedRuleContext(SingleElementAnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NormalAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_normalAnnotation;
    }

	AT() {
	    return this.getToken(Java8Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	elementValuePairList() {
	    return this.getTypedRuleContext(ElementValuePairListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterNormalAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitNormalAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitNormalAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValuePairList;
    }

	elementValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValuePairContext);
	    } else {
	        return this.getTypedRuleContext(ElementValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterElementValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitElementValuePairList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitElementValuePairList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValuePair;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	ASSIGN() {
	    return this.getToken(Java8Parser.ASSIGN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterElementValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitElementValuePair(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitElementValuePair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValue;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	elementValueArrayInitializer() {
	    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterElementValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitElementValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitElementValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValueArrayInitializer;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	elementValueList() {
	    return this.getTypedRuleContext(ElementValueListContext,0);
	};

	COMMA() {
	    return this.getToken(Java8Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterElementValueArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitElementValueArrayInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitElementValueArrayInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElementValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_elementValueList;
    }

	elementValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValueContext);
	    } else {
	        return this.getTypedRuleContext(ElementValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterElementValueList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitElementValueList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitElementValueList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MarkerAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_markerAnnotation;
    }

	AT() {
	    return this.getToken(Java8Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMarkerAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMarkerAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMarkerAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleElementAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_singleElementAnnotation;
    }

	AT() {
	    return this.getToken(Java8Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSingleElementAnnotation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSingleElementAnnotation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSingleElementAnnotation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayInitializer;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	variableInitializerList() {
	    return this.getTypedRuleContext(VariableInitializerListContext,0);
	};

	COMMA() {
	    return this.getToken(Java8Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterArrayInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitArrayInitializer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitArrayInitializer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableInitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_variableInitializerList;
    }

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterVariableInitializerList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitVariableInitializerList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitVariableInitializerList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_block;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_blockStatements;
    }

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterBlockStatements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitBlockStatements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitBlockStatements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_blockStatement;
    }

	localVariableDeclarationStatement() {
	    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterBlockStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitBlockStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitBlockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalVariableDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_localVariableDeclarationStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLocalVariableDeclarationStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLocalVariableDeclarationStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLocalVariableDeclarationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_localVariableDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLocalVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLocalVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLocalVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statement;
    }

	statementWithoutTrailingSubstatement() {
	    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
	};

	labeledStatement() {
	    return this.getTypedRuleContext(LabeledStatementContext,0);
	};

	ifThenStatement() {
	    return this.getTypedRuleContext(IfThenStatementContext,0);
	};

	ifThenElseStatement() {
	    return this.getTypedRuleContext(IfThenElseStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statementNoShortIf;
    }

	statementWithoutTrailingSubstatement() {
	    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
	};

	labeledStatementNoShortIf() {
	    return this.getTypedRuleContext(LabeledStatementNoShortIfContext,0);
	};

	ifThenElseStatementNoShortIf() {
	    return this.getTypedRuleContext(IfThenElseStatementNoShortIfContext,0);
	};

	whileStatementNoShortIf() {
	    return this.getTypedRuleContext(WhileStatementNoShortIfContext,0);
	};

	forStatementNoShortIf() {
	    return this.getTypedRuleContext(ForStatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementWithoutTrailingSubstatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statementWithoutTrailingSubstatement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	emptyStatement() {
	    return this.getTypedRuleContext(EmptyStatementContext,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	assertStatement() {
	    return this.getTypedRuleContext(AssertStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	synchronizedStatement() {
	    return this.getTypedRuleContext(SynchronizedStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterStatementWithoutTrailingSubstatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitStatementWithoutTrailingSubstatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitStatementWithoutTrailingSubstatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EmptyStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_emptyStatement;
    }

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEmptyStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEmptyStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEmptyStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_labeledStatement;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLabeledStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLabeledStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLabeledStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_labeledStatementNoShortIf;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLabeledStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLabeledStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLabeledStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_expressionStatement;
    }

	statementExpression() {
	    return this.getTypedRuleContext(StatementExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterExpressionStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitExpressionStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitExpressionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statementExpression;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	preIncrementExpression() {
	    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
	};

	preDecrementExpression() {
	    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
	};

	postIncrementExpression() {
	    return this.getTypedRuleContext(PostIncrementExpressionContext,0);
	};

	postDecrementExpression() {
	    return this.getTypedRuleContext(PostDecrementExpressionContext,0);
	};

	methodInvocation() {
	    return this.getTypedRuleContext(MethodInvocationContext,0);
	};

	classInstanceCreationExpression() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterStatementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitStatementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitStatementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfThenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_ifThenStatement;
    }

	IF() {
	    return this.getToken(Java8Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterIfThenStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitIfThenStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitIfThenStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfThenElseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_ifThenElseStatement;
    }

	IF() {
	    return this.getToken(Java8Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	ELSE() {
	    return this.getToken(Java8Parser.ELSE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterIfThenElseStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitIfThenElseStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitIfThenElseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfThenElseStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_ifThenElseStatementNoShortIf;
    }

	IF() {
	    return this.getToken(Java8Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementNoShortIfContext);
	    } else {
	        return this.getTypedRuleContext(StatementNoShortIfContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Java8Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterIfThenElseStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitIfThenElseStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitIfThenElseStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_assertStatement;
    }

	ASSERT() {
	    return this.getToken(Java8Parser.ASSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAssertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAssertStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAssertStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchStatement;
    }

	SWITCH() {
	    return this.getToken(Java8Parser.SWITCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	switchBlock() {
	    return this.getTypedRuleContext(SwitchBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSwitchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSwitchStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSwitchStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchBlock;
    }

	LBRACE() {
	    return this.getToken(Java8Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java8Parser.RBRACE, 0);
	};

	switchBlockStatementGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
	    } else {
	        return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);
	    }
	};

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSwitchBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSwitchBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSwitchBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchBlockStatementGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchBlockStatementGroup;
    }

	switchLabels() {
	    return this.getTypedRuleContext(SwitchLabelsContext,0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSwitchBlockStatementGroup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSwitchBlockStatementGroup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSwitchBlockStatementGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchLabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchLabels;
    }

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSwitchLabels(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSwitchLabels(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSwitchLabels(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SwitchLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_switchLabel;
    }

	CASE() {
	    return this.getToken(Java8Parser.CASE, 0);
	};

	constantExpression() {
	    return this.getTypedRuleContext(ConstantExpressionContext,0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	enumConstantName() {
	    return this.getTypedRuleContext(EnumConstantNameContext,0);
	};

	DEFAULT() {
	    return this.getToken(Java8Parser.DEFAULT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSwitchLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSwitchLabel(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSwitchLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumConstantNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enumConstantName;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEnumConstantName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEnumConstantName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEnumConstantName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_whileStatement;
    }

	WHILE() {
	    return this.getToken(Java8Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterWhileStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitWhileStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitWhileStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhileStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_whileStatementNoShortIf;
    }

	WHILE() {
	    return this.getToken(Java8Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterWhileStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitWhileStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitWhileStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(Java8Parser.DO, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	WHILE() {
	    return this.getToken(Java8Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterDoStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitDoStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_forStatement;
    }

	basicForStatement() {
	    return this.getTypedRuleContext(BasicForStatementContext,0);
	};

	enhancedForStatement() {
	    return this.getTypedRuleContext(EnhancedForStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_forStatementNoShortIf;
    }

	basicForStatementNoShortIf() {
	    return this.getTypedRuleContext(BasicForStatementNoShortIfContext,0);
	};

	enhancedForStatementNoShortIf() {
	    return this.getTypedRuleContext(EnhancedForStatementNoShortIfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterForStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitForStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitForStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BasicForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_basicForStatement;
    }

	FOR() {
	    return this.getToken(Java8Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.SEMI);
	    } else {
	        return this.getToken(Java8Parser.SEMI, i);
	    }
	};


	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterBasicForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitBasicForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitBasicForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BasicForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_basicForStatementNoShortIf;
    }

	FOR() {
	    return this.getToken(Java8Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.SEMI);
	    } else {
	        return this.getToken(Java8Parser.SEMI, i);
	    }
	};


	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterBasicForStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitBasicForStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitBasicForStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_forInit;
    }

	statementExpressionList() {
	    return this.getTypedRuleContext(StatementExpressionListContext,0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterForInit(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitForInit(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitForInit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ForUpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_forUpdate;
    }

	statementExpressionList() {
	    return this.getTypedRuleContext(StatementExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterForUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitForUpdate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitForUpdate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_statementExpressionList;
    }

	statementExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StatementExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterStatementExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitStatementExpressionList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitStatementExpressionList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnhancedForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enhancedForStatement;
    }

	FOR() {
	    return this.getToken(Java8Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEnhancedForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEnhancedForStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEnhancedForStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnhancedForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_enhancedForStatementNoShortIf;
    }

	FOR() {
	    return this.getToken(Java8Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEnhancedForStatementNoShortIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEnhancedForStatementNoShortIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEnhancedForStatementNoShortIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_breakStatement;
    }

	BREAK() {
	    return this.getToken(Java8Parser.BREAK, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterBreakStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitBreakStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitBreakStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_continueStatement;
    }

	CONTINUE() {
	    return this.getToken(Java8Parser.CONTINUE, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterContinueStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitContinueStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitContinueStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(Java8Parser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_throwStatement;
    }

	THROW() {
	    return this.getToken(Java8Parser.THROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterThrowStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitThrowStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitThrowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SynchronizedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_synchronizedStatement;
    }

	SYNCHRONIZED() {
	    return this.getToken(Java8Parser.SYNCHRONIZED, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterSynchronizedStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitSynchronizedStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitSynchronizedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_tryStatement;
    }

	TRY() {
	    return this.getToken(Java8Parser.TRY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catches() {
	    return this.getTypedRuleContext(CatchesContext,0);
	};

	finally_() {
	    return this.getTypedRuleContext(Finally_Context,0);
	};

	tryWithResourcesStatement() {
	    return this.getTypedRuleContext(TryWithResourcesStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTryStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTryStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_catches;
    }

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterCatches(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitCatches(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitCatches(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_catchClause;
    }

	CATCH() {
	    return this.getToken(Java8Parser.CATCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	catchFormalParameter() {
	    return this.getTypedRuleContext(CatchFormalParameterContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterCatchClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitCatchClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitCatchClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_catchFormalParameter;
    }

	catchType() {
	    return this.getTypedRuleContext(CatchTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterCatchFormalParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitCatchFormalParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitCatchFormalParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CatchTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_catchType;
    }

	unannClassType() {
	    return this.getTypedRuleContext(UnannClassTypeContext,0);
	};

	BITOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.BITOR);
	    } else {
	        return this.getToken(Java8Parser.BITOR, i);
	    }
	};


	classType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassTypeContext);
	    } else {
	        return this.getTypedRuleContext(ClassTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterCatchType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitCatchType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitCatchType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Finally_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_finally_;
    }

	FINALLY() {
	    return this.getToken(Java8Parser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFinally_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFinally_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFinally_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryWithResourcesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_tryWithResourcesStatement;
    }

	TRY() {
	    return this.getToken(Java8Parser.TRY, 0);
	};

	resourceSpecification() {
	    return this.getTypedRuleContext(ResourceSpecificationContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catches() {
	    return this.getTypedRuleContext(CatchesContext,0);
	};

	finally_() {
	    return this.getTypedRuleContext(Finally_Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTryWithResourcesStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTryWithResourcesStatement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTryWithResourcesStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_resourceSpecification;
    }

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	resourceList() {
	    return this.getTypedRuleContext(ResourceListContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java8Parser.SEMI, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterResourceSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitResourceSpecification(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitResourceSpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_resourceList;
    }

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.SEMI);
	    } else {
	        return this.getToken(Java8Parser.SEMI, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterResourceList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitResourceList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitResourceList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_resource;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(Java8Parser.ASSIGN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitResource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primary;
    }

	primaryNoNewArray_lfno_primary() {
	    return this.getTypedRuleContext(PrimaryNoNewArray_lfno_primaryContext,0);
	};

	arrayCreationExpression() {
	    return this.getTypedRuleContext(ArrayCreationExpressionContext,0);
	};

	primaryNoNewArray_lf_primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryNoNewArray_lf_primaryContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryNoNewArray_lf_primaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classInstanceCreationExpression() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};

	arrayAccess() {
	    return this.getTypedRuleContext(ArrayAccessContext,0);
	};

	methodInvocation() {
	    return this.getTypedRuleContext(MethodInvocationContext,0);
	};

	methodReference() {
	    return this.getTypedRuleContext(MethodReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimaryNoNewArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimaryNoNewArray(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArray_lf_arrayAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_arrayAccess;
    }


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimaryNoNewArray_lf_arrayAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimaryNoNewArray_lf_arrayAccess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray_lf_arrayAccess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArray_lfno_arrayAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_arrayAccess;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classInstanceCreationExpression() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};

	methodInvocation() {
	    return this.getTypedRuleContext(MethodInvocationContext,0);
	};

	methodReference() {
	    return this.getTypedRuleContext(MethodReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimaryNoNewArray_lfno_arrayAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimaryNoNewArray_lfno_arrayAccess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray_lfno_arrayAccess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArray_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_primary;
    }

	classInstanceCreationExpression_lf_primary() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpression_lf_primaryContext,0);
	};

	fieldAccess_lf_primary() {
	    return this.getTypedRuleContext(FieldAccess_lf_primaryContext,0);
	};

	arrayAccess_lf_primary() {
	    return this.getTypedRuleContext(ArrayAccess_lf_primaryContext,0);
	};

	methodInvocation_lf_primary() {
	    return this.getTypedRuleContext(MethodInvocation_lf_primaryContext,0);
	};

	methodReference_lf_primary() {
	    return this.getTypedRuleContext(MethodReference_lf_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimaryNoNewArray_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimaryNoNewArray_lf_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray_lf_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary;
    }


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary;
    }

	classInstanceCreationExpression_lf_primary() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpression_lf_primaryContext,0);
	};

	fieldAccess_lf_primary() {
	    return this.getTypedRuleContext(FieldAccess_lf_primaryContext,0);
	};

	methodInvocation_lf_primary() {
	    return this.getTypedRuleContext(MethodInvocation_lf_primaryContext,0);
	};

	methodReference_lf_primary() {
	    return this.getTypedRuleContext(MethodReference_lf_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArray_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_primary;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classInstanceCreationExpression_lfno_primary() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpression_lfno_primaryContext,0);
	};

	fieldAccess_lfno_primary() {
	    return this.getTypedRuleContext(FieldAccess_lfno_primaryContext,0);
	};

	arrayAccess_lfno_primary() {
	    return this.getTypedRuleContext(ArrayAccess_lfno_primaryContext,0);
	};

	methodInvocation_lfno_primary() {
	    return this.getTypedRuleContext(MethodInvocation_lfno_primaryContext,0);
	};

	methodReference_lfno_primary() {
	    return this.getTypedRuleContext(MethodReference_lfno_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimaryNoNewArray_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimaryNoNewArray_lfno_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray_lfno_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary;
    }


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java8Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	VOID() {
	    return this.getToken(Java8Parser.VOID, 0);
	};

	THIS() {
	    return this.getToken(Java8Parser.THIS, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	classInstanceCreationExpression_lfno_primary() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpression_lfno_primaryContext,0);
	};

	fieldAccess_lfno_primary() {
	    return this.getTypedRuleContext(FieldAccess_lfno_primaryContext,0);
	};

	methodInvocation_lfno_primary() {
	    return this.getTypedRuleContext(MethodInvocation_lfno_primaryContext,0);
	};

	methodReference_lfno_primary() {
	    return this.getTypedRuleContext(MethodReference_lfno_primaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassInstanceCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classInstanceCreationExpression;
    }

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.Identifier);
	    } else {
	        return this.getToken(Java8Parser.Identifier, i);
	    }
	};


	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	typeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassInstanceCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassInstanceCreationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassInstanceCreationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassInstanceCreationExpression_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classInstanceCreationExpression_lf_primary;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassInstanceCreationExpression_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassInstanceCreationExpression_lf_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassInstanceCreationExpression_lf_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassInstanceCreationExpression_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_classInstanceCreationExpression_lfno_primary;
    }

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.Identifier);
	    } else {
	        return this.getToken(Java8Parser.Identifier, i);
	    }
	};


	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	typeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterClassInstanceCreationExpression_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitClassInstanceCreationExpression_lfno_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitClassInstanceCreationExpression_lfno_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_typeArgumentsOrDiamond;
    }

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	LT() {
	    return this.getToken(Java8Parser.LT, 0);
	};

	GT() {
	    return this.getToken(Java8Parser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterTypeArgumentsOrDiamond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitTypeArgumentsOrDiamond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitTypeArgumentsOrDiamond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldAccess;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFieldAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFieldAccess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFieldAccess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldAccess_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldAccess_lf_primary;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFieldAccess_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFieldAccess_lf_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFieldAccess_lf_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldAccess_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_fieldAccess_lfno_primary;
    }

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterFieldAccess_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitFieldAccess_lfno_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitFieldAccess_lfno_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayAccess;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	primaryNoNewArray_lfno_arrayAccess() {
	    return this.getTypedRuleContext(PrimaryNoNewArray_lfno_arrayAccessContext,0);
	};

	primaryNoNewArray_lf_arrayAccess = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryNoNewArray_lf_arrayAccessContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryNoNewArray_lf_arrayAccessContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterArrayAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitArrayAccess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitArrayAccess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayAccess_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayAccess_lf_primary;
    }

	primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary() {
	    return this.getTypedRuleContext(PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterArrayAccess_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitArrayAccess_lf_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitArrayAccess_lf_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayAccess_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayAccess_lfno_primary;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LBRACK);
	    } else {
	        return this.getToken(Java8Parser.LBRACK, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.RBRACK);
	    } else {
	        return this.getToken(Java8Parser.RBRACK, i);
	    }
	};


	primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary() {
	    return this.getTypedRuleContext(PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext,0);
	};

	primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterArrayAccess_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitArrayAccess_lfno_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitArrayAccess_lfno_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodInvocation;
    }

	methodName() {
	    return this.getTypedRuleContext(MethodNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodInvocation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodInvocation(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodInvocation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodInvocation_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodInvocation_lf_primary;
    }

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodInvocation_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodInvocation_lf_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodInvocation_lf_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodInvocation_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodInvocation_lfno_primary;
    }

	methodName() {
	    return this.getTypedRuleContext(MethodNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.DOT);
	    } else {
	        return this.getToken(Java8Parser.DOT, i);
	    }
	};


	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodInvocation_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodInvocation_lfno_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodInvocation_lfno_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_argumentList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitArgumentList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitArgumentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodReference;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java8Parser.COLONCOLON, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodReference_lf_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodReference_lf_primary;
    }

	COLONCOLON() {
	    return this.getToken(Java8Parser.COLONCOLON, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodReference_lf_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodReference_lf_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodReference_lf_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MethodReference_lfno_primaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_methodReference_lfno_primary;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java8Parser.COLONCOLON, 0);
	};

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	SUPER() {
	    return this.getToken(Java8Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java8Parser.DOT, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMethodReference_lfno_primary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMethodReference_lfno_primary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMethodReference_lfno_primary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_arrayCreationExpression;
    }

	NEW() {
	    return this.getToken(Java8Parser.NEW, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dimExprs() {
	    return this.getTypedRuleContext(DimExprsContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterArrayCreationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitArrayCreationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitArrayCreationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DimExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_dimExprs;
    }

	dimExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DimExprContext);
	    } else {
	        return this.getTypedRuleContext(DimExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterDimExprs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitDimExprs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitDimExprs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DimExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_dimExpr;
    }

	LBRACK() {
	    return this.getToken(Java8Parser.LBRACK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(Java8Parser.RBRACK, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterDimExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitDimExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitDimExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_constantExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConstantExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConstantExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConstantExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_expression;
    }

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_lambdaExpression;
    }

	lambdaParameters() {
	    return this.getTypedRuleContext(LambdaParametersContext,0);
	};

	ARROW() {
	    return this.getToken(Java8Parser.ARROW, 0);
	};

	lambdaBody() {
	    return this.getTypedRuleContext(LambdaBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLambdaExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLambdaExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLambdaExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_lambdaParameters;
    }

	Identifier() {
	    return this.getToken(Java8Parser.Identifier, 0);
	};

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	inferredFormalParameterList() {
	    return this.getTypedRuleContext(InferredFormalParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLambdaParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLambdaParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLambdaParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InferredFormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_inferredFormalParameterList;
    }

	Identifier = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.Identifier);
	    } else {
	        return this.getToken(Java8Parser.Identifier, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.COMMA);
	    } else {
	        return this.getToken(Java8Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInferredFormalParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInferredFormalParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInferredFormalParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdaBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_lambdaBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLambdaBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLambdaBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLambdaBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_assignmentExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAssignmentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAssignmentExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAssignmentExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_assignment;
    }

	leftHandSide() {
	    return this.getTypedRuleContext(LeftHandSideContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAssignment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAssignment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAssignment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LeftHandSideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_leftHandSide;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};

	arrayAccess() {
	    return this.getTypedRuleContext(ArrayAccessContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterLeftHandSide(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitLeftHandSide(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitLeftHandSide(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_assignmentOperator;
    }

	ASSIGN() {
	    return this.getToken(Java8Parser.ASSIGN, 0);
	};

	MUL_ASSIGN() {
	    return this.getToken(Java8Parser.MUL_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(Java8Parser.DIV_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(Java8Parser.MOD_ASSIGN, 0);
	};

	ADD_ASSIGN() {
	    return this.getToken(Java8Parser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(Java8Parser.SUB_ASSIGN, 0);
	};

	LSHIFT_ASSIGN() {
	    return this.getToken(Java8Parser.LSHIFT_ASSIGN, 0);
	};

	RSHIFT_ASSIGN() {
	    return this.getToken(Java8Parser.RSHIFT_ASSIGN, 0);
	};

	URSHIFT_ASSIGN() {
	    return this.getToken(Java8Parser.URSHIFT_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(Java8Parser.AND_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(Java8Parser.XOR_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(Java8Parser.OR_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAssignmentOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAssignmentOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAssignmentOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_conditionalExpression;
    }

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	QUESTION() {
	    return this.getToken(Java8Parser.QUESTION, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(Java8Parser.COLON, 0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConditionalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConditionalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression() {
	    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
	};

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	OR() {
	    return this.getToken(Java8Parser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConditionalOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_conditionalAndExpression;
    }

	inclusiveOrExpression() {
	    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
	};

	conditionalAndExpression() {
	    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
	};

	AND() {
	    return this.getToken(Java8Parser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitConditionalAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_inclusiveOrExpression;
    }

	exclusiveOrExpression() {
	    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
	};

	inclusiveOrExpression() {
	    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
	};

	BITOR() {
	    return this.getToken(Java8Parser.BITOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterInclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitInclusiveOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitInclusiveOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_exclusiveOrExpression;
    }

	andExpression() {
	    return this.getTypedRuleContext(AndExpressionContext,0);
	};

	exclusiveOrExpression() {
	    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
	};

	CARET() {
	    return this.getToken(Java8Parser.CARET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterExclusiveOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitExclusiveOrExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitExclusiveOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_andExpression;
    }

	equalityExpression() {
	    return this.getTypedRuleContext(EqualityExpressionContext,0);
	};

	andExpression() {
	    return this.getTypedRuleContext(AndExpressionContext,0);
	};

	BITAND() {
	    return this.getToken(Java8Parser.BITAND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAndExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAndExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_equalityExpression;
    }

	relationalExpression() {
	    return this.getTypedRuleContext(RelationalExpressionContext,0);
	};

	equalityExpression() {
	    return this.getTypedRuleContext(EqualityExpressionContext,0);
	};

	EQUAL() {
	    return this.getToken(Java8Parser.EQUAL, 0);
	};

	NOTEQUAL() {
	    return this.getToken(Java8Parser.NOTEQUAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterEqualityExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitEqualityExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitEqualityExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_relationalExpression;
    }

	shiftExpression() {
	    return this.getTypedRuleContext(ShiftExpressionContext,0);
	};

	relationalExpression() {
	    return this.getTypedRuleContext(RelationalExpressionContext,0);
	};

	LT() {
	    return this.getToken(Java8Parser.LT, 0);
	};

	GT() {
	    return this.getToken(Java8Parser.GT, 0);
	};

	LE() {
	    return this.getToken(Java8Parser.LE, 0);
	};

	GE() {
	    return this.getToken(Java8Parser.GE, 0);
	};

	INSTANCEOF() {
	    return this.getToken(Java8Parser.INSTANCEOF, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitRelationalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_shiftExpression;
    }

	additiveExpression() {
	    return this.getTypedRuleContext(AdditiveExpressionContext,0);
	};

	shiftExpression() {
	    return this.getTypedRuleContext(ShiftExpressionContext,0);
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.LT);
	    } else {
	        return this.getToken(Java8Parser.LT, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java8Parser.GT);
	    } else {
	        return this.getToken(Java8Parser.GT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterShiftExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitShiftExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitShiftExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_additiveExpression;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	additiveExpression() {
	    return this.getTypedRuleContext(AdditiveExpressionContext,0);
	};

	ADD() {
	    return this.getToken(Java8Parser.ADD, 0);
	};

	SUB() {
	    return this.getToken(Java8Parser.SUB, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitAdditiveExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_multiplicativeExpression;
    }

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	MUL() {
	    return this.getToken(Java8Parser.MUL, 0);
	};

	DIV() {
	    return this.getToken(Java8Parser.DIV, 0);
	};

	MOD() {
	    return this.getToken(Java8Parser.MOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitMultiplicativeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unaryExpression;
    }

	preIncrementExpression() {
	    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
	};

	preDecrementExpression() {
	    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
	};

	ADD() {
	    return this.getToken(Java8Parser.ADD, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	SUB() {
	    return this.getToken(Java8Parser.SUB, 0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnaryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreIncrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_preIncrementExpression;
    }

	INC() {
	    return this.getToken(Java8Parser.INC, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPreIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPreIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPreIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreDecrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_preDecrementExpression;
    }

	DEC() {
	    return this.getToken(Java8Parser.DEC, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPreDecrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPreDecrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPreDecrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnaryExpressionNotPlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_unaryExpressionNotPlusMinus;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	TILDE() {
	    return this.getToken(Java8Parser.TILDE, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	BANG() {
	    return this.getToken(Java8Parser.BANG, 0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterUnaryExpressionNotPlusMinus(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitUnaryExpressionNotPlusMinus(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitUnaryExpressionNotPlusMinus(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postfixExpression;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	postIncrementExpression_lf_postfixExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PostIncrementExpression_lf_postfixExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PostIncrementExpression_lf_postfixExpressionContext,i);
	    }
	};

	postDecrementExpression_lf_postfixExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PostDecrementExpression_lf_postfixExpressionContext);
	    } else {
	        return this.getTypedRuleContext(PostDecrementExpression_lf_postfixExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPostfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPostfixExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPostfixExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostIncrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postIncrementExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	INC() {
	    return this.getToken(Java8Parser.INC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPostIncrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPostIncrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPostIncrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostIncrementExpression_lf_postfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postIncrementExpression_lf_postfixExpression;
    }

	INC() {
	    return this.getToken(Java8Parser.INC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPostIncrementExpression_lf_postfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPostIncrementExpression_lf_postfixExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPostIncrementExpression_lf_postfixExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostDecrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postDecrementExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	DEC() {
	    return this.getToken(Java8Parser.DEC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPostDecrementExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPostDecrementExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPostDecrementExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PostDecrementExpression_lf_postfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_postDecrementExpression_lf_postfixExpression;
    }

	DEC() {
	    return this.getToken(Java8Parser.DEC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterPostDecrementExpression_lf_postfixExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitPostDecrementExpression_lf_postfixExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitPostDecrementExpression_lf_postfixExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java8Parser.RULE_castExpression;
    }

	LPAREN() {
	    return this.getToken(Java8Parser.LPAREN, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(Java8Parser.RPAREN, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	additionalBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditionalBoundContext);
	    } else {
	        return this.getTypedRuleContext(AdditionalBoundContext,i);
	    }
	};

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.enterCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Java8ParserListener ) {
	        listener.exitCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Java8ParserVisitor ) {
	        return visitor.visitCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




Java8Parser.LiteralContext = LiteralContext; 
Java8Parser.PrimitiveTypeContext = PrimitiveTypeContext; 
Java8Parser.NumericTypeContext = NumericTypeContext; 
Java8Parser.IntegralTypeContext = IntegralTypeContext; 
Java8Parser.FloatingPointTypeContext = FloatingPointTypeContext; 
Java8Parser.ReferenceTypeContext = ReferenceTypeContext; 
Java8Parser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext; 
Java8Parser.ClassTypeContext = ClassTypeContext; 
Java8Parser.ClassType_lf_classOrInterfaceTypeContext = ClassType_lf_classOrInterfaceTypeContext; 
Java8Parser.ClassType_lfno_classOrInterfaceTypeContext = ClassType_lfno_classOrInterfaceTypeContext; 
Java8Parser.InterfaceTypeContext = InterfaceTypeContext; 
Java8Parser.InterfaceType_lf_classOrInterfaceTypeContext = InterfaceType_lf_classOrInterfaceTypeContext; 
Java8Parser.InterfaceType_lfno_classOrInterfaceTypeContext = InterfaceType_lfno_classOrInterfaceTypeContext; 
Java8Parser.TypeVariableContext = TypeVariableContext; 
Java8Parser.ArrayTypeContext = ArrayTypeContext; 
Java8Parser.DimsContext = DimsContext; 
Java8Parser.TypeParameterContext = TypeParameterContext; 
Java8Parser.TypeParameterModifierContext = TypeParameterModifierContext; 
Java8Parser.TypeBoundContext = TypeBoundContext; 
Java8Parser.AdditionalBoundContext = AdditionalBoundContext; 
Java8Parser.TypeArgumentsContext = TypeArgumentsContext; 
Java8Parser.TypeArgumentListContext = TypeArgumentListContext; 
Java8Parser.TypeArgumentContext = TypeArgumentContext; 
Java8Parser.WildcardContext = WildcardContext; 
Java8Parser.WildcardBoundsContext = WildcardBoundsContext; 
Java8Parser.PackageNameContext = PackageNameContext; 
Java8Parser.TypeNameContext = TypeNameContext; 
Java8Parser.PackageOrTypeNameContext = PackageOrTypeNameContext; 
Java8Parser.ExpressionNameContext = ExpressionNameContext; 
Java8Parser.MethodNameContext = MethodNameContext; 
Java8Parser.AmbiguousNameContext = AmbiguousNameContext; 
Java8Parser.CompilationUnitContext = CompilationUnitContext; 
Java8Parser.PackageDeclarationContext = PackageDeclarationContext; 
Java8Parser.PackageModifierContext = PackageModifierContext; 
Java8Parser.ImportDeclarationContext = ImportDeclarationContext; 
Java8Parser.SingleTypeImportDeclarationContext = SingleTypeImportDeclarationContext; 
Java8Parser.TypeImportOnDemandDeclarationContext = TypeImportOnDemandDeclarationContext; 
Java8Parser.SingleStaticImportDeclarationContext = SingleStaticImportDeclarationContext; 
Java8Parser.StaticImportOnDemandDeclarationContext = StaticImportOnDemandDeclarationContext; 
Java8Parser.TypeDeclarationContext = TypeDeclarationContext; 
Java8Parser.ClassDeclarationContext = ClassDeclarationContext; 
Java8Parser.NormalClassDeclarationContext = NormalClassDeclarationContext; 
Java8Parser.ClassModifierContext = ClassModifierContext; 
Java8Parser.TypeParametersContext = TypeParametersContext; 
Java8Parser.TypeParameterListContext = TypeParameterListContext; 
Java8Parser.SuperclassContext = SuperclassContext; 
Java8Parser.SuperinterfacesContext = SuperinterfacesContext; 
Java8Parser.InterfaceTypeListContext = InterfaceTypeListContext; 
Java8Parser.ClassBodyContext = ClassBodyContext; 
Java8Parser.ClassBodyDeclarationContext = ClassBodyDeclarationContext; 
Java8Parser.ClassMemberDeclarationContext = ClassMemberDeclarationContext; 
Java8Parser.FieldDeclarationContext = FieldDeclarationContext; 
Java8Parser.FieldModifierContext = FieldModifierContext; 
Java8Parser.VariableDeclaratorListContext = VariableDeclaratorListContext; 
Java8Parser.VariableDeclaratorContext = VariableDeclaratorContext; 
Java8Parser.VariableDeclaratorIdContext = VariableDeclaratorIdContext; 
Java8Parser.VariableInitializerContext = VariableInitializerContext; 
Java8Parser.UnannTypeContext = UnannTypeContext; 
Java8Parser.UnannPrimitiveTypeContext = UnannPrimitiveTypeContext; 
Java8Parser.UnannReferenceTypeContext = UnannReferenceTypeContext; 
Java8Parser.UnannClassOrInterfaceTypeContext = UnannClassOrInterfaceTypeContext; 
Java8Parser.UnannClassTypeContext = UnannClassTypeContext; 
Java8Parser.UnannClassType_lf_unannClassOrInterfaceTypeContext = UnannClassType_lf_unannClassOrInterfaceTypeContext; 
Java8Parser.UnannClassType_lfno_unannClassOrInterfaceTypeContext = UnannClassType_lfno_unannClassOrInterfaceTypeContext; 
Java8Parser.UnannInterfaceTypeContext = UnannInterfaceTypeContext; 
Java8Parser.UnannInterfaceType_lf_unannClassOrInterfaceTypeContext = UnannInterfaceType_lf_unannClassOrInterfaceTypeContext; 
Java8Parser.UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext = UnannInterfaceType_lfno_unannClassOrInterfaceTypeContext; 
Java8Parser.UnannTypeVariableContext = UnannTypeVariableContext; 
Java8Parser.UnannArrayTypeContext = UnannArrayTypeContext; 
Java8Parser.MethodDeclarationContext = MethodDeclarationContext; 
Java8Parser.MethodModifierContext = MethodModifierContext; 
Java8Parser.MethodHeaderContext = MethodHeaderContext; 
Java8Parser.ResultContext = ResultContext; 
Java8Parser.MethodDeclaratorContext = MethodDeclaratorContext; 
Java8Parser.FormalParameterListContext = FormalParameterListContext; 
Java8Parser.FormalParametersContext = FormalParametersContext; 
Java8Parser.FormalParameterContext = FormalParameterContext; 
Java8Parser.VariableModifierContext = VariableModifierContext; 
Java8Parser.LastFormalParameterContext = LastFormalParameterContext; 
Java8Parser.ReceiverParameterContext = ReceiverParameterContext; 
Java8Parser.Throws_Context = Throws_Context; 
Java8Parser.ExceptionTypeListContext = ExceptionTypeListContext; 
Java8Parser.ExceptionTypeContext = ExceptionTypeContext; 
Java8Parser.MethodBodyContext = MethodBodyContext; 
Java8Parser.InstanceInitializerContext = InstanceInitializerContext; 
Java8Parser.StaticInitializerContext = StaticInitializerContext; 
Java8Parser.ConstructorDeclarationContext = ConstructorDeclarationContext; 
Java8Parser.ConstructorModifierContext = ConstructorModifierContext; 
Java8Parser.ConstructorDeclaratorContext = ConstructorDeclaratorContext; 
Java8Parser.SimpleTypeNameContext = SimpleTypeNameContext; 
Java8Parser.ConstructorBodyContext = ConstructorBodyContext; 
Java8Parser.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext; 
Java8Parser.EnumDeclarationContext = EnumDeclarationContext; 
Java8Parser.EnumBodyContext = EnumBodyContext; 
Java8Parser.EnumConstantListContext = EnumConstantListContext; 
Java8Parser.EnumConstantContext = EnumConstantContext; 
Java8Parser.EnumConstantModifierContext = EnumConstantModifierContext; 
Java8Parser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext; 
Java8Parser.InterfaceDeclarationContext = InterfaceDeclarationContext; 
Java8Parser.NormalInterfaceDeclarationContext = NormalInterfaceDeclarationContext; 
Java8Parser.InterfaceModifierContext = InterfaceModifierContext; 
Java8Parser.ExtendsInterfacesContext = ExtendsInterfacesContext; 
Java8Parser.InterfaceBodyContext = InterfaceBodyContext; 
Java8Parser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext; 
Java8Parser.ConstantDeclarationContext = ConstantDeclarationContext; 
Java8Parser.ConstantModifierContext = ConstantModifierContext; 
Java8Parser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext; 
Java8Parser.InterfaceMethodModifierContext = InterfaceMethodModifierContext; 
Java8Parser.AnnotationTypeDeclarationContext = AnnotationTypeDeclarationContext; 
Java8Parser.AnnotationTypeBodyContext = AnnotationTypeBodyContext; 
Java8Parser.AnnotationTypeMemberDeclarationContext = AnnotationTypeMemberDeclarationContext; 
Java8Parser.AnnotationTypeElementDeclarationContext = AnnotationTypeElementDeclarationContext; 
Java8Parser.AnnotationTypeElementModifierContext = AnnotationTypeElementModifierContext; 
Java8Parser.DefaultValueContext = DefaultValueContext; 
Java8Parser.AnnotationContext = AnnotationContext; 
Java8Parser.NormalAnnotationContext = NormalAnnotationContext; 
Java8Parser.ElementValuePairListContext = ElementValuePairListContext; 
Java8Parser.ElementValuePairContext = ElementValuePairContext; 
Java8Parser.ElementValueContext = ElementValueContext; 
Java8Parser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext; 
Java8Parser.ElementValueListContext = ElementValueListContext; 
Java8Parser.MarkerAnnotationContext = MarkerAnnotationContext; 
Java8Parser.SingleElementAnnotationContext = SingleElementAnnotationContext; 
Java8Parser.ArrayInitializerContext = ArrayInitializerContext; 
Java8Parser.VariableInitializerListContext = VariableInitializerListContext; 
Java8Parser.BlockContext = BlockContext; 
Java8Parser.BlockStatementsContext = BlockStatementsContext; 
Java8Parser.BlockStatementContext = BlockStatementContext; 
Java8Parser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext; 
Java8Parser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
Java8Parser.StatementContext = StatementContext; 
Java8Parser.StatementNoShortIfContext = StatementNoShortIfContext; 
Java8Parser.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext; 
Java8Parser.EmptyStatementContext = EmptyStatementContext; 
Java8Parser.LabeledStatementContext = LabeledStatementContext; 
Java8Parser.LabeledStatementNoShortIfContext = LabeledStatementNoShortIfContext; 
Java8Parser.ExpressionStatementContext = ExpressionStatementContext; 
Java8Parser.StatementExpressionContext = StatementExpressionContext; 
Java8Parser.IfThenStatementContext = IfThenStatementContext; 
Java8Parser.IfThenElseStatementContext = IfThenElseStatementContext; 
Java8Parser.IfThenElseStatementNoShortIfContext = IfThenElseStatementNoShortIfContext; 
Java8Parser.AssertStatementContext = AssertStatementContext; 
Java8Parser.SwitchStatementContext = SwitchStatementContext; 
Java8Parser.SwitchBlockContext = SwitchBlockContext; 
Java8Parser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext; 
Java8Parser.SwitchLabelsContext = SwitchLabelsContext; 
Java8Parser.SwitchLabelContext = SwitchLabelContext; 
Java8Parser.EnumConstantNameContext = EnumConstantNameContext; 
Java8Parser.WhileStatementContext = WhileStatementContext; 
Java8Parser.WhileStatementNoShortIfContext = WhileStatementNoShortIfContext; 
Java8Parser.DoStatementContext = DoStatementContext; 
Java8Parser.ForStatementContext = ForStatementContext; 
Java8Parser.ForStatementNoShortIfContext = ForStatementNoShortIfContext; 
Java8Parser.BasicForStatementContext = BasicForStatementContext; 
Java8Parser.BasicForStatementNoShortIfContext = BasicForStatementNoShortIfContext; 
Java8Parser.ForInitContext = ForInitContext; 
Java8Parser.ForUpdateContext = ForUpdateContext; 
Java8Parser.StatementExpressionListContext = StatementExpressionListContext; 
Java8Parser.EnhancedForStatementContext = EnhancedForStatementContext; 
Java8Parser.EnhancedForStatementNoShortIfContext = EnhancedForStatementNoShortIfContext; 
Java8Parser.BreakStatementContext = BreakStatementContext; 
Java8Parser.ContinueStatementContext = ContinueStatementContext; 
Java8Parser.ReturnStatementContext = ReturnStatementContext; 
Java8Parser.ThrowStatementContext = ThrowStatementContext; 
Java8Parser.SynchronizedStatementContext = SynchronizedStatementContext; 
Java8Parser.TryStatementContext = TryStatementContext; 
Java8Parser.CatchesContext = CatchesContext; 
Java8Parser.CatchClauseContext = CatchClauseContext; 
Java8Parser.CatchFormalParameterContext = CatchFormalParameterContext; 
Java8Parser.CatchTypeContext = CatchTypeContext; 
Java8Parser.Finally_Context = Finally_Context; 
Java8Parser.TryWithResourcesStatementContext = TryWithResourcesStatementContext; 
Java8Parser.ResourceSpecificationContext = ResourceSpecificationContext; 
Java8Parser.ResourceListContext = ResourceListContext; 
Java8Parser.ResourceContext = ResourceContext; 
Java8Parser.PrimaryContext = PrimaryContext; 
Java8Parser.PrimaryNoNewArrayContext = PrimaryNoNewArrayContext; 
Java8Parser.PrimaryNoNewArray_lf_arrayAccessContext = PrimaryNoNewArray_lf_arrayAccessContext; 
Java8Parser.PrimaryNoNewArray_lfno_arrayAccessContext = PrimaryNoNewArray_lfno_arrayAccessContext; 
Java8Parser.PrimaryNoNewArray_lf_primaryContext = PrimaryNoNewArray_lf_primaryContext; 
Java8Parser.PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lf_arrayAccess_lf_primaryContext; 
Java8Parser.PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext = PrimaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primaryContext; 
Java8Parser.PrimaryNoNewArray_lfno_primaryContext = PrimaryNoNewArray_lfno_primaryContext; 
Java8Parser.PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primaryContext; 
Java8Parser.PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext = PrimaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primaryContext; 
Java8Parser.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext; 
Java8Parser.ClassInstanceCreationExpression_lf_primaryContext = ClassInstanceCreationExpression_lf_primaryContext; 
Java8Parser.ClassInstanceCreationExpression_lfno_primaryContext = ClassInstanceCreationExpression_lfno_primaryContext; 
Java8Parser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext; 
Java8Parser.FieldAccessContext = FieldAccessContext; 
Java8Parser.FieldAccess_lf_primaryContext = FieldAccess_lf_primaryContext; 
Java8Parser.FieldAccess_lfno_primaryContext = FieldAccess_lfno_primaryContext; 
Java8Parser.ArrayAccessContext = ArrayAccessContext; 
Java8Parser.ArrayAccess_lf_primaryContext = ArrayAccess_lf_primaryContext; 
Java8Parser.ArrayAccess_lfno_primaryContext = ArrayAccess_lfno_primaryContext; 
Java8Parser.MethodInvocationContext = MethodInvocationContext; 
Java8Parser.MethodInvocation_lf_primaryContext = MethodInvocation_lf_primaryContext; 
Java8Parser.MethodInvocation_lfno_primaryContext = MethodInvocation_lfno_primaryContext; 
Java8Parser.ArgumentListContext = ArgumentListContext; 
Java8Parser.MethodReferenceContext = MethodReferenceContext; 
Java8Parser.MethodReference_lf_primaryContext = MethodReference_lf_primaryContext; 
Java8Parser.MethodReference_lfno_primaryContext = MethodReference_lfno_primaryContext; 
Java8Parser.ArrayCreationExpressionContext = ArrayCreationExpressionContext; 
Java8Parser.DimExprsContext = DimExprsContext; 
Java8Parser.DimExprContext = DimExprContext; 
Java8Parser.ConstantExpressionContext = ConstantExpressionContext; 
Java8Parser.ExpressionContext = ExpressionContext; 
Java8Parser.LambdaExpressionContext = LambdaExpressionContext; 
Java8Parser.LambdaParametersContext = LambdaParametersContext; 
Java8Parser.InferredFormalParameterListContext = InferredFormalParameterListContext; 
Java8Parser.LambdaBodyContext = LambdaBodyContext; 
Java8Parser.AssignmentExpressionContext = AssignmentExpressionContext; 
Java8Parser.AssignmentContext = AssignmentContext; 
Java8Parser.LeftHandSideContext = LeftHandSideContext; 
Java8Parser.AssignmentOperatorContext = AssignmentOperatorContext; 
Java8Parser.ConditionalExpressionContext = ConditionalExpressionContext; 
Java8Parser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
Java8Parser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
Java8Parser.InclusiveOrExpressionContext = InclusiveOrExpressionContext; 
Java8Parser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext; 
Java8Parser.AndExpressionContext = AndExpressionContext; 
Java8Parser.EqualityExpressionContext = EqualityExpressionContext; 
Java8Parser.RelationalExpressionContext = RelationalExpressionContext; 
Java8Parser.ShiftExpressionContext = ShiftExpressionContext; 
Java8Parser.AdditiveExpressionContext = AdditiveExpressionContext; 
Java8Parser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
Java8Parser.UnaryExpressionContext = UnaryExpressionContext; 
Java8Parser.PreIncrementExpressionContext = PreIncrementExpressionContext; 
Java8Parser.PreDecrementExpressionContext = PreDecrementExpressionContext; 
Java8Parser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext; 
Java8Parser.PostfixExpressionContext = PostfixExpressionContext; 
Java8Parser.PostIncrementExpressionContext = PostIncrementExpressionContext; 
Java8Parser.PostIncrementExpression_lf_postfixExpressionContext = PostIncrementExpression_lf_postfixExpressionContext; 
Java8Parser.PostDecrementExpressionContext = PostDecrementExpressionContext; 
Java8Parser.PostDecrementExpression_lf_postfixExpressionContext = PostDecrementExpression_lf_postfixExpressionContext; 
Java8Parser.CastExpressionContext = CastExpressionContext; 
